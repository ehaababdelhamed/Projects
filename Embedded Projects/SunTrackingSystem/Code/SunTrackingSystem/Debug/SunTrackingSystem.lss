
SunTrackingSystem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003098  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010e  00800060  00003098  0000312c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  0080016e  0080016e  0000323a  2**0
                  ALLOC
  3 .stab         00002724  00000000  00000000  0000323c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f57  00000000  00000000  00005960  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  000068b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d3  00000000  00000000  00006a37  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000200f  00000000  00000000  00006c0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001170  00000000  00000000  00008c19  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001001  00000000  00000000  00009d89  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000ad8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c1  00000000  00000000  0000af2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ae  00000000  00000000  0000b1ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ba9b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 17 0a 	jmp	0x142e	; 0x142e <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e9       	ldi	r30, 0x98	; 152
      68:	f0 e3       	ldi	r31, 0x30	; 48
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 36       	cpi	r26, 0x6E	; 110
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e6       	ldi	r26, 0x6E	; 110
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 37       	cpi	r26, 0x79	; 121
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 81 06 	call	0xd02	; 0xd02 <main>
      8a:	0c 94 4a 18 	jmp	0x3094	; 0x3094 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ce 17 	jmp	0x2f9c	; 0x2f9c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ea 17 	jmp	0x2fd4	; 0x2fd4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 da 17 	jmp	0x2fb4	; 0x2fb4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f6 17 	jmp	0x2fec	; 0x2fec <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 da 17 	jmp	0x2fb4	; 0x2fb4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f6 17 	jmp	0x2fec	; 0x2fec <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ce 17 	jmp	0x2f9c	; 0x2f9c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ea 17 	jmp	0x2fd4	; 0x2fd4 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 da 17 	jmp	0x2fb4	; 0x2fb4 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 f6 17 	jmp	0x2fec	; 0x2fec <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 da 17 	jmp	0x2fb4	; 0x2fb4 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 f6 17 	jmp	0x2fec	; 0x2fec <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 da 17 	jmp	0x2fb4	; 0x2fb4 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 f6 17 	jmp	0x2fec	; 0x2fec <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 de 17 	jmp	0x2fbc	; 0x2fbc <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 fa 17 	jmp	0x2ff4	; 0x2ff4 <__epilogue_restores__+0x20>

000007fa <__floatunsisf>:
     7fa:	a8 e0       	ldi	r26, 0x08	; 8
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	e3 e0       	ldi	r30, 0x03	; 3
     800:	f4 e0       	ldi	r31, 0x04	; 4
     802:	0c 94 d6 17 	jmp	0x2fac	; 0x2fac <__prologue_saves__+0x10>
     806:	7b 01       	movw	r14, r22
     808:	8c 01       	movw	r16, r24
     80a:	61 15       	cp	r22, r1
     80c:	71 05       	cpc	r23, r1
     80e:	81 05       	cpc	r24, r1
     810:	91 05       	cpc	r25, r1
     812:	19 f4       	brne	.+6      	; 0x81a <__floatunsisf+0x20>
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	60 c0       	rjmp	.+192    	; 0x8da <__stack+0x7b>
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	8e e1       	ldi	r24, 0x1E	; 30
     820:	c8 2e       	mov	r12, r24
     822:	d1 2c       	mov	r13, r1
     824:	dc 82       	std	Y+4, r13	; 0x04
     826:	cb 82       	std	Y+3, r12	; 0x03
     828:	ed 82       	std	Y+5, r14	; 0x05
     82a:	fe 82       	std	Y+6, r15	; 0x06
     82c:	0f 83       	std	Y+7, r16	; 0x07
     82e:	18 87       	std	Y+8, r17	; 0x08
     830:	c8 01       	movw	r24, r16
     832:	b7 01       	movw	r22, r14
     834:	0e 94 76 04 	call	0x8ec	; 0x8ec <__clzsi2>
     838:	fc 01       	movw	r30, r24
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	f7 ff       	sbrs	r31, 7
     83e:	3b c0       	rjmp	.+118    	; 0x8b6 <__stack+0x57>
     840:	22 27       	eor	r18, r18
     842:	33 27       	eor	r19, r19
     844:	2e 1b       	sub	r18, r30
     846:	3f 0b       	sbc	r19, r31
     848:	57 01       	movw	r10, r14
     84a:	68 01       	movw	r12, r16
     84c:	02 2e       	mov	r0, r18
     84e:	04 c0       	rjmp	.+8      	; 0x858 <__floatunsisf+0x5e>
     850:	d6 94       	lsr	r13
     852:	c7 94       	ror	r12
     854:	b7 94       	ror	r11
     856:	a7 94       	ror	r10
     858:	0a 94       	dec	r0
     85a:	d2 f7       	brpl	.-12     	; 0x850 <__floatunsisf+0x56>
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	aa 1f       	adc	r26, r26
     874:	bb 1f       	adc	r27, r27
     876:	2a 95       	dec	r18
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	a1 09       	sbc	r26, r1
     87e:	b1 09       	sbc	r27, r1
     880:	8e 21       	and	r24, r14
     882:	9f 21       	and	r25, r15
     884:	a0 23       	and	r26, r16
     886:	b1 23       	and	r27, r17
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	a1 05       	cpc	r26, r1
     88c:	b1 05       	cpc	r27, r1
     88e:	21 f0       	breq	.+8      	; 0x898 <__stack+0x39>
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	4a 29       	or	r20, r10
     89a:	5b 29       	or	r21, r11
     89c:	6c 29       	or	r22, r12
     89e:	7d 29       	or	r23, r13
     8a0:	4d 83       	std	Y+5, r20	; 0x05
     8a2:	5e 83       	std	Y+6, r21	; 0x06
     8a4:	6f 83       	std	Y+7, r22	; 0x07
     8a6:	78 87       	std	Y+8, r23	; 0x08
     8a8:	8e e1       	ldi	r24, 0x1E	; 30
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	8e 1b       	sub	r24, r30
     8ae:	9f 0b       	sbc	r25, r31
     8b0:	9c 83       	std	Y+4, r25	; 0x04
     8b2:	8b 83       	std	Y+3, r24	; 0x03
     8b4:	12 c0       	rjmp	.+36     	; 0x8da <__stack+0x7b>
     8b6:	30 97       	sbiw	r30, 0x00	; 0
     8b8:	81 f0       	breq	.+32     	; 0x8da <__stack+0x7b>
     8ba:	0e 2e       	mov	r0, r30
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__stack+0x67>
     8be:	ee 0c       	add	r14, r14
     8c0:	ff 1c       	adc	r15, r15
     8c2:	00 1f       	adc	r16, r16
     8c4:	11 1f       	adc	r17, r17
     8c6:	0a 94       	dec	r0
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <__stack+0x5f>
     8ca:	ed 82       	std	Y+5, r14	; 0x05
     8cc:	fe 82       	std	Y+6, r15	; 0x06
     8ce:	0f 83       	std	Y+7, r16	; 0x07
     8d0:	18 87       	std	Y+8, r17	; 0x08
     8d2:	ce 1a       	sub	r12, r30
     8d4:	df 0a       	sbc	r13, r31
     8d6:	dc 82       	std	Y+4, r13	; 0x04
     8d8:	cb 82       	std	Y+3, r12	; 0x03
     8da:	1a 82       	std	Y+2, r1	; 0x02
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     8e4:	28 96       	adiw	r28, 0x08	; 8
     8e6:	ea e0       	ldi	r30, 0x0A	; 10
     8e8:	0c 94 f2 17 	jmp	0x2fe4	; 0x2fe4 <__epilogue_restores__+0x10>

000008ec <__clzsi2>:
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	7b 01       	movw	r14, r22
     8f6:	8c 01       	movw	r16, r24
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	e8 16       	cp	r14, r24
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	f8 06       	cpc	r15, r24
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	08 07       	cpc	r16, r24
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	18 07       	cpc	r17, r24
     908:	88 f4       	brcc	.+34     	; 0x92c <__clzsi2+0x40>
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	e8 16       	cp	r14, r24
     90e:	f1 04       	cpc	r15, r1
     910:	01 05       	cpc	r16, r1
     912:	11 05       	cpc	r17, r1
     914:	31 f0       	breq	.+12     	; 0x922 <__clzsi2+0x36>
     916:	28 f0       	brcs	.+10     	; 0x922 <__clzsi2+0x36>
     918:	88 e0       	ldi	r24, 0x08	; 8
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	17 c0       	rjmp	.+46     	; 0x950 <__clzsi2+0x64>
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	a0 e0       	ldi	r26, 0x00	; 0
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	12 c0       	rjmp	.+36     	; 0x950 <__clzsi2+0x64>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	e8 16       	cp	r14, r24
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	f8 06       	cpc	r15, r24
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 07       	cpc	r16, r24
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	18 07       	cpc	r17, r24
     93c:	28 f0       	brcs	.+10     	; 0x948 <__clzsi2+0x5c>
     93e:	88 e1       	ldi	r24, 0x18	; 24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	04 c0       	rjmp	.+8      	; 0x950 <__clzsi2+0x64>
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	20 e2       	ldi	r18, 0x20	; 32
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	28 1b       	sub	r18, r24
     95a:	39 0b       	sbc	r19, r25
     95c:	4a 0b       	sbc	r20, r26
     95e:	5b 0b       	sbc	r21, r27
     960:	04 c0       	rjmp	.+8      	; 0x96a <__clzsi2+0x7e>
     962:	16 95       	lsr	r17
     964:	07 95       	ror	r16
     966:	f7 94       	ror	r15
     968:	e7 94       	ror	r14
     96a:	8a 95       	dec	r24
     96c:	d2 f7       	brpl	.-12     	; 0x962 <__clzsi2+0x76>
     96e:	f7 01       	movw	r30, r14
     970:	e8 59       	subi	r30, 0x98	; 152
     972:	ff 4f       	sbci	r31, 0xFF	; 255
     974:	80 81       	ld	r24, Z
     976:	28 1b       	sub	r18, r24
     978:	31 09       	sbc	r19, r1
     97a:	41 09       	sbc	r20, r1
     97c:	51 09       	sbc	r21, r1
     97e:	c9 01       	movw	r24, r18
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	08 95       	ret

0000098a <__pack_f>:
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	fc 01       	movw	r30, r24
     996:	e4 80       	ldd	r14, Z+4	; 0x04
     998:	f5 80       	ldd	r15, Z+5	; 0x05
     99a:	06 81       	ldd	r16, Z+6	; 0x06
     99c:	17 81       	ldd	r17, Z+7	; 0x07
     99e:	d1 80       	ldd	r13, Z+1	; 0x01
     9a0:	80 81       	ld	r24, Z
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	48 f4       	brcc	.+18     	; 0x9b8 <__pack_f+0x2e>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	a0 e1       	ldi	r26, 0x10	; 16
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	e8 2a       	or	r14, r24
     9b0:	f9 2a       	or	r15, r25
     9b2:	0a 2b       	or	r16, r26
     9b4:	1b 2b       	or	r17, r27
     9b6:	a5 c0       	rjmp	.+330    	; 0xb02 <__pack_f+0x178>
     9b8:	84 30       	cpi	r24, 0x04	; 4
     9ba:	09 f4       	brne	.+2      	; 0x9be <__pack_f+0x34>
     9bc:	9f c0       	rjmp	.+318    	; 0xafc <__pack_f+0x172>
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	21 f4       	brne	.+8      	; 0x9ca <__pack_f+0x40>
     9c2:	ee 24       	eor	r14, r14
     9c4:	ff 24       	eor	r15, r15
     9c6:	87 01       	movw	r16, r14
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <__pack_f+0x4a>
     9ca:	e1 14       	cp	r14, r1
     9cc:	f1 04       	cpc	r15, r1
     9ce:	01 05       	cpc	r16, r1
     9d0:	11 05       	cpc	r17, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__pack_f+0x50>
     9d4:	e0 e0       	ldi	r30, 0x00	; 0
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	96 c0       	rjmp	.+300    	; 0xb06 <__pack_f+0x17c>
     9da:	62 81       	ldd	r22, Z+2	; 0x02
     9dc:	73 81       	ldd	r23, Z+3	; 0x03
     9de:	9f ef       	ldi	r25, 0xFF	; 255
     9e0:	62 38       	cpi	r22, 0x82	; 130
     9e2:	79 07       	cpc	r23, r25
     9e4:	0c f0       	brlt	.+2      	; 0x9e8 <__pack_f+0x5e>
     9e6:	5b c0       	rjmp	.+182    	; 0xa9e <__pack_f+0x114>
     9e8:	22 e8       	ldi	r18, 0x82	; 130
     9ea:	3f ef       	ldi	r19, 0xFF	; 255
     9ec:	26 1b       	sub	r18, r22
     9ee:	37 0b       	sbc	r19, r23
     9f0:	2a 31       	cpi	r18, 0x1A	; 26
     9f2:	31 05       	cpc	r19, r1
     9f4:	2c f0       	brlt	.+10     	; 0xa00 <__pack_f+0x76>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	2a c0       	rjmp	.+84     	; 0xa54 <__pack_f+0xca>
     a00:	b8 01       	movw	r22, r16
     a02:	a7 01       	movw	r20, r14
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__pack_f+0x86>
     a08:	76 95       	lsr	r23
     a0a:	67 95       	ror	r22
     a0c:	57 95       	ror	r21
     a0e:	47 95       	ror	r20
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__pack_f+0x7e>
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	a0 e0       	ldi	r26, 0x00	; 0
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__pack_f+0x9c>
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	aa 1f       	adc	r26, r26
     a24:	bb 1f       	adc	r27, r27
     a26:	2a 95       	dec	r18
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__pack_f+0x94>
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	a1 09       	sbc	r26, r1
     a2e:	b1 09       	sbc	r27, r1
     a30:	8e 21       	and	r24, r14
     a32:	9f 21       	and	r25, r15
     a34:	a0 23       	and	r26, r16
     a36:	b1 23       	and	r27, r17
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	a1 05       	cpc	r26, r1
     a3c:	b1 05       	cpc	r27, r1
     a3e:	21 f0       	breq	.+8      	; 0xa48 <__pack_f+0xbe>
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	9a 01       	movw	r18, r20
     a4a:	ab 01       	movw	r20, r22
     a4c:	28 2b       	or	r18, r24
     a4e:	39 2b       	or	r19, r25
     a50:	4a 2b       	or	r20, r26
     a52:	5b 2b       	or	r21, r27
     a54:	da 01       	movw	r26, r20
     a56:	c9 01       	movw	r24, r18
     a58:	8f 77       	andi	r24, 0x7F	; 127
     a5a:	90 70       	andi	r25, 0x00	; 0
     a5c:	a0 70       	andi	r26, 0x00	; 0
     a5e:	b0 70       	andi	r27, 0x00	; 0
     a60:	80 34       	cpi	r24, 0x40	; 64
     a62:	91 05       	cpc	r25, r1
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	39 f4       	brne	.+14     	; 0xa78 <__pack_f+0xee>
     a6a:	27 ff       	sbrs	r18, 7
     a6c:	09 c0       	rjmp	.+18     	; 0xa80 <__pack_f+0xf6>
     a6e:	20 5c       	subi	r18, 0xC0	; 192
     a70:	3f 4f       	sbci	r19, 0xFF	; 255
     a72:	4f 4f       	sbci	r20, 0xFF	; 255
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <__pack_f+0xf6>
     a78:	21 5c       	subi	r18, 0xC1	; 193
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
     a7c:	4f 4f       	sbci	r20, 0xFF	; 255
     a7e:	5f 4f       	sbci	r21, 0xFF	; 255
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	20 30       	cpi	r18, 0x00	; 0
     a86:	a0 e0       	ldi	r26, 0x00	; 0
     a88:	3a 07       	cpc	r19, r26
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	4a 07       	cpc	r20, r26
     a8e:	a0 e4       	ldi	r26, 0x40	; 64
     a90:	5a 07       	cpc	r21, r26
     a92:	10 f0       	brcs	.+4      	; 0xa98 <__pack_f+0x10e>
     a94:	e1 e0       	ldi	r30, 0x01	; 1
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	79 01       	movw	r14, r18
     a9a:	8a 01       	movw	r16, r20
     a9c:	27 c0       	rjmp	.+78     	; 0xaec <__pack_f+0x162>
     a9e:	60 38       	cpi	r22, 0x80	; 128
     aa0:	71 05       	cpc	r23, r1
     aa2:	64 f5       	brge	.+88     	; 0xafc <__pack_f+0x172>
     aa4:	fb 01       	movw	r30, r22
     aa6:	e1 58       	subi	r30, 0x81	; 129
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	d8 01       	movw	r26, r16
     aac:	c7 01       	movw	r24, r14
     aae:	8f 77       	andi	r24, 0x7F	; 127
     ab0:	90 70       	andi	r25, 0x00	; 0
     ab2:	a0 70       	andi	r26, 0x00	; 0
     ab4:	b0 70       	andi	r27, 0x00	; 0
     ab6:	80 34       	cpi	r24, 0x40	; 64
     ab8:	91 05       	cpc	r25, r1
     aba:	a1 05       	cpc	r26, r1
     abc:	b1 05       	cpc	r27, r1
     abe:	39 f4       	brne	.+14     	; 0xace <__pack_f+0x144>
     ac0:	e7 fe       	sbrs	r14, 7
     ac2:	0d c0       	rjmp	.+26     	; 0xade <__pack_f+0x154>
     ac4:	80 e4       	ldi	r24, 0x40	; 64
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <__pack_f+0x14c>
     ace:	8f e3       	ldi	r24, 0x3F	; 63
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	a0 e0       	ldi	r26, 0x00	; 0
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	e8 0e       	add	r14, r24
     ad8:	f9 1e       	adc	r15, r25
     ada:	0a 1f       	adc	r16, r26
     adc:	1b 1f       	adc	r17, r27
     ade:	17 ff       	sbrs	r17, 7
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <__pack_f+0x162>
     ae2:	16 95       	lsr	r17
     ae4:	07 95       	ror	r16
     ae6:	f7 94       	ror	r15
     ae8:	e7 94       	ror	r14
     aea:	31 96       	adiw	r30, 0x01	; 1
     aec:	87 e0       	ldi	r24, 0x07	; 7
     aee:	16 95       	lsr	r17
     af0:	07 95       	ror	r16
     af2:	f7 94       	ror	r15
     af4:	e7 94       	ror	r14
     af6:	8a 95       	dec	r24
     af8:	d1 f7       	brne	.-12     	; 0xaee <__pack_f+0x164>
     afa:	05 c0       	rjmp	.+10     	; 0xb06 <__pack_f+0x17c>
     afc:	ee 24       	eor	r14, r14
     afe:	ff 24       	eor	r15, r15
     b00:	87 01       	movw	r16, r14
     b02:	ef ef       	ldi	r30, 0xFF	; 255
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	6e 2f       	mov	r22, r30
     b08:	67 95       	ror	r22
     b0a:	66 27       	eor	r22, r22
     b0c:	67 95       	ror	r22
     b0e:	90 2f       	mov	r25, r16
     b10:	9f 77       	andi	r25, 0x7F	; 127
     b12:	d7 94       	ror	r13
     b14:	dd 24       	eor	r13, r13
     b16:	d7 94       	ror	r13
     b18:	8e 2f       	mov	r24, r30
     b1a:	86 95       	lsr	r24
     b1c:	49 2f       	mov	r20, r25
     b1e:	46 2b       	or	r20, r22
     b20:	58 2f       	mov	r21, r24
     b22:	5d 29       	or	r21, r13
     b24:	b7 01       	movw	r22, r14
     b26:	ca 01       	movw	r24, r20
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	08 95       	ret

00000b34 <__unpack_f>:
     b34:	fc 01       	movw	r30, r24
     b36:	db 01       	movw	r26, r22
     b38:	40 81       	ld	r20, Z
     b3a:	51 81       	ldd	r21, Z+1	; 0x01
     b3c:	22 81       	ldd	r18, Z+2	; 0x02
     b3e:	62 2f       	mov	r22, r18
     b40:	6f 77       	andi	r22, 0x7F	; 127
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	22 1f       	adc	r18, r18
     b46:	22 27       	eor	r18, r18
     b48:	22 1f       	adc	r18, r18
     b4a:	93 81       	ldd	r25, Z+3	; 0x03
     b4c:	89 2f       	mov	r24, r25
     b4e:	88 0f       	add	r24, r24
     b50:	82 2b       	or	r24, r18
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	99 1f       	adc	r25, r25
     b58:	99 27       	eor	r25, r25
     b5a:	99 1f       	adc	r25, r25
     b5c:	11 96       	adiw	r26, 0x01	; 1
     b5e:	9c 93       	st	X, r25
     b60:	11 97       	sbiw	r26, 0x01	; 1
     b62:	21 15       	cp	r18, r1
     b64:	31 05       	cpc	r19, r1
     b66:	a9 f5       	brne	.+106    	; 0xbd2 <__unpack_f+0x9e>
     b68:	41 15       	cp	r20, r1
     b6a:	51 05       	cpc	r21, r1
     b6c:	61 05       	cpc	r22, r1
     b6e:	71 05       	cpc	r23, r1
     b70:	11 f4       	brne	.+4      	; 0xb76 <__unpack_f+0x42>
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	37 c0       	rjmp	.+110    	; 0xbe4 <__unpack_f+0xb0>
     b76:	82 e8       	ldi	r24, 0x82	; 130
     b78:	9f ef       	ldi	r25, 0xFF	; 255
     b7a:	13 96       	adiw	r26, 0x03	; 3
     b7c:	9c 93       	st	X, r25
     b7e:	8e 93       	st	-X, r24
     b80:	12 97       	sbiw	r26, 0x02	; 2
     b82:	9a 01       	movw	r18, r20
     b84:	ab 01       	movw	r20, r22
     b86:	67 e0       	ldi	r22, 0x07	; 7
     b88:	22 0f       	add	r18, r18
     b8a:	33 1f       	adc	r19, r19
     b8c:	44 1f       	adc	r20, r20
     b8e:	55 1f       	adc	r21, r21
     b90:	6a 95       	dec	r22
     b92:	d1 f7       	brne	.-12     	; 0xb88 <__unpack_f+0x54>
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	8c 93       	st	X, r24
     b98:	0d c0       	rjmp	.+26     	; 0xbb4 <__unpack_f+0x80>
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	44 1f       	adc	r20, r20
     ba0:	55 1f       	adc	r21, r21
     ba2:	12 96       	adiw	r26, 0x02	; 2
     ba4:	8d 91       	ld	r24, X+
     ba6:	9c 91       	ld	r25, X
     ba8:	13 97       	sbiw	r26, 0x03	; 3
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	13 96       	adiw	r26, 0x03	; 3
     bae:	9c 93       	st	X, r25
     bb0:	8e 93       	st	-X, r24
     bb2:	12 97       	sbiw	r26, 0x02	; 2
     bb4:	20 30       	cpi	r18, 0x00	; 0
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	38 07       	cpc	r19, r24
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	48 07       	cpc	r20, r24
     bbe:	80 e4       	ldi	r24, 0x40	; 64
     bc0:	58 07       	cpc	r21, r24
     bc2:	58 f3       	brcs	.-42     	; 0xb9a <__unpack_f+0x66>
     bc4:	14 96       	adiw	r26, 0x04	; 4
     bc6:	2d 93       	st	X+, r18
     bc8:	3d 93       	st	X+, r19
     bca:	4d 93       	st	X+, r20
     bcc:	5c 93       	st	X, r21
     bce:	17 97       	sbiw	r26, 0x07	; 7
     bd0:	08 95       	ret
     bd2:	2f 3f       	cpi	r18, 0xFF	; 255
     bd4:	31 05       	cpc	r19, r1
     bd6:	79 f4       	brne	.+30     	; 0xbf6 <__unpack_f+0xc2>
     bd8:	41 15       	cp	r20, r1
     bda:	51 05       	cpc	r21, r1
     bdc:	61 05       	cpc	r22, r1
     bde:	71 05       	cpc	r23, r1
     be0:	19 f4       	brne	.+6      	; 0xbe8 <__unpack_f+0xb4>
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	8c 93       	st	X, r24
     be6:	08 95       	ret
     be8:	64 ff       	sbrs	r22, 4
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <__unpack_f+0xbe>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	8c 93       	st	X, r24
     bf0:	12 c0       	rjmp	.+36     	; 0xc16 <__unpack_f+0xe2>
     bf2:	1c 92       	st	X, r1
     bf4:	10 c0       	rjmp	.+32     	; 0xc16 <__unpack_f+0xe2>
     bf6:	2f 57       	subi	r18, 0x7F	; 127
     bf8:	30 40       	sbci	r19, 0x00	; 0
     bfa:	13 96       	adiw	r26, 0x03	; 3
     bfc:	3c 93       	st	X, r19
     bfe:	2e 93       	st	-X, r18
     c00:	12 97       	sbiw	r26, 0x02	; 2
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	8c 93       	st	X, r24
     c06:	87 e0       	ldi	r24, 0x07	; 7
     c08:	44 0f       	add	r20, r20
     c0a:	55 1f       	adc	r21, r21
     c0c:	66 1f       	adc	r22, r22
     c0e:	77 1f       	adc	r23, r23
     c10:	8a 95       	dec	r24
     c12:	d1 f7       	brne	.-12     	; 0xc08 <__unpack_f+0xd4>
     c14:	70 64       	ori	r23, 0x40	; 64
     c16:	14 96       	adiw	r26, 0x04	; 4
     c18:	4d 93       	st	X+, r20
     c1a:	5d 93       	st	X+, r21
     c1c:	6d 93       	st	X+, r22
     c1e:	7c 93       	st	X, r23
     c20:	17 97       	sbiw	r26, 0x07	; 7
     c22:	08 95       	ret

00000c24 <__fpcmp_parts_f>:
     c24:	1f 93       	push	r17
     c26:	dc 01       	movw	r26, r24
     c28:	fb 01       	movw	r30, r22
     c2a:	9c 91       	ld	r25, X
     c2c:	92 30       	cpi	r25, 0x02	; 2
     c2e:	08 f4       	brcc	.+2      	; 0xc32 <__fpcmp_parts_f+0xe>
     c30:	47 c0       	rjmp	.+142    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c32:	80 81       	ld	r24, Z
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	08 f4       	brcc	.+2      	; 0xc3a <__fpcmp_parts_f+0x16>
     c38:	43 c0       	rjmp	.+134    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c3a:	94 30       	cpi	r25, 0x04	; 4
     c3c:	51 f4       	brne	.+20     	; 0xc52 <__fpcmp_parts_f+0x2e>
     c3e:	11 96       	adiw	r26, 0x01	; 1
     c40:	1c 91       	ld	r17, X
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	99 f5       	brne	.+102    	; 0xcac <__fpcmp_parts_f+0x88>
     c46:	81 81       	ldd	r24, Z+1	; 0x01
     c48:	68 2f       	mov	r22, r24
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	61 1b       	sub	r22, r17
     c4e:	71 09       	sbc	r23, r1
     c50:	3f c0       	rjmp	.+126    	; 0xcd0 <__fpcmp_parts_f+0xac>
     c52:	84 30       	cpi	r24, 0x04	; 4
     c54:	21 f0       	breq	.+8      	; 0xc5e <__fpcmp_parts_f+0x3a>
     c56:	92 30       	cpi	r25, 0x02	; 2
     c58:	31 f4       	brne	.+12     	; 0xc66 <__fpcmp_parts_f+0x42>
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	b9 f1       	breq	.+110    	; 0xccc <__fpcmp_parts_f+0xa8>
     c5e:	81 81       	ldd	r24, Z+1	; 0x01
     c60:	88 23       	and	r24, r24
     c62:	89 f1       	breq	.+98     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     c64:	2d c0       	rjmp	.+90     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	1c 91       	ld	r17, X
     c6a:	11 97       	sbiw	r26, 0x01	; 1
     c6c:	82 30       	cpi	r24, 0x02	; 2
     c6e:	f1 f0       	breq	.+60     	; 0xcac <__fpcmp_parts_f+0x88>
     c70:	81 81       	ldd	r24, Z+1	; 0x01
     c72:	18 17       	cp	r17, r24
     c74:	d9 f4       	brne	.+54     	; 0xcac <__fpcmp_parts_f+0x88>
     c76:	12 96       	adiw	r26, 0x02	; 2
     c78:	2d 91       	ld	r18, X+
     c7a:	3c 91       	ld	r19, X
     c7c:	13 97       	sbiw	r26, 0x03	; 3
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	82 17       	cp	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	94 f0       	brlt	.+36     	; 0xcac <__fpcmp_parts_f+0x88>
     c88:	28 17       	cp	r18, r24
     c8a:	39 07       	cpc	r19, r25
     c8c:	bc f0       	brlt	.+46     	; 0xcbc <__fpcmp_parts_f+0x98>
     c8e:	14 96       	adiw	r26, 0x04	; 4
     c90:	8d 91       	ld	r24, X+
     c92:	9d 91       	ld	r25, X+
     c94:	0d 90       	ld	r0, X+
     c96:	bc 91       	ld	r27, X
     c98:	a0 2d       	mov	r26, r0
     c9a:	24 81       	ldd	r18, Z+4	; 0x04
     c9c:	35 81       	ldd	r19, Z+5	; 0x05
     c9e:	46 81       	ldd	r20, Z+6	; 0x06
     ca0:	57 81       	ldd	r21, Z+7	; 0x07
     ca2:	28 17       	cp	r18, r24
     ca4:	39 07       	cpc	r19, r25
     ca6:	4a 07       	cpc	r20, r26
     ca8:	5b 07       	cpc	r21, r27
     caa:	18 f4       	brcc	.+6      	; 0xcb2 <__fpcmp_parts_f+0x8e>
     cac:	11 23       	and	r17, r17
     cae:	41 f0       	breq	.+16     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     cb0:	0a c0       	rjmp	.+20     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cb2:	82 17       	cp	r24, r18
     cb4:	93 07       	cpc	r25, r19
     cb6:	a4 07       	cpc	r26, r20
     cb8:	b5 07       	cpc	r27, r21
     cba:	40 f4       	brcc	.+16     	; 0xccc <__fpcmp_parts_f+0xa8>
     cbc:	11 23       	and	r17, r17
     cbe:	19 f0       	breq	.+6      	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <__fpcmp_parts_f+0xac>
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <__fpcmp_parts_f+0xac>
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	cb 01       	movw	r24, r22
     cd2:	1f 91       	pop	r17
     cd4:	08 95       	ret

00000cd6 <LDR_getLight>:
/*
 * Description :
 * Function responsible for calculate the Percentage of light from the ADC digital value.
 */
uint16 LDR_getLight(uint8 LDR_channel)
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	00 d0       	rcall	.+0      	; 0xcdc <LDR_getLight+0x6>
     cdc:	0f 92       	push	r0
     cde:	cd b7       	in	r28, 0x3d	; 61
     ce0:	de b7       	in	r29, 0x3e	; 62
     ce2:	8b 83       	std	Y+3, r24	; 0x03
	uint16 light_value = 0;
     ce4:	1a 82       	std	Y+2, r1	; 0x02
     ce6:	19 82       	std	Y+1, r1	; 0x01

	/* Read ADC channel where the temperature sensor is connected */
	light_value = ADC_readChannel(LDR_channel);
     ce8:	8b 81       	ldd	r24, Y+3	; 0x03
     cea:	0e 94 cb 09 	call	0x1396	; 0x1396 <ADC_readChannel>
     cee:	9a 83       	std	Y+2, r25	; 0x02
     cf0:	89 83       	std	Y+1, r24	; 0x01

	return light_value;
     cf2:	89 81       	ldd	r24, Y+1	; 0x01
     cf4:	9a 81       	ldd	r25, Y+2	; 0x02
}
     cf6:	0f 90       	pop	r0
     cf8:	0f 90       	pop	r0
     cfa:	0f 90       	pop	r0
     cfc:	cf 91       	pop	r28
     cfe:	df 91       	pop	r29
     d00:	08 95       	ret

00000d02 <main>:
uint8 ServoVertical=90;
uint8 ServoHorizontal=90;


int main(void)
{
     d02:	df 93       	push	r29
     d04:	cf 93       	push	r28
     d06:	cd b7       	in	r28, 0x3d	; 61
     d08:	de b7       	in	r29, 0x3e	; 62
     d0a:	e4 97       	sbiw	r28, 0x34	; 52
     d0c:	0f b6       	in	r0, 0x3f	; 63
     d0e:	f8 94       	cli
     d10:	de bf       	out	0x3e, r29	; 62
     d12:	0f be       	out	0x3f, r0	; 63
     d14:	cd bf       	out	0x3d, r28	; 61
	uint16 AvrageTop=0;
     d16:	18 a6       	std	Y+40, r1	; 0x28
     d18:	1f a2       	std	Y+39, r1	; 0x27
	uint16 AvrageDown=0;
     d1a:	1e a2       	std	Y+38, r1	; 0x26
     d1c:	1d a2       	std	Y+37, r1	; 0x25
	uint16 AvrageRight=0;
     d1e:	1c a2       	std	Y+36, r1	; 0x24
     d20:	1b a2       	std	Y+35, r1	; 0x23
	uint16 AvrageLeft=0;
     d22:	1a a2       	std	Y+34, r1	; 0x22
     d24:	19 a2       	std	Y+33, r1	; 0x21
	uint16 AvrageTopDown=0;
     d26:	18 a2       	std	Y+32, r1	; 0x20
     d28:	1f 8e       	std	Y+31, r1	; 0x1f
	uint16 AvrageLeftRight=0;
     d2a:	1e 8e       	std	Y+30, r1	; 0x1e
     d2c:	1d 8e       	std	Y+29, r1	; 0x1d

	Servo_init(OC1A);
     d2e:	80 e0       	ldi	r24, 0x00	; 0
     d30:	0e 94 a7 08 	call	0x114e	; 0x114e <Servo_init>
	Servo_init(OC1B);
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	0e 94 a7 08 	call	0x114e	; 0x114e <Servo_init>
	Servo_write(ServoVertical,OC1A);
     d3a:	80 91 68 01 	lds	r24, 0x0168
     d3e:	60 e0       	ldi	r22, 0x00	; 0
     d40:	0e 94 c5 08 	call	0x118a	; 0x118a <Servo_write>
	Servo_write(ServoHorizontal,OC1B);
     d44:	80 91 69 01 	lds	r24, 0x0169
     d48:	61 e0       	ldi	r22, 0x01	; 1
     d4a:	0e 94 c5 08 	call	0x118a	; 0x118a <Servo_write>
	ADC_ConfigType ADC_Config={AVCC,POLLING,F_CPU_64};
     d4e:	ae 01       	movw	r20, r28
     d50:	47 5d       	subi	r20, 0xD7	; 215
     d52:	5f 4f       	sbci	r21, 0xFF	; 255
     d54:	59 ab       	std	Y+49, r21	; 0x31
     d56:	48 ab       	std	Y+48, r20	; 0x30
     d58:	8a e6       	ldi	r24, 0x6A	; 106
     d5a:	91 e0       	ldi	r25, 0x01	; 1
     d5c:	9b ab       	std	Y+51, r25	; 0x33
     d5e:	8a ab       	std	Y+50, r24	; 0x32
     d60:	93 e0       	ldi	r25, 0x03	; 3
     d62:	9c ab       	std	Y+52, r25	; 0x34
     d64:	ea a9       	ldd	r30, Y+50	; 0x32
     d66:	fb a9       	ldd	r31, Y+51	; 0x33
     d68:	00 80       	ld	r0, Z
     d6a:	4a a9       	ldd	r20, Y+50	; 0x32
     d6c:	5b a9       	ldd	r21, Y+51	; 0x33
     d6e:	4f 5f       	subi	r20, 0xFF	; 255
     d70:	5f 4f       	sbci	r21, 0xFF	; 255
     d72:	5b ab       	std	Y+51, r21	; 0x33
     d74:	4a ab       	std	Y+50, r20	; 0x32
     d76:	e8 a9       	ldd	r30, Y+48	; 0x30
     d78:	f9 a9       	ldd	r31, Y+49	; 0x31
     d7a:	00 82       	st	Z, r0
     d7c:	48 a9       	ldd	r20, Y+48	; 0x30
     d7e:	59 a9       	ldd	r21, Y+49	; 0x31
     d80:	4f 5f       	subi	r20, 0xFF	; 255
     d82:	5f 4f       	sbci	r21, 0xFF	; 255
     d84:	59 ab       	std	Y+49, r21	; 0x31
     d86:	48 ab       	std	Y+48, r20	; 0x30
     d88:	5c a9       	ldd	r21, Y+52	; 0x34
     d8a:	51 50       	subi	r21, 0x01	; 1
     d8c:	5c ab       	std	Y+52, r21	; 0x34
     d8e:	8c a9       	ldd	r24, Y+52	; 0x34
     d90:	88 23       	and	r24, r24
     d92:	41 f7       	brne	.-48     	; 0xd64 <main+0x62>
	ADC_init(&ADC_Config);
     d94:	ce 01       	movw	r24, r28
     d96:	89 96       	adiw	r24, 0x29	; 41
     d98:	0e 94 8a 09 	call	0x1314	; 0x1314 <ADC_init>
     d9c:	80 e0       	ldi	r24, 0x00	; 0
     d9e:	90 e4       	ldi	r25, 0x40	; 64
     da0:	ac e1       	ldi	r26, 0x1C	; 28
     da2:	b5 e4       	ldi	r27, 0x45	; 69
     da4:	89 8f       	std	Y+25, r24	; 0x19
     da6:	9a 8f       	std	Y+26, r25	; 0x1a
     da8:	ab 8f       	std	Y+27, r26	; 0x1b
     daa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dac:	69 8d       	ldd	r22, Y+25	; 0x19
     dae:	7a 8d       	ldd	r23, Y+26	; 0x1a
     db0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     db2:	9c 8d       	ldd	r25, Y+28	; 0x1c
     db4:	20 e0       	ldi	r18, 0x00	; 0
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	4a ef       	ldi	r20, 0xFA	; 250
     dba:	54 e4       	ldi	r21, 0x44	; 68
     dbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dc0:	dc 01       	movw	r26, r24
     dc2:	cb 01       	movw	r24, r22
     dc4:	8d 8b       	std	Y+21, r24	; 0x15
     dc6:	9e 8b       	std	Y+22, r25	; 0x16
     dc8:	af 8b       	std	Y+23, r26	; 0x17
     dca:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     dcc:	6d 89       	ldd	r22, Y+21	; 0x15
     dce:	7e 89       	ldd	r23, Y+22	; 0x16
     dd0:	8f 89       	ldd	r24, Y+23	; 0x17
     dd2:	98 8d       	ldd	r25, Y+24	; 0x18
     dd4:	20 e0       	ldi	r18, 0x00	; 0
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	40 e8       	ldi	r20, 0x80	; 128
     dda:	5f e3       	ldi	r21, 0x3F	; 63
     ddc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     de0:	88 23       	and	r24, r24
     de2:	2c f4       	brge	.+10     	; 0xdee <main+0xec>
		__ticks = 1;
     de4:	81 e0       	ldi	r24, 0x01	; 1
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	9c 8b       	std	Y+20, r25	; 0x14
     dea:	8b 8b       	std	Y+19, r24	; 0x13
     dec:	3f c0       	rjmp	.+126    	; 0xe6c <main+0x16a>
	else if (__tmp > 65535)
     dee:	6d 89       	ldd	r22, Y+21	; 0x15
     df0:	7e 89       	ldd	r23, Y+22	; 0x16
     df2:	8f 89       	ldd	r24, Y+23	; 0x17
     df4:	98 8d       	ldd	r25, Y+24	; 0x18
     df6:	20 e0       	ldi	r18, 0x00	; 0
     df8:	3f ef       	ldi	r19, 0xFF	; 255
     dfa:	4f e7       	ldi	r20, 0x7F	; 127
     dfc:	57 e4       	ldi	r21, 0x47	; 71
     dfe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e02:	18 16       	cp	r1, r24
     e04:	4c f5       	brge	.+82     	; 0xe58 <main+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e06:	69 8d       	ldd	r22, Y+25	; 0x19
     e08:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e0a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e0c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e0e:	20 e0       	ldi	r18, 0x00	; 0
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	40 e2       	ldi	r20, 0x20	; 32
     e14:	51 e4       	ldi	r21, 0x41	; 65
     e16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e1a:	dc 01       	movw	r26, r24
     e1c:	cb 01       	movw	r24, r22
     e1e:	bc 01       	movw	r22, r24
     e20:	cd 01       	movw	r24, r26
     e22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e26:	dc 01       	movw	r26, r24
     e28:	cb 01       	movw	r24, r22
     e2a:	9c 8b       	std	Y+20, r25	; 0x14
     e2c:	8b 8b       	std	Y+19, r24	; 0x13
     e2e:	0f c0       	rjmp	.+30     	; 0xe4e <main+0x14c>
     e30:	88 ec       	ldi	r24, 0xC8	; 200
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	9a 8b       	std	Y+18, r25	; 0x12
     e36:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e38:	89 89       	ldd	r24, Y+17	; 0x11
     e3a:	9a 89       	ldd	r25, Y+18	; 0x12
     e3c:	01 97       	sbiw	r24, 0x01	; 1
     e3e:	f1 f7       	brne	.-4      	; 0xe3c <main+0x13a>
     e40:	9a 8b       	std	Y+18, r25	; 0x12
     e42:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e44:	8b 89       	ldd	r24, Y+19	; 0x13
     e46:	9c 89       	ldd	r25, Y+20	; 0x14
     e48:	01 97       	sbiw	r24, 0x01	; 1
     e4a:	9c 8b       	std	Y+20, r25	; 0x14
     e4c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e4e:	8b 89       	ldd	r24, Y+19	; 0x13
     e50:	9c 89       	ldd	r25, Y+20	; 0x14
     e52:	00 97       	sbiw	r24, 0x00	; 0
     e54:	69 f7       	brne	.-38     	; 0xe30 <main+0x12e>
     e56:	14 c0       	rjmp	.+40     	; 0xe80 <main+0x17e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e58:	6d 89       	ldd	r22, Y+21	; 0x15
     e5a:	7e 89       	ldd	r23, Y+22	; 0x16
     e5c:	8f 89       	ldd	r24, Y+23	; 0x17
     e5e:	98 8d       	ldd	r25, Y+24	; 0x18
     e60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e64:	dc 01       	movw	r26, r24
     e66:	cb 01       	movw	r24, r22
     e68:	9c 8b       	std	Y+20, r25	; 0x14
     e6a:	8b 8b       	std	Y+19, r24	; 0x13
     e6c:	8b 89       	ldd	r24, Y+19	; 0x13
     e6e:	9c 89       	ldd	r25, Y+20	; 0x14
     e70:	98 8b       	std	Y+16, r25	; 0x10
     e72:	8f 87       	std	Y+15, r24	; 0x0f
     e74:	8f 85       	ldd	r24, Y+15	; 0x0f
     e76:	98 89       	ldd	r25, Y+16	; 0x10
     e78:	01 97       	sbiw	r24, 0x01	; 1
     e7a:	f1 f7       	brne	.-4      	; 0xe78 <main+0x176>
     e7c:	98 8b       	std	Y+16, r25	; 0x10
     e7e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2500);
	while(1)
	{
		LeftTop=LDR_getLight(LEFT_TOP_CHANNEL);
     e80:	80 e0       	ldi	r24, 0x00	; 0
     e82:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <LDR_getLight>
     e86:	90 93 6f 01 	sts	0x016F, r25
     e8a:	80 93 6e 01 	sts	0x016E, r24
		LeftDown=LDR_getLight(LEFT_DOWN_CHANNEL);
     e8e:	82 e0       	ldi	r24, 0x02	; 2
     e90:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <LDR_getLight>
     e94:	90 93 71 01 	sts	0x0171, r25
     e98:	80 93 70 01 	sts	0x0170, r24
		RightTop=LDR_getLight(RIGHT_TOP_CHANNEL);
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <LDR_getLight>
     ea2:	90 93 73 01 	sts	0x0173, r25
     ea6:	80 93 72 01 	sts	0x0172, r24
		RightDown=LDR_getLight(RIGHT_DOWN_CHANNEL);
     eaa:	83 e0       	ldi	r24, 0x03	; 3
     eac:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <LDR_getLight>
     eb0:	90 93 75 01 	sts	0x0175, r25
     eb4:	80 93 74 01 	sts	0x0174, r24

		AvrageTop=(uint16)((RightTop+LeftTop)/2);
     eb8:	20 91 72 01 	lds	r18, 0x0172
     ebc:	30 91 73 01 	lds	r19, 0x0173
     ec0:	80 91 6e 01 	lds	r24, 0x016E
     ec4:	90 91 6f 01 	lds	r25, 0x016F
     ec8:	82 0f       	add	r24, r18
     eca:	93 1f       	adc	r25, r19
     ecc:	96 95       	lsr	r25
     ece:	87 95       	ror	r24
     ed0:	98 a7       	std	Y+40, r25	; 0x28
     ed2:	8f a3       	std	Y+39, r24	; 0x27
		AvrageDown=(uint16)((RightDown+LeftDown)/2);
     ed4:	20 91 74 01 	lds	r18, 0x0174
     ed8:	30 91 75 01 	lds	r19, 0x0175
     edc:	80 91 70 01 	lds	r24, 0x0170
     ee0:	90 91 71 01 	lds	r25, 0x0171
     ee4:	82 0f       	add	r24, r18
     ee6:	93 1f       	adc	r25, r19
     ee8:	96 95       	lsr	r25
     eea:	87 95       	ror	r24
     eec:	9e a3       	std	Y+38, r25	; 0x26
     eee:	8d a3       	std	Y+37, r24	; 0x25
		AvrageRight=(uint16)((RightTop+RightDown)/2);
     ef0:	20 91 72 01 	lds	r18, 0x0172
     ef4:	30 91 73 01 	lds	r19, 0x0173
     ef8:	80 91 74 01 	lds	r24, 0x0174
     efc:	90 91 75 01 	lds	r25, 0x0175
     f00:	82 0f       	add	r24, r18
     f02:	93 1f       	adc	r25, r19
     f04:	96 95       	lsr	r25
     f06:	87 95       	ror	r24
     f08:	9c a3       	std	Y+36, r25	; 0x24
     f0a:	8b a3       	std	Y+35, r24	; 0x23
		AvrageLeft=(uint16)((LeftTop+LeftDown)/2);
     f0c:	20 91 6e 01 	lds	r18, 0x016E
     f10:	30 91 6f 01 	lds	r19, 0x016F
     f14:	80 91 70 01 	lds	r24, 0x0170
     f18:	90 91 71 01 	lds	r25, 0x0171
     f1c:	82 0f       	add	r24, r18
     f1e:	93 1f       	adc	r25, r19
     f20:	96 95       	lsr	r25
     f22:	87 95       	ror	r24
     f24:	9a a3       	std	Y+34, r25	; 0x22
     f26:	89 a3       	std	Y+33, r24	; 0x21

		AvrageTopDown=abs(AvrageTop-AvrageDown);
     f28:	2f a1       	ldd	r18, Y+39	; 0x27
     f2a:	38 a5       	ldd	r19, Y+40	; 0x28
     f2c:	8d a1       	ldd	r24, Y+37	; 0x25
     f2e:	9e a1       	ldd	r25, Y+38	; 0x26
     f30:	f9 01       	movw	r30, r18
     f32:	e8 1b       	sub	r30, r24
     f34:	f9 0b       	sbc	r31, r25
     f36:	cf 01       	movw	r24, r30
     f38:	9f a7       	std	Y+47, r25	; 0x2f
     f3a:	8e a7       	std	Y+46, r24	; 0x2e
     f3c:	4e a5       	ldd	r20, Y+46	; 0x2e
     f3e:	5f a5       	ldd	r21, Y+47	; 0x2f
     f40:	55 23       	and	r21, r21
     f42:	3c f4       	brge	.+14     	; 0xf52 <main+0x250>
     f44:	8e a5       	ldd	r24, Y+46	; 0x2e
     f46:	9f a5       	ldd	r25, Y+47	; 0x2f
     f48:	90 95       	com	r25
     f4a:	81 95       	neg	r24
     f4c:	9f 4f       	sbci	r25, 0xFF	; 255
     f4e:	9f a7       	std	Y+47, r25	; 0x2f
     f50:	8e a7       	std	Y+46, r24	; 0x2e
     f52:	ee a5       	ldd	r30, Y+46	; 0x2e
     f54:	ff a5       	ldd	r31, Y+47	; 0x2f
     f56:	f8 a3       	std	Y+32, r31	; 0x20
     f58:	ef 8f       	std	Y+31, r30	; 0x1f
		AvrageLeftRight=abs(AvrageRight-AvrageLeft);
     f5a:	2b a1       	ldd	r18, Y+35	; 0x23
     f5c:	3c a1       	ldd	r19, Y+36	; 0x24
     f5e:	89 a1       	ldd	r24, Y+33	; 0x21
     f60:	9a a1       	ldd	r25, Y+34	; 0x22
     f62:	a9 01       	movw	r20, r18
     f64:	48 1b       	sub	r20, r24
     f66:	59 0b       	sbc	r21, r25
     f68:	ca 01       	movw	r24, r20
     f6a:	9d a7       	std	Y+45, r25	; 0x2d
     f6c:	8c a7       	std	Y+44, r24	; 0x2c
     f6e:	8c a5       	ldd	r24, Y+44	; 0x2c
     f70:	9d a5       	ldd	r25, Y+45	; 0x2d
     f72:	99 23       	and	r25, r25
     f74:	3c f4       	brge	.+14     	; 0xf84 <main+0x282>
     f76:	ec a5       	ldd	r30, Y+44	; 0x2c
     f78:	fd a5       	ldd	r31, Y+45	; 0x2d
     f7a:	f0 95       	com	r31
     f7c:	e1 95       	neg	r30
     f7e:	ff 4f       	sbci	r31, 0xFF	; 255
     f80:	fd a7       	std	Y+45, r31	; 0x2d
     f82:	ec a7       	std	Y+44, r30	; 0x2c
     f84:	4c a5       	ldd	r20, Y+44	; 0x2c
     f86:	5d a5       	ldd	r21, Y+45	; 0x2d
     f88:	5e 8f       	std	Y+30, r21	; 0x1e
     f8a:	4d 8f       	std	Y+29, r20	; 0x1d

		if(AvrageTopDown>Tolerance){
     f8c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f8e:	98 a1       	ldd	r25, Y+32	; 0x20
     f90:	8b 30       	cpi	r24, 0x0B	; 11
     f92:	91 05       	cpc	r25, r1
     f94:	90 f1       	brcs	.+100    	; 0xffa <main+0x2f8>
			if(AvrageTop<(AvrageDown-Tolerance)){
     f96:	8d a1       	ldd	r24, Y+37	; 0x25
     f98:	9e a1       	ldd	r25, Y+38	; 0x26
     f9a:	9c 01       	movw	r18, r24
     f9c:	2a 50       	subi	r18, 0x0A	; 10
     f9e:	30 40       	sbci	r19, 0x00	; 0
     fa0:	8f a1       	ldd	r24, Y+39	; 0x27
     fa2:	98 a5       	ldd	r25, Y+40	; 0x28
     fa4:	82 17       	cp	r24, r18
     fa6:	93 07       	cpc	r25, r19
     fa8:	68 f4       	brcc	.+26     	; 0xfc4 <main+0x2c2>
				ServoVertical++;
     faa:	80 91 68 01 	lds	r24, 0x0168
     fae:	8f 5f       	subi	r24, 0xFF	; 255
     fb0:	80 93 68 01 	sts	0x0168, r24
				if(ServoVertical>=MAXIMUM_VERTICAL_DEGREE){
     fb4:	80 91 68 01 	lds	r24, 0x0168
     fb8:	80 3a       	cpi	r24, 0xA0	; 160
     fba:	d0 f0       	brcs	.+52     	; 0xff0 <main+0x2ee>
					ServoVertical=MAXIMUM_VERTICAL_DEGREE;
     fbc:	80 ea       	ldi	r24, 0xA0	; 160
     fbe:	80 93 68 01 	sts	0x0168, r24
     fc2:	16 c0       	rjmp	.+44     	; 0xff0 <main+0x2ee>
				}
			}else if(AvrageTop>(AvrageDown+Tolerance)){
     fc4:	8d a1       	ldd	r24, Y+37	; 0x25
     fc6:	9e a1       	ldd	r25, Y+38	; 0x26
     fc8:	9c 01       	movw	r18, r24
     fca:	26 5f       	subi	r18, 0xF6	; 246
     fcc:	3f 4f       	sbci	r19, 0xFF	; 255
     fce:	8f a1       	ldd	r24, Y+39	; 0x27
     fd0:	98 a5       	ldd	r25, Y+40	; 0x28
     fd2:	28 17       	cp	r18, r24
     fd4:	39 07       	cpc	r19, r25
     fd6:	60 f4       	brcc	.+24     	; 0xff0 <main+0x2ee>
				ServoVertical--;
     fd8:	80 91 68 01 	lds	r24, 0x0168
     fdc:	81 50       	subi	r24, 0x01	; 1
     fde:	80 93 68 01 	sts	0x0168, r24
				if(ServoVertical<=MINIMUM_VERTICAL_DEGREE){
     fe2:	80 91 68 01 	lds	r24, 0x0168
     fe6:	8b 30       	cpi	r24, 0x0B	; 11
     fe8:	18 f4       	brcc	.+6      	; 0xff0 <main+0x2ee>
					ServoVertical=MINIMUM_VERTICAL_DEGREE;
     fea:	8a e0       	ldi	r24, 0x0A	; 10
     fec:	80 93 68 01 	sts	0x0168, r24
				}
			}
			Servo_write(ServoVertical,OC1A);
     ff0:	80 91 68 01 	lds	r24, 0x0168
     ff4:	60 e0       	ldi	r22, 0x00	; 0
     ff6:	0e 94 c5 08 	call	0x118a	; 0x118a <Servo_write>
		}
		if(AvrageLeftRight>Tolerance){
     ffa:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ffc:	9e 8d       	ldd	r25, Y+30	; 0x1e
     ffe:	8b 30       	cpi	r24, 0x0B	; 11
    1000:	91 05       	cpc	r25, r1
    1002:	90 f1       	brcs	.+100    	; 0x1068 <main+0x366>
			if(AvrageLeft>(AvrageRight+Tolerance)){
    1004:	8b a1       	ldd	r24, Y+35	; 0x23
    1006:	9c a1       	ldd	r25, Y+36	; 0x24
    1008:	9c 01       	movw	r18, r24
    100a:	26 5f       	subi	r18, 0xF6	; 246
    100c:	3f 4f       	sbci	r19, 0xFF	; 255
    100e:	89 a1       	ldd	r24, Y+33	; 0x21
    1010:	9a a1       	ldd	r25, Y+34	; 0x22
    1012:	28 17       	cp	r18, r24
    1014:	39 07       	cpc	r19, r25
    1016:	68 f4       	brcc	.+26     	; 0x1032 <main+0x330>
				ServoHorizontal++;
    1018:	80 91 69 01 	lds	r24, 0x0169
    101c:	8f 5f       	subi	r24, 0xFF	; 255
    101e:	80 93 69 01 	sts	0x0169, r24
				if(ServoHorizontal>=MAXIMUM_HORIZONTAL_DEGREE){
    1022:	80 91 69 01 	lds	r24, 0x0169
    1026:	8a 3a       	cpi	r24, 0xAA	; 170
    1028:	d0 f0       	brcs	.+52     	; 0x105e <main+0x35c>
					ServoHorizontal=MAXIMUM_HORIZONTAL_DEGREE;
    102a:	8a ea       	ldi	r24, 0xAA	; 170
    102c:	80 93 69 01 	sts	0x0169, r24
    1030:	16 c0       	rjmp	.+44     	; 0x105e <main+0x35c>
				}
			}else if(AvrageLeft<(AvrageRight-Tolerance)){
    1032:	8b a1       	ldd	r24, Y+35	; 0x23
    1034:	9c a1       	ldd	r25, Y+36	; 0x24
    1036:	9c 01       	movw	r18, r24
    1038:	2a 50       	subi	r18, 0x0A	; 10
    103a:	30 40       	sbci	r19, 0x00	; 0
    103c:	89 a1       	ldd	r24, Y+33	; 0x21
    103e:	9a a1       	ldd	r25, Y+34	; 0x22
    1040:	82 17       	cp	r24, r18
    1042:	93 07       	cpc	r25, r19
    1044:	60 f4       	brcc	.+24     	; 0x105e <main+0x35c>
				ServoHorizontal--;
    1046:	80 91 69 01 	lds	r24, 0x0169
    104a:	81 50       	subi	r24, 0x01	; 1
    104c:	80 93 69 01 	sts	0x0169, r24
				if(ServoHorizontal<=MINIMUM_HORIZONTAL_DEGREE){
    1050:	80 91 69 01 	lds	r24, 0x0169
    1054:	8b 30       	cpi	r24, 0x0B	; 11
    1056:	18 f4       	brcc	.+6      	; 0x105e <main+0x35c>
					ServoHorizontal=MINIMUM_HORIZONTAL_DEGREE;
    1058:	8a e0       	ldi	r24, 0x0A	; 10
    105a:	80 93 69 01 	sts	0x0169, r24
				}
			}
			Servo_write(ServoHorizontal,OC1B);
    105e:	80 91 69 01 	lds	r24, 0x0169
    1062:	61 e0       	ldi	r22, 0x01	; 1
    1064:	0e 94 c5 08 	call	0x118a	; 0x118a <Servo_write>
    1068:	80 e0       	ldi	r24, 0x00	; 0
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	a0 ea       	ldi	r26, 0xA0	; 160
    106e:	b1 e4       	ldi	r27, 0x41	; 65
    1070:	8b 87       	std	Y+11, r24	; 0x0b
    1072:	9c 87       	std	Y+12, r25	; 0x0c
    1074:	ad 87       	std	Y+13, r26	; 0x0d
    1076:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1078:	6b 85       	ldd	r22, Y+11	; 0x0b
    107a:	7c 85       	ldd	r23, Y+12	; 0x0c
    107c:	8d 85       	ldd	r24, Y+13	; 0x0d
    107e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1080:	20 e0       	ldi	r18, 0x00	; 0
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	4a ef       	ldi	r20, 0xFA	; 250
    1086:	54 e4       	ldi	r21, 0x44	; 68
    1088:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    108c:	dc 01       	movw	r26, r24
    108e:	cb 01       	movw	r24, r22
    1090:	8f 83       	std	Y+7, r24	; 0x07
    1092:	98 87       	std	Y+8, r25	; 0x08
    1094:	a9 87       	std	Y+9, r26	; 0x09
    1096:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1098:	6f 81       	ldd	r22, Y+7	; 0x07
    109a:	78 85       	ldd	r23, Y+8	; 0x08
    109c:	89 85       	ldd	r24, Y+9	; 0x09
    109e:	9a 85       	ldd	r25, Y+10	; 0x0a
    10a0:	20 e0       	ldi	r18, 0x00	; 0
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	40 e8       	ldi	r20, 0x80	; 128
    10a6:	5f e3       	ldi	r21, 0x3F	; 63
    10a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10ac:	88 23       	and	r24, r24
    10ae:	2c f4       	brge	.+10     	; 0x10ba <main+0x3b8>
		__ticks = 1;
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	9e 83       	std	Y+6, r25	; 0x06
    10b6:	8d 83       	std	Y+5, r24	; 0x05
    10b8:	3f c0       	rjmp	.+126    	; 0x1138 <main+0x436>
	else if (__tmp > 65535)
    10ba:	6f 81       	ldd	r22, Y+7	; 0x07
    10bc:	78 85       	ldd	r23, Y+8	; 0x08
    10be:	89 85       	ldd	r24, Y+9	; 0x09
    10c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    10c2:	20 e0       	ldi	r18, 0x00	; 0
    10c4:	3f ef       	ldi	r19, 0xFF	; 255
    10c6:	4f e7       	ldi	r20, 0x7F	; 127
    10c8:	57 e4       	ldi	r21, 0x47	; 71
    10ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10ce:	18 16       	cp	r1, r24
    10d0:	4c f5       	brge	.+82     	; 0x1124 <main+0x422>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    10d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    10d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    10d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    10da:	20 e0       	ldi	r18, 0x00	; 0
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	40 e2       	ldi	r20, 0x20	; 32
    10e0:	51 e4       	ldi	r21, 0x41	; 65
    10e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10e6:	dc 01       	movw	r26, r24
    10e8:	cb 01       	movw	r24, r22
    10ea:	bc 01       	movw	r22, r24
    10ec:	cd 01       	movw	r24, r26
    10ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10f2:	dc 01       	movw	r26, r24
    10f4:	cb 01       	movw	r24, r22
    10f6:	9e 83       	std	Y+6, r25	; 0x06
    10f8:	8d 83       	std	Y+5, r24	; 0x05
    10fa:	0f c0       	rjmp	.+30     	; 0x111a <main+0x418>
    10fc:	88 ec       	ldi	r24, 0xC8	; 200
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	9c 83       	std	Y+4, r25	; 0x04
    1102:	8b 83       	std	Y+3, r24	; 0x03
    1104:	8b 81       	ldd	r24, Y+3	; 0x03
    1106:	9c 81       	ldd	r25, Y+4	; 0x04
    1108:	01 97       	sbiw	r24, 0x01	; 1
    110a:	f1 f7       	brne	.-4      	; 0x1108 <main+0x406>
    110c:	9c 83       	std	Y+4, r25	; 0x04
    110e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1110:	8d 81       	ldd	r24, Y+5	; 0x05
    1112:	9e 81       	ldd	r25, Y+6	; 0x06
    1114:	01 97       	sbiw	r24, 0x01	; 1
    1116:	9e 83       	std	Y+6, r25	; 0x06
    1118:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    111a:	8d 81       	ldd	r24, Y+5	; 0x05
    111c:	9e 81       	ldd	r25, Y+6	; 0x06
    111e:	00 97       	sbiw	r24, 0x00	; 0
    1120:	69 f7       	brne	.-38     	; 0x10fc <main+0x3fa>
    1122:	ae ce       	rjmp	.-676    	; 0xe80 <main+0x17e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1124:	6f 81       	ldd	r22, Y+7	; 0x07
    1126:	78 85       	ldd	r23, Y+8	; 0x08
    1128:	89 85       	ldd	r24, Y+9	; 0x09
    112a:	9a 85       	ldd	r25, Y+10	; 0x0a
    112c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1130:	dc 01       	movw	r26, r24
    1132:	cb 01       	movw	r24, r22
    1134:	9e 83       	std	Y+6, r25	; 0x06
    1136:	8d 83       	std	Y+5, r24	; 0x05
    1138:	8d 81       	ldd	r24, Y+5	; 0x05
    113a:	9e 81       	ldd	r25, Y+6	; 0x06
    113c:	9a 83       	std	Y+2, r25	; 0x02
    113e:	89 83       	std	Y+1, r24	; 0x01
    1140:	89 81       	ldd	r24, Y+1	; 0x01
    1142:	9a 81       	ldd	r25, Y+2	; 0x02
    1144:	01 97       	sbiw	r24, 0x01	; 1
    1146:	f1 f7       	brne	.-4      	; 0x1144 <main+0x442>
    1148:	9a 83       	std	Y+2, r25	; 0x02
    114a:	89 83       	std	Y+1, r24	; 0x01
    114c:	99 ce       	rjmp	.-718    	; 0xe80 <main+0x17e>

0000114e <Servo_init>:
#define DGREE (5.56)


uint8 g_Postion=0;

void Servo_init(uint8 PWM_Channel){
    114e:	df 93       	push	r29
    1150:	cf 93       	push	r28
    1152:	0f 92       	push	r0
    1154:	cd b7       	in	r28, 0x3d	; 61
    1156:	de b7       	in	r29, 0x3e	; 62
    1158:	89 83       	std	Y+1, r24	; 0x01
	Timer1_PWM_init(PWM_Channel);
    115a:	89 81       	ldd	r24, Y+1	; 0x01
    115c:	0e 94 25 09 	call	0x124a	; 0x124a <Timer1_PWM_init>
	if(PWM_Channel==OC1A){
    1160:	89 81       	ldd	r24, Y+1	; 0x01
    1162:	88 23       	and	r24, r24
    1164:	31 f4       	brne	.+12     	; 0x1172 <Servo_init+0x24>
		GPIO_setupPinDirection(PORTD_ID, PIN5_ID, PIN_OUTPUT);
    1166:	83 e0       	ldi	r24, 0x03	; 3
    1168:	65 e0       	ldi	r22, 0x05	; 5
    116a:	41 e0       	ldi	r20, 0x01	; 1
    116c:	0e 94 37 0a 	call	0x146e	; 0x146e <GPIO_setupPinDirection>
    1170:	08 c0       	rjmp	.+16     	; 0x1182 <Servo_init+0x34>
	}else if(PWM_Channel==OC1B){
    1172:	89 81       	ldd	r24, Y+1	; 0x01
    1174:	81 30       	cpi	r24, 0x01	; 1
    1176:	29 f4       	brne	.+10     	; 0x1182 <Servo_init+0x34>
		GPIO_setupPinDirection(PORTD_ID, PIN4_ID, PIN_OUTPUT);
    1178:	83 e0       	ldi	r24, 0x03	; 3
    117a:	64 e0       	ldi	r22, 0x04	; 4
    117c:	41 e0       	ldi	r20, 0x01	; 1
    117e:	0e 94 37 0a 	call	0x146e	; 0x146e <GPIO_setupPinDirection>
	}
}
    1182:	0f 90       	pop	r0
    1184:	cf 91       	pop	r28
    1186:	df 91       	pop	r29
    1188:	08 95       	ret

0000118a <Servo_write>:

void Servo_write(uint8 Postion,uint8 PWM_Channel){
    118a:	df 93       	push	r29
    118c:	cf 93       	push	r28
    118e:	00 d0       	rcall	.+0      	; 0x1190 <Servo_write+0x6>
    1190:	00 d0       	rcall	.+0      	; 0x1192 <Servo_write+0x8>
    1192:	cd b7       	in	r28, 0x3d	; 61
    1194:	de b7       	in	r29, 0x3e	; 62
    1196:	8b 83       	std	Y+3, r24	; 0x03
    1198:	6c 83       	std	Y+4, r22	; 0x04
	g_Postion=Postion;
    119a:	8b 81       	ldd	r24, Y+3	; 0x03
    119c:	80 93 76 01 	sts	0x0176, r24
	uint16 Pos=(uint16)(SERVOANGLE0+((float)Postion*DGREE));
    11a0:	8b 81       	ldd	r24, Y+3	; 0x03
    11a2:	88 2f       	mov	r24, r24
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	a0 e0       	ldi	r26, 0x00	; 0
    11a8:	b0 e0       	ldi	r27, 0x00	; 0
    11aa:	bc 01       	movw	r22, r24
    11ac:	cd 01       	movw	r24, r26
    11ae:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    11b2:	dc 01       	movw	r26, r24
    11b4:	cb 01       	movw	r24, r22
    11b6:	bc 01       	movw	r22, r24
    11b8:	cd 01       	movw	r24, r26
    11ba:	25 e8       	ldi	r18, 0x85	; 133
    11bc:	3b ee       	ldi	r19, 0xEB	; 235
    11be:	41 eb       	ldi	r20, 0xB1	; 177
    11c0:	50 e4       	ldi	r21, 0x40	; 64
    11c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11c6:	dc 01       	movw	r26, r24
    11c8:	cb 01       	movw	r24, r22
    11ca:	bc 01       	movw	r22, r24
    11cc:	cd 01       	movw	r24, r26
    11ce:	20 e0       	ldi	r18, 0x00	; 0
    11d0:	30 ec       	ldi	r19, 0xC0	; 192
    11d2:	49 e7       	ldi	r20, 0x79	; 121
    11d4:	54 e4       	ldi	r21, 0x44	; 68
    11d6:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    11da:	dc 01       	movw	r26, r24
    11dc:	cb 01       	movw	r24, r22
    11de:	bc 01       	movw	r22, r24
    11e0:	cd 01       	movw	r24, r26
    11e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11e6:	dc 01       	movw	r26, r24
    11e8:	cb 01       	movw	r24, r22
    11ea:	9a 83       	std	Y+2, r25	; 0x02
    11ec:	89 83       	std	Y+1, r24	; 0x01
	if(Pos>SERVOANGLE180){
    11ee:	89 81       	ldd	r24, Y+1	; 0x01
    11f0:	9a 81       	ldd	r25, Y+2	; 0x02
    11f2:	27 e0       	ldi	r18, 0x07	; 7
    11f4:	80 3d       	cpi	r24, 0xD0	; 208
    11f6:	92 07       	cpc	r25, r18
    11f8:	28 f0       	brcs	.+10     	; 0x1204 <Servo_write+0x7a>
		Pos=SERVOANGLE180;
    11fa:	8f ec       	ldi	r24, 0xCF	; 207
    11fc:	97 e0       	ldi	r25, 0x07	; 7
    11fe:	9a 83       	std	Y+2, r25	; 0x02
    1200:	89 83       	std	Y+1, r24	; 0x01
    1202:	0a c0       	rjmp	.+20     	; 0x1218 <Servo_write+0x8e>
	}else if(Pos<SERVOANGLE0){
    1204:	89 81       	ldd	r24, Y+1	; 0x01
    1206:	9a 81       	ldd	r25, Y+2	; 0x02
    1208:	23 e0       	ldi	r18, 0x03	; 3
    120a:	87 3e       	cpi	r24, 0xE7	; 231
    120c:	92 07       	cpc	r25, r18
    120e:	20 f4       	brcc	.+8      	; 0x1218 <Servo_write+0x8e>
		Pos=SERVOANGLE0;
    1210:	87 ee       	ldi	r24, 0xE7	; 231
    1212:	93 e0       	ldi	r25, 0x03	; 3
    1214:	9a 83       	std	Y+2, r25	; 0x02
    1216:	89 83       	std	Y+1, r24	; 0x01
	}
	Timer1_PWM_setDutyCycle(Pos,PWM_Channel);
    1218:	89 81       	ldd	r24, Y+1	; 0x01
    121a:	9a 81       	ldd	r25, Y+2	; 0x02
    121c:	6c 81       	ldd	r22, Y+4	; 0x04
    121e:	0e 94 68 09 	call	0x12d0	; 0x12d0 <Timer1_PWM_setDutyCycle>
}
    1222:	0f 90       	pop	r0
    1224:	0f 90       	pop	r0
    1226:	0f 90       	pop	r0
    1228:	0f 90       	pop	r0
    122a:	cf 91       	pop	r28
    122c:	df 91       	pop	r29
    122e:	08 95       	ret

00001230 <Servo_readPosition>:
uint8 Servo_readPosition(){
    1230:	df 93       	push	r29
    1232:	cf 93       	push	r28
    1234:	0f 92       	push	r0
    1236:	cd b7       	in	r28, 0x3d	; 61
    1238:	de b7       	in	r29, 0x3e	; 62
	uint8 lastPostion=g_Postion;
    123a:	80 91 76 01 	lds	r24, 0x0176
    123e:	89 83       	std	Y+1, r24	; 0x01
	return lastPostion;
    1240:	89 81       	ldd	r24, Y+1	; 0x01
}
    1242:	0f 90       	pop	r0
    1244:	cf 91       	pop	r28
    1246:	df 91       	pop	r29
    1248:	08 95       	ret

0000124a <Timer1_PWM_init>:
 *      Author: Ehab Mohamed
 */
#include <avr/io.h>/* To use the IO Ports Registers */
#include "Timer1_PWM.h"

void Timer1_PWM_init(uint8 channel){
    124a:	df 93       	push	r29
    124c:	cf 93       	push	r28
    124e:	0f 92       	push	r0
    1250:	cd b7       	in	r28, 0x3d	; 61
    1252:	de b7       	in	r29, 0x3e	; 62
    1254:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = 0;		/* Set timer1 initial count to zero */
    1256:	ec e4       	ldi	r30, 0x4C	; 76
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	11 82       	std	Z+1, r1	; 0x01
    125c:	10 82       	st	Z, r1
	ICR1 =(F_CPU/(400));  /* Set TOP count for timer1 in ICR1 register */
    125e:	e6 e4       	ldi	r30, 0x46	; 70
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	80 e2       	ldi	r24, 0x20	; 32
    1264:	9e e4       	ldi	r25, 0x4E	; 78
    1266:	91 83       	std	Z+1, r25	; 0x01
    1268:	80 83       	st	Z, r24
	if(channel==OC1A){
    126a:	89 81       	ldd	r24, Y+1	; 0x01
    126c:	88 23       	and	r24, r24
    126e:	99 f4       	brne	.+38     	; 0x1296 <Timer1_PWM_init+0x4c>
		OCR1A = 0;
    1270:	ea e4       	ldi	r30, 0x4A	; 74
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	11 82       	std	Z+1, r1	; 0x01
    1276:	10 82       	st	Z, r1
		/* Configure timer control register TCCR1A
	     * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
	     * 2. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
         * 3. Fast Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 14)
	     * */
		TCCR1A&=0x10;
    1278:	af e4       	ldi	r26, 0x4F	; 79
    127a:	b0 e0       	ldi	r27, 0x00	; 0
    127c:	ef e4       	ldi	r30, 0x4F	; 79
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	80 81       	ld	r24, Z
    1282:	80 71       	andi	r24, 0x10	; 16
    1284:	8c 93       	st	X, r24
		TCCR1A|=(1<<WGM11) | (1<<COM1A1);
    1286:	af e4       	ldi	r26, 0x4F	; 79
    1288:	b0 e0       	ldi	r27, 0x00	; 0
    128a:	ef e4       	ldi	r30, 0x4F	; 79
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	82 68       	ori	r24, 0x82	; 130
    1292:	8c 93       	st	X, r24
    1294:	15 c0       	rjmp	.+42     	; 0x12c0 <Timer1_PWM_init+0x76>
	}else if(channel==OC1B){
    1296:	89 81       	ldd	r24, Y+1	; 0x01
    1298:	81 30       	cpi	r24, 0x01	; 1
    129a:	91 f4       	brne	.+36     	; 0x12c0 <Timer1_PWM_init+0x76>
		OCR1B = 0;
    129c:	e8 e4       	ldi	r30, 0x48	; 72
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	11 82       	std	Z+1, r1	; 0x01
    12a2:	10 82       	st	Z, r1
		/* Configure timer control register TCCR1A
	     * 1. Clear OC1B on compare match (non inverting mode) COM1B1=1 COM1B0=0
	     * 2. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
         * 3. Fast Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 14)
	     * */
		TCCR1A&=0x80;
    12a4:	af e4       	ldi	r26, 0x4F	; 79
    12a6:	b0 e0       	ldi	r27, 0x00	; 0
    12a8:	ef e4       	ldi	r30, 0x4F	; 79
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	80 81       	ld	r24, Z
    12ae:	80 78       	andi	r24, 0x80	; 128
    12b0:	8c 93       	st	X, r24
		TCCR1A|=(1<<WGM11) | (1<<COM1B1);
    12b2:	af e4       	ldi	r26, 0x4F	; 79
    12b4:	b0 e0       	ldi	r27, 0x00	; 0
    12b6:	ef e4       	ldi	r30, 0x4F	; 79
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	80 81       	ld	r24, Z
    12bc:	82 62       	ori	r24, 0x22	; 34
    12be:	8c 93       	st	X, r24
	}
	/* Configure timer control register TCCR1B
	 * 1. Fast Pwm Mode with the TOP in ICR1 WGM12=1 WGM13=1 (Mode Number 14)
	 * 2. Prescaler = F_CPU/8
     */
	TCCR1B = (1<<WGM12) | (1<<WGM13) | (1<<CS11);
    12c0:	ee e4       	ldi	r30, 0x4E	; 78
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	8a e1       	ldi	r24, 0x1A	; 26
    12c6:	80 83       	st	Z, r24
}
    12c8:	0f 90       	pop	r0
    12ca:	cf 91       	pop	r28
    12cc:	df 91       	pop	r29
    12ce:	08 95       	ret

000012d0 <Timer1_PWM_setDutyCycle>:

void Timer1_PWM_setDutyCycle(uint16 duty_cycle,uint8 channel){
    12d0:	df 93       	push	r29
    12d2:	cf 93       	push	r28
    12d4:	00 d0       	rcall	.+0      	; 0x12d6 <Timer1_PWM_setDutyCycle+0x6>
    12d6:	0f 92       	push	r0
    12d8:	cd b7       	in	r28, 0x3d	; 61
    12da:	de b7       	in	r29, 0x3e	; 62
    12dc:	9a 83       	std	Y+2, r25	; 0x02
    12de:	89 83       	std	Y+1, r24	; 0x01
    12e0:	6b 83       	std	Y+3, r22	; 0x03
	if(channel==OC1A){
    12e2:	8b 81       	ldd	r24, Y+3	; 0x03
    12e4:	88 23       	and	r24, r24
    12e6:	39 f4       	brne	.+14     	; 0x12f6 <Timer1_PWM_setDutyCycle+0x26>
		OCR1A = duty_cycle;
    12e8:	ea e4       	ldi	r30, 0x4A	; 74
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	89 81       	ldd	r24, Y+1	; 0x01
    12ee:	9a 81       	ldd	r25, Y+2	; 0x02
    12f0:	91 83       	std	Z+1, r25	; 0x01
    12f2:	80 83       	st	Z, r24
    12f4:	09 c0       	rjmp	.+18     	; 0x1308 <Timer1_PWM_setDutyCycle+0x38>
	}else if(channel==OC1B){
    12f6:	8b 81       	ldd	r24, Y+3	; 0x03
    12f8:	81 30       	cpi	r24, 0x01	; 1
    12fa:	31 f4       	brne	.+12     	; 0x1308 <Timer1_PWM_setDutyCycle+0x38>
		OCR1B = duty_cycle;
    12fc:	e8 e4       	ldi	r30, 0x48	; 72
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	89 81       	ldd	r24, Y+1	; 0x01
    1302:	9a 81       	ldd	r25, Y+2	; 0x02
    1304:	91 83       	std	Z+1, r25	; 0x01
    1306:	80 83       	st	Z, r24
	}
}
    1308:	0f 90       	pop	r0
    130a:	0f 90       	pop	r0
    130c:	0f 90       	pop	r0
    130e:	cf 91       	pop	r28
    1310:	df 91       	pop	r29
    1312:	08 95       	ret

00001314 <ADC_init>:
 * 	1. Set the required voltage reference
 * 	2. Set the required frequency.
 * 	3. Enable ADC.
 * 	4. Set the required techinqe (polling or interrupt).
 */
void ADC_init(const ADC_ConfigType *config_ptr) {
    1314:	df 93       	push	r29
    1316:	cf 93       	push	r28
    1318:	00 d0       	rcall	.+0      	; 0x131a <ADC_init+0x6>
    131a:	cd b7       	in	r28, 0x3d	; 61
    131c:	de b7       	in	r29, 0x3e	; 62
    131e:	9a 83       	std	Y+2, r25	; 0x02
    1320:	89 83       	std	Y+1, r24	; 0x01
	/*MUX0...MUX4=0  intial channal 0
	 * insert the required Voltage Reference in REFS1,REFS2 bit in ADMUX Register
	 */
	ADMUX = ((config_ptr->ref_volt & 0x03) << 6);
    1322:	a7 e2       	ldi	r26, 0x27	; 39
    1324:	b0 e0       	ldi	r27, 0x00	; 0
    1326:	e9 81       	ldd	r30, Y+1	; 0x01
    1328:	fa 81       	ldd	r31, Y+2	; 0x02
    132a:	80 81       	ld	r24, Z
    132c:	88 2f       	mov	r24, r24
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	00 24       	eor	r0, r0
    1332:	96 95       	lsr	r25
    1334:	87 95       	ror	r24
    1336:	07 94       	ror	r0
    1338:	96 95       	lsr	r25
    133a:	87 95       	ror	r24
    133c:	07 94       	ror	r0
    133e:	98 2f       	mov	r25, r24
    1340:	80 2d       	mov	r24, r0
    1342:	8c 93       	st	X, r24
	/*Enable ADC Driver*/
	ADCSRA = (1 << ADEN);
    1344:	e6 e2       	ldi	r30, 0x26	; 38
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	80 e8       	ldi	r24, 0x80	; 128
    134a:	80 83       	st	Z, r24
	/*Enable or Disable interrupt in ADEN,ADIE bit in ADCSRA Register */
	if (config_ptr->techinqe == INTERRUPT) {
    134c:	e9 81       	ldd	r30, Y+1	; 0x01
    134e:	fa 81       	ldd	r31, Y+2	; 0x02
    1350:	82 81       	ldd	r24, Z+2	; 0x02
    1352:	81 30       	cpi	r24, 0x01	; 1
    1354:	71 f4       	brne	.+28     	; 0x1372 <ADC_init+0x5e>
		SET_BIT(ADCSRA, ADIE);
    1356:	a6 e2       	ldi	r26, 0x26	; 38
    1358:	b0 e0       	ldi	r27, 0x00	; 0
    135a:	e6 e2       	ldi	r30, 0x26	; 38
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	80 81       	ld	r24, Z
    1360:	88 60       	ori	r24, 0x08	; 8
    1362:	8c 93       	st	X, r24
		SET_BIT(ADCSRA, ADSC);
    1364:	a6 e2       	ldi	r26, 0x26	; 38
    1366:	b0 e0       	ldi	r27, 0x00	; 0
    1368:	e6 e2       	ldi	r30, 0x26	; 38
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	80 81       	ld	r24, Z
    136e:	80 64       	ori	r24, 0x40	; 64
    1370:	8c 93       	st	X, r24
	}
	/* insert the required Clock in ADPS0..ADPS2 bit in ADCSRA Register*/
	ADCSRA = (ADCSRA & 0xF8) | ((config_ptr-> prescaler) & 0x07);
    1372:	a6 e2       	ldi	r26, 0x26	; 38
    1374:	b0 e0       	ldi	r27, 0x00	; 0
    1376:	e6 e2       	ldi	r30, 0x26	; 38
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	80 81       	ld	r24, Z
    137c:	98 2f       	mov	r25, r24
    137e:	98 7f       	andi	r25, 0xF8	; 248
    1380:	e9 81       	ldd	r30, Y+1	; 0x01
    1382:	fa 81       	ldd	r31, Y+2	; 0x02
    1384:	81 81       	ldd	r24, Z+1	; 0x01
    1386:	87 70       	andi	r24, 0x07	; 7
    1388:	89 2b       	or	r24, r25
    138a:	8c 93       	st	X, r24
}
    138c:	0f 90       	pop	r0
    138e:	0f 90       	pop	r0
    1390:	cf 91       	pop	r28
    1392:	df 91       	pop	r29
    1394:	08 95       	ret

00001396 <ADC_readChannel>:

/*
 * Function to set the required channel and read the The ADC value
 */
uint16 ADC_readChannel(uint8 channel_num) {
    1396:	df 93       	push	r29
    1398:	cf 93       	push	r28
    139a:	0f 92       	push	r0
    139c:	cd b7       	in	r28, 0x3d	; 61
    139e:	de b7       	in	r29, 0x3e	; 62
    13a0:	89 83       	std	Y+1, r24	; 0x01
	/* insert the required channal MUX0..MUX4 bit in ADMUX Register*/
	ADMUX = (ADMUX & 0xE0) | (channel_num & 0x1F);
    13a2:	a7 e2       	ldi	r26, 0x27	; 39
    13a4:	b0 e0       	ldi	r27, 0x00	; 0
    13a6:	e7 e2       	ldi	r30, 0x27	; 39
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	80 81       	ld	r24, Z
    13ac:	98 2f       	mov	r25, r24
    13ae:	90 7e       	andi	r25, 0xE0	; 224
    13b0:	89 81       	ldd	r24, Y+1	; 0x01
    13b2:	8f 71       	andi	r24, 0x1F	; 31
    13b4:	89 2b       	or	r24, r25
    13b6:	8c 93       	st	X, r24
	/*ADC Start converstion analog signal from channel*/
	SET_BIT(ADCSRA, ADSC);
    13b8:	a6 e2       	ldi	r26, 0x26	; 38
    13ba:	b0 e0       	ldi	r27, 0x00	; 0
    13bc:	e6 e2       	ldi	r30, 0x26	; 38
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	80 81       	ld	r24, Z
    13c2:	80 64       	ori	r24, 0x40	; 64
    13c4:	8c 93       	st	X, r24
	while (BIT_IS_CLEAR(ADCSRA, ADIF))
    13c6:	e6 e2       	ldi	r30, 0x26	; 38
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	80 81       	ld	r24, Z
    13cc:	88 2f       	mov	r24, r24
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	80 71       	andi	r24, 0x10	; 16
    13d2:	90 70       	andi	r25, 0x00	; 0
    13d4:	00 97       	sbiw	r24, 0x00	; 0
    13d6:	b9 f3       	breq	.-18     	; 0x13c6 <ADC_readChannel+0x30>
		;
	SET_BIT(ADCSRA, ADIF);
    13d8:	a6 e2       	ldi	r26, 0x26	; 38
    13da:	b0 e0       	ldi	r27, 0x00	; 0
    13dc:	e6 e2       	ldi	r30, 0x26	; 38
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	80 81       	ld	r24, Z
    13e2:	80 61       	ori	r24, 0x10	; 16
    13e4:	8c 93       	st	X, r24
	return ADC;
    13e6:	e4 e2       	ldi	r30, 0x24	; 36
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	80 81       	ld	r24, Z
    13ec:	91 81       	ldd	r25, Z+1	; 0x01
}
    13ee:	0f 90       	pop	r0
    13f0:	cf 91       	pop	r28
    13f2:	df 91       	pop	r29
    13f4:	08 95       	ret

000013f6 <ADC_conversation>:

/*
 * Function to set the required channel and start conversation for interrupt
 */
void ADC_conversation(uint8 channel_num) {
    13f6:	df 93       	push	r29
    13f8:	cf 93       	push	r28
    13fa:	0f 92       	push	r0
    13fc:	cd b7       	in	r28, 0x3d	; 61
    13fe:	de b7       	in	r29, 0x3e	; 62
    1400:	89 83       	std	Y+1, r24	; 0x01
	/* insert the required channal MUX0..MUX4 bit in ADMUX Register*/
	ADMUX = (ADMUX & 0xE0) | (channel_num & 0x1F);
    1402:	a7 e2       	ldi	r26, 0x27	; 39
    1404:	b0 e0       	ldi	r27, 0x00	; 0
    1406:	e7 e2       	ldi	r30, 0x27	; 39
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	80 81       	ld	r24, Z
    140c:	98 2f       	mov	r25, r24
    140e:	90 7e       	andi	r25, 0xE0	; 224
    1410:	89 81       	ldd	r24, Y+1	; 0x01
    1412:	8f 71       	andi	r24, 0x1F	; 31
    1414:	89 2b       	or	r24, r25
    1416:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, ADSC);
    1418:	a6 e2       	ldi	r26, 0x26	; 38
    141a:	b0 e0       	ldi	r27, 0x00	; 0
    141c:	e6 e2       	ldi	r30, 0x26	; 38
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 81       	ld	r24, Z
    1422:	80 64       	ori	r24, 0x40	; 64
    1424:	8c 93       	st	X, r24
}
    1426:	0f 90       	pop	r0
    1428:	cf 91       	pop	r28
    142a:	df 91       	pop	r29
    142c:	08 95       	ret

0000142e <__vector_16>:

/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
ISR(ADC_vect) {
    142e:	1f 92       	push	r1
    1430:	0f 92       	push	r0
    1432:	0f b6       	in	r0, 0x3f	; 63
    1434:	0f 92       	push	r0
    1436:	11 24       	eor	r1, r1
    1438:	8f 93       	push	r24
    143a:	9f 93       	push	r25
    143c:	ef 93       	push	r30
    143e:	ff 93       	push	r31
    1440:	df 93       	push	r29
    1442:	cf 93       	push	r28
    1444:	cd b7       	in	r28, 0x3d	; 61
    1446:	de b7       	in	r29, 0x3e	; 62
	/*read the value Of ADC every interrupt*/
	g_adc = ADC;
    1448:	e4 e2       	ldi	r30, 0x24	; 36
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	80 81       	ld	r24, Z
    144e:	91 81       	ldd	r25, Z+1	; 0x01
    1450:	90 93 78 01 	sts	0x0178, r25
    1454:	80 93 77 01 	sts	0x0177, r24
}
    1458:	cf 91       	pop	r28
    145a:	df 91       	pop	r29
    145c:	ff 91       	pop	r31
    145e:	ef 91       	pop	r30
    1460:	9f 91       	pop	r25
    1462:	8f 91       	pop	r24
    1464:	0f 90       	pop	r0
    1466:	0f be       	out	0x3f, r0	; 63
    1468:	0f 90       	pop	r0
    146a:	1f 90       	pop	r1
    146c:	18 95       	reti

0000146e <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    146e:	df 93       	push	r29
    1470:	cf 93       	push	r28
    1472:	00 d0       	rcall	.+0      	; 0x1474 <GPIO_setupPinDirection+0x6>
    1474:	00 d0       	rcall	.+0      	; 0x1476 <GPIO_setupPinDirection+0x8>
    1476:	0f 92       	push	r0
    1478:	cd b7       	in	r28, 0x3d	; 61
    147a:	de b7       	in	r29, 0x3e	; 62
    147c:	89 83       	std	Y+1, r24	; 0x01
    147e:	6a 83       	std	Y+2, r22	; 0x02
    1480:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1482:	8a 81       	ldd	r24, Y+2	; 0x02
    1484:	88 30       	cpi	r24, 0x08	; 8
    1486:	08 f0       	brcs	.+2      	; 0x148a <GPIO_setupPinDirection+0x1c>
    1488:	d5 c0       	rjmp	.+426    	; 0x1634 <GPIO_setupPinDirection+0x1c6>
    148a:	89 81       	ldd	r24, Y+1	; 0x01
    148c:	84 30       	cpi	r24, 0x04	; 4
    148e:	08 f0       	brcs	.+2      	; 0x1492 <GPIO_setupPinDirection+0x24>
    1490:	d1 c0       	rjmp	.+418    	; 0x1634 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1492:	89 81       	ldd	r24, Y+1	; 0x01
    1494:	28 2f       	mov	r18, r24
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	3d 83       	std	Y+5, r19	; 0x05
    149a:	2c 83       	std	Y+4, r18	; 0x04
    149c:	8c 81       	ldd	r24, Y+4	; 0x04
    149e:	9d 81       	ldd	r25, Y+5	; 0x05
    14a0:	81 30       	cpi	r24, 0x01	; 1
    14a2:	91 05       	cpc	r25, r1
    14a4:	09 f4       	brne	.+2      	; 0x14a8 <GPIO_setupPinDirection+0x3a>
    14a6:	43 c0       	rjmp	.+134    	; 0x152e <GPIO_setupPinDirection+0xc0>
    14a8:	2c 81       	ldd	r18, Y+4	; 0x04
    14aa:	3d 81       	ldd	r19, Y+5	; 0x05
    14ac:	22 30       	cpi	r18, 0x02	; 2
    14ae:	31 05       	cpc	r19, r1
    14b0:	2c f4       	brge	.+10     	; 0x14bc <GPIO_setupPinDirection+0x4e>
    14b2:	8c 81       	ldd	r24, Y+4	; 0x04
    14b4:	9d 81       	ldd	r25, Y+5	; 0x05
    14b6:	00 97       	sbiw	r24, 0x00	; 0
    14b8:	71 f0       	breq	.+28     	; 0x14d6 <GPIO_setupPinDirection+0x68>
    14ba:	bc c0       	rjmp	.+376    	; 0x1634 <GPIO_setupPinDirection+0x1c6>
    14bc:	2c 81       	ldd	r18, Y+4	; 0x04
    14be:	3d 81       	ldd	r19, Y+5	; 0x05
    14c0:	22 30       	cpi	r18, 0x02	; 2
    14c2:	31 05       	cpc	r19, r1
    14c4:	09 f4       	brne	.+2      	; 0x14c8 <GPIO_setupPinDirection+0x5a>
    14c6:	5f c0       	rjmp	.+190    	; 0x1586 <GPIO_setupPinDirection+0x118>
    14c8:	8c 81       	ldd	r24, Y+4	; 0x04
    14ca:	9d 81       	ldd	r25, Y+5	; 0x05
    14cc:	83 30       	cpi	r24, 0x03	; 3
    14ce:	91 05       	cpc	r25, r1
    14d0:	09 f4       	brne	.+2      	; 0x14d4 <GPIO_setupPinDirection+0x66>
    14d2:	85 c0       	rjmp	.+266    	; 0x15de <GPIO_setupPinDirection+0x170>
    14d4:	af c0       	rjmp	.+350    	; 0x1634 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    14d6:	8b 81       	ldd	r24, Y+3	; 0x03
    14d8:	81 30       	cpi	r24, 0x01	; 1
    14da:	a1 f4       	brne	.+40     	; 0x1504 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    14dc:	aa e3       	ldi	r26, 0x3A	; 58
    14de:	b0 e0       	ldi	r27, 0x00	; 0
    14e0:	ea e3       	ldi	r30, 0x3A	; 58
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	80 81       	ld	r24, Z
    14e6:	48 2f       	mov	r20, r24
    14e8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ea:	28 2f       	mov	r18, r24
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	81 e0       	ldi	r24, 0x01	; 1
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	02 2e       	mov	r0, r18
    14f4:	02 c0       	rjmp	.+4      	; 0x14fa <GPIO_setupPinDirection+0x8c>
    14f6:	88 0f       	add	r24, r24
    14f8:	99 1f       	adc	r25, r25
    14fa:	0a 94       	dec	r0
    14fc:	e2 f7       	brpl	.-8      	; 0x14f6 <GPIO_setupPinDirection+0x88>
    14fe:	84 2b       	or	r24, r20
    1500:	8c 93       	st	X, r24
    1502:	98 c0       	rjmp	.+304    	; 0x1634 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1504:	aa e3       	ldi	r26, 0x3A	; 58
    1506:	b0 e0       	ldi	r27, 0x00	; 0
    1508:	ea e3       	ldi	r30, 0x3A	; 58
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	80 81       	ld	r24, Z
    150e:	48 2f       	mov	r20, r24
    1510:	8a 81       	ldd	r24, Y+2	; 0x02
    1512:	28 2f       	mov	r18, r24
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	02 2e       	mov	r0, r18
    151c:	02 c0       	rjmp	.+4      	; 0x1522 <GPIO_setupPinDirection+0xb4>
    151e:	88 0f       	add	r24, r24
    1520:	99 1f       	adc	r25, r25
    1522:	0a 94       	dec	r0
    1524:	e2 f7       	brpl	.-8      	; 0x151e <GPIO_setupPinDirection+0xb0>
    1526:	80 95       	com	r24
    1528:	84 23       	and	r24, r20
    152a:	8c 93       	st	X, r24
    152c:	83 c0       	rjmp	.+262    	; 0x1634 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    152e:	8b 81       	ldd	r24, Y+3	; 0x03
    1530:	81 30       	cpi	r24, 0x01	; 1
    1532:	a1 f4       	brne	.+40     	; 0x155c <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1534:	a7 e3       	ldi	r26, 0x37	; 55
    1536:	b0 e0       	ldi	r27, 0x00	; 0
    1538:	e7 e3       	ldi	r30, 0x37	; 55
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	80 81       	ld	r24, Z
    153e:	48 2f       	mov	r20, r24
    1540:	8a 81       	ldd	r24, Y+2	; 0x02
    1542:	28 2f       	mov	r18, r24
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	02 2e       	mov	r0, r18
    154c:	02 c0       	rjmp	.+4      	; 0x1552 <GPIO_setupPinDirection+0xe4>
    154e:	88 0f       	add	r24, r24
    1550:	99 1f       	adc	r25, r25
    1552:	0a 94       	dec	r0
    1554:	e2 f7       	brpl	.-8      	; 0x154e <GPIO_setupPinDirection+0xe0>
    1556:	84 2b       	or	r24, r20
    1558:	8c 93       	st	X, r24
    155a:	6c c0       	rjmp	.+216    	; 0x1634 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    155c:	a7 e3       	ldi	r26, 0x37	; 55
    155e:	b0 e0       	ldi	r27, 0x00	; 0
    1560:	e7 e3       	ldi	r30, 0x37	; 55
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	80 81       	ld	r24, Z
    1566:	48 2f       	mov	r20, r24
    1568:	8a 81       	ldd	r24, Y+2	; 0x02
    156a:	28 2f       	mov	r18, r24
    156c:	30 e0       	ldi	r19, 0x00	; 0
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	02 2e       	mov	r0, r18
    1574:	02 c0       	rjmp	.+4      	; 0x157a <GPIO_setupPinDirection+0x10c>
    1576:	88 0f       	add	r24, r24
    1578:	99 1f       	adc	r25, r25
    157a:	0a 94       	dec	r0
    157c:	e2 f7       	brpl	.-8      	; 0x1576 <GPIO_setupPinDirection+0x108>
    157e:	80 95       	com	r24
    1580:	84 23       	and	r24, r20
    1582:	8c 93       	st	X, r24
    1584:	57 c0       	rjmp	.+174    	; 0x1634 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1586:	8b 81       	ldd	r24, Y+3	; 0x03
    1588:	81 30       	cpi	r24, 0x01	; 1
    158a:	a1 f4       	brne	.+40     	; 0x15b4 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    158c:	a4 e3       	ldi	r26, 0x34	; 52
    158e:	b0 e0       	ldi	r27, 0x00	; 0
    1590:	e4 e3       	ldi	r30, 0x34	; 52
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	80 81       	ld	r24, Z
    1596:	48 2f       	mov	r20, r24
    1598:	8a 81       	ldd	r24, Y+2	; 0x02
    159a:	28 2f       	mov	r18, r24
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	02 2e       	mov	r0, r18
    15a4:	02 c0       	rjmp	.+4      	; 0x15aa <GPIO_setupPinDirection+0x13c>
    15a6:	88 0f       	add	r24, r24
    15a8:	99 1f       	adc	r25, r25
    15aa:	0a 94       	dec	r0
    15ac:	e2 f7       	brpl	.-8      	; 0x15a6 <GPIO_setupPinDirection+0x138>
    15ae:	84 2b       	or	r24, r20
    15b0:	8c 93       	st	X, r24
    15b2:	40 c0       	rjmp	.+128    	; 0x1634 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    15b4:	a4 e3       	ldi	r26, 0x34	; 52
    15b6:	b0 e0       	ldi	r27, 0x00	; 0
    15b8:	e4 e3       	ldi	r30, 0x34	; 52
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	80 81       	ld	r24, Z
    15be:	48 2f       	mov	r20, r24
    15c0:	8a 81       	ldd	r24, Y+2	; 0x02
    15c2:	28 2f       	mov	r18, r24
    15c4:	30 e0       	ldi	r19, 0x00	; 0
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	02 2e       	mov	r0, r18
    15cc:	02 c0       	rjmp	.+4      	; 0x15d2 <GPIO_setupPinDirection+0x164>
    15ce:	88 0f       	add	r24, r24
    15d0:	99 1f       	adc	r25, r25
    15d2:	0a 94       	dec	r0
    15d4:	e2 f7       	brpl	.-8      	; 0x15ce <GPIO_setupPinDirection+0x160>
    15d6:	80 95       	com	r24
    15d8:	84 23       	and	r24, r20
    15da:	8c 93       	st	X, r24
    15dc:	2b c0       	rjmp	.+86     	; 0x1634 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    15de:	8b 81       	ldd	r24, Y+3	; 0x03
    15e0:	81 30       	cpi	r24, 0x01	; 1
    15e2:	a1 f4       	brne	.+40     	; 0x160c <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    15e4:	a1 e3       	ldi	r26, 0x31	; 49
    15e6:	b0 e0       	ldi	r27, 0x00	; 0
    15e8:	e1 e3       	ldi	r30, 0x31	; 49
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	80 81       	ld	r24, Z
    15ee:	48 2f       	mov	r20, r24
    15f0:	8a 81       	ldd	r24, Y+2	; 0x02
    15f2:	28 2f       	mov	r18, r24
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	81 e0       	ldi	r24, 0x01	; 1
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	02 2e       	mov	r0, r18
    15fc:	02 c0       	rjmp	.+4      	; 0x1602 <GPIO_setupPinDirection+0x194>
    15fe:	88 0f       	add	r24, r24
    1600:	99 1f       	adc	r25, r25
    1602:	0a 94       	dec	r0
    1604:	e2 f7       	brpl	.-8      	; 0x15fe <GPIO_setupPinDirection+0x190>
    1606:	84 2b       	or	r24, r20
    1608:	8c 93       	st	X, r24
    160a:	14 c0       	rjmp	.+40     	; 0x1634 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    160c:	a1 e3       	ldi	r26, 0x31	; 49
    160e:	b0 e0       	ldi	r27, 0x00	; 0
    1610:	e1 e3       	ldi	r30, 0x31	; 49
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	80 81       	ld	r24, Z
    1616:	48 2f       	mov	r20, r24
    1618:	8a 81       	ldd	r24, Y+2	; 0x02
    161a:	28 2f       	mov	r18, r24
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	81 e0       	ldi	r24, 0x01	; 1
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	02 2e       	mov	r0, r18
    1624:	02 c0       	rjmp	.+4      	; 0x162a <GPIO_setupPinDirection+0x1bc>
    1626:	88 0f       	add	r24, r24
    1628:	99 1f       	adc	r25, r25
    162a:	0a 94       	dec	r0
    162c:	e2 f7       	brpl	.-8      	; 0x1626 <GPIO_setupPinDirection+0x1b8>
    162e:	80 95       	com	r24
    1630:	84 23       	and	r24, r20
    1632:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1634:	0f 90       	pop	r0
    1636:	0f 90       	pop	r0
    1638:	0f 90       	pop	r0
    163a:	0f 90       	pop	r0
    163c:	0f 90       	pop	r0
    163e:	cf 91       	pop	r28
    1640:	df 91       	pop	r29
    1642:	08 95       	ret

00001644 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1644:	df 93       	push	r29
    1646:	cf 93       	push	r28
    1648:	00 d0       	rcall	.+0      	; 0x164a <GPIO_writePin+0x6>
    164a:	00 d0       	rcall	.+0      	; 0x164c <GPIO_writePin+0x8>
    164c:	0f 92       	push	r0
    164e:	cd b7       	in	r28, 0x3d	; 61
    1650:	de b7       	in	r29, 0x3e	; 62
    1652:	89 83       	std	Y+1, r24	; 0x01
    1654:	6a 83       	std	Y+2, r22	; 0x02
    1656:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1658:	8a 81       	ldd	r24, Y+2	; 0x02
    165a:	88 30       	cpi	r24, 0x08	; 8
    165c:	08 f0       	brcs	.+2      	; 0x1660 <GPIO_writePin+0x1c>
    165e:	d5 c0       	rjmp	.+426    	; 0x180a <GPIO_writePin+0x1c6>
    1660:	89 81       	ldd	r24, Y+1	; 0x01
    1662:	84 30       	cpi	r24, 0x04	; 4
    1664:	08 f0       	brcs	.+2      	; 0x1668 <GPIO_writePin+0x24>
    1666:	d1 c0       	rjmp	.+418    	; 0x180a <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1668:	89 81       	ldd	r24, Y+1	; 0x01
    166a:	28 2f       	mov	r18, r24
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	3d 83       	std	Y+5, r19	; 0x05
    1670:	2c 83       	std	Y+4, r18	; 0x04
    1672:	8c 81       	ldd	r24, Y+4	; 0x04
    1674:	9d 81       	ldd	r25, Y+5	; 0x05
    1676:	81 30       	cpi	r24, 0x01	; 1
    1678:	91 05       	cpc	r25, r1
    167a:	09 f4       	brne	.+2      	; 0x167e <GPIO_writePin+0x3a>
    167c:	43 c0       	rjmp	.+134    	; 0x1704 <GPIO_writePin+0xc0>
    167e:	2c 81       	ldd	r18, Y+4	; 0x04
    1680:	3d 81       	ldd	r19, Y+5	; 0x05
    1682:	22 30       	cpi	r18, 0x02	; 2
    1684:	31 05       	cpc	r19, r1
    1686:	2c f4       	brge	.+10     	; 0x1692 <GPIO_writePin+0x4e>
    1688:	8c 81       	ldd	r24, Y+4	; 0x04
    168a:	9d 81       	ldd	r25, Y+5	; 0x05
    168c:	00 97       	sbiw	r24, 0x00	; 0
    168e:	71 f0       	breq	.+28     	; 0x16ac <GPIO_writePin+0x68>
    1690:	bc c0       	rjmp	.+376    	; 0x180a <GPIO_writePin+0x1c6>
    1692:	2c 81       	ldd	r18, Y+4	; 0x04
    1694:	3d 81       	ldd	r19, Y+5	; 0x05
    1696:	22 30       	cpi	r18, 0x02	; 2
    1698:	31 05       	cpc	r19, r1
    169a:	09 f4       	brne	.+2      	; 0x169e <GPIO_writePin+0x5a>
    169c:	5f c0       	rjmp	.+190    	; 0x175c <GPIO_writePin+0x118>
    169e:	8c 81       	ldd	r24, Y+4	; 0x04
    16a0:	9d 81       	ldd	r25, Y+5	; 0x05
    16a2:	83 30       	cpi	r24, 0x03	; 3
    16a4:	91 05       	cpc	r25, r1
    16a6:	09 f4       	brne	.+2      	; 0x16aa <GPIO_writePin+0x66>
    16a8:	85 c0       	rjmp	.+266    	; 0x17b4 <GPIO_writePin+0x170>
    16aa:	af c0       	rjmp	.+350    	; 0x180a <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    16ac:	8b 81       	ldd	r24, Y+3	; 0x03
    16ae:	81 30       	cpi	r24, 0x01	; 1
    16b0:	a1 f4       	brne	.+40     	; 0x16da <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    16b2:	ab e3       	ldi	r26, 0x3B	; 59
    16b4:	b0 e0       	ldi	r27, 0x00	; 0
    16b6:	eb e3       	ldi	r30, 0x3B	; 59
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	80 81       	ld	r24, Z
    16bc:	48 2f       	mov	r20, r24
    16be:	8a 81       	ldd	r24, Y+2	; 0x02
    16c0:	28 2f       	mov	r18, r24
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	81 e0       	ldi	r24, 0x01	; 1
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	02 2e       	mov	r0, r18
    16ca:	02 c0       	rjmp	.+4      	; 0x16d0 <GPIO_writePin+0x8c>
    16cc:	88 0f       	add	r24, r24
    16ce:	99 1f       	adc	r25, r25
    16d0:	0a 94       	dec	r0
    16d2:	e2 f7       	brpl	.-8      	; 0x16cc <GPIO_writePin+0x88>
    16d4:	84 2b       	or	r24, r20
    16d6:	8c 93       	st	X, r24
    16d8:	98 c0       	rjmp	.+304    	; 0x180a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    16da:	ab e3       	ldi	r26, 0x3B	; 59
    16dc:	b0 e0       	ldi	r27, 0x00	; 0
    16de:	eb e3       	ldi	r30, 0x3B	; 59
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	80 81       	ld	r24, Z
    16e4:	48 2f       	mov	r20, r24
    16e6:	8a 81       	ldd	r24, Y+2	; 0x02
    16e8:	28 2f       	mov	r18, r24
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	02 2e       	mov	r0, r18
    16f2:	02 c0       	rjmp	.+4      	; 0x16f8 <GPIO_writePin+0xb4>
    16f4:	88 0f       	add	r24, r24
    16f6:	99 1f       	adc	r25, r25
    16f8:	0a 94       	dec	r0
    16fa:	e2 f7       	brpl	.-8      	; 0x16f4 <GPIO_writePin+0xb0>
    16fc:	80 95       	com	r24
    16fe:	84 23       	and	r24, r20
    1700:	8c 93       	st	X, r24
    1702:	83 c0       	rjmp	.+262    	; 0x180a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1704:	8b 81       	ldd	r24, Y+3	; 0x03
    1706:	81 30       	cpi	r24, 0x01	; 1
    1708:	a1 f4       	brne	.+40     	; 0x1732 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    170a:	a8 e3       	ldi	r26, 0x38	; 56
    170c:	b0 e0       	ldi	r27, 0x00	; 0
    170e:	e8 e3       	ldi	r30, 0x38	; 56
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	80 81       	ld	r24, Z
    1714:	48 2f       	mov	r20, r24
    1716:	8a 81       	ldd	r24, Y+2	; 0x02
    1718:	28 2f       	mov	r18, r24
    171a:	30 e0       	ldi	r19, 0x00	; 0
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	02 2e       	mov	r0, r18
    1722:	02 c0       	rjmp	.+4      	; 0x1728 <GPIO_writePin+0xe4>
    1724:	88 0f       	add	r24, r24
    1726:	99 1f       	adc	r25, r25
    1728:	0a 94       	dec	r0
    172a:	e2 f7       	brpl	.-8      	; 0x1724 <GPIO_writePin+0xe0>
    172c:	84 2b       	or	r24, r20
    172e:	8c 93       	st	X, r24
    1730:	6c c0       	rjmp	.+216    	; 0x180a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1732:	a8 e3       	ldi	r26, 0x38	; 56
    1734:	b0 e0       	ldi	r27, 0x00	; 0
    1736:	e8 e3       	ldi	r30, 0x38	; 56
    1738:	f0 e0       	ldi	r31, 0x00	; 0
    173a:	80 81       	ld	r24, Z
    173c:	48 2f       	mov	r20, r24
    173e:	8a 81       	ldd	r24, Y+2	; 0x02
    1740:	28 2f       	mov	r18, r24
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	81 e0       	ldi	r24, 0x01	; 1
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	02 2e       	mov	r0, r18
    174a:	02 c0       	rjmp	.+4      	; 0x1750 <GPIO_writePin+0x10c>
    174c:	88 0f       	add	r24, r24
    174e:	99 1f       	adc	r25, r25
    1750:	0a 94       	dec	r0
    1752:	e2 f7       	brpl	.-8      	; 0x174c <GPIO_writePin+0x108>
    1754:	80 95       	com	r24
    1756:	84 23       	and	r24, r20
    1758:	8c 93       	st	X, r24
    175a:	57 c0       	rjmp	.+174    	; 0x180a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    175c:	8b 81       	ldd	r24, Y+3	; 0x03
    175e:	81 30       	cpi	r24, 0x01	; 1
    1760:	a1 f4       	brne	.+40     	; 0x178a <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1762:	a5 e3       	ldi	r26, 0x35	; 53
    1764:	b0 e0       	ldi	r27, 0x00	; 0
    1766:	e5 e3       	ldi	r30, 0x35	; 53
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	80 81       	ld	r24, Z
    176c:	48 2f       	mov	r20, r24
    176e:	8a 81       	ldd	r24, Y+2	; 0x02
    1770:	28 2f       	mov	r18, r24
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	81 e0       	ldi	r24, 0x01	; 1
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	02 2e       	mov	r0, r18
    177a:	02 c0       	rjmp	.+4      	; 0x1780 <GPIO_writePin+0x13c>
    177c:	88 0f       	add	r24, r24
    177e:	99 1f       	adc	r25, r25
    1780:	0a 94       	dec	r0
    1782:	e2 f7       	brpl	.-8      	; 0x177c <GPIO_writePin+0x138>
    1784:	84 2b       	or	r24, r20
    1786:	8c 93       	st	X, r24
    1788:	40 c0       	rjmp	.+128    	; 0x180a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    178a:	a5 e3       	ldi	r26, 0x35	; 53
    178c:	b0 e0       	ldi	r27, 0x00	; 0
    178e:	e5 e3       	ldi	r30, 0x35	; 53
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	80 81       	ld	r24, Z
    1794:	48 2f       	mov	r20, r24
    1796:	8a 81       	ldd	r24, Y+2	; 0x02
    1798:	28 2f       	mov	r18, r24
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	02 2e       	mov	r0, r18
    17a2:	02 c0       	rjmp	.+4      	; 0x17a8 <GPIO_writePin+0x164>
    17a4:	88 0f       	add	r24, r24
    17a6:	99 1f       	adc	r25, r25
    17a8:	0a 94       	dec	r0
    17aa:	e2 f7       	brpl	.-8      	; 0x17a4 <GPIO_writePin+0x160>
    17ac:	80 95       	com	r24
    17ae:	84 23       	and	r24, r20
    17b0:	8c 93       	st	X, r24
    17b2:	2b c0       	rjmp	.+86     	; 0x180a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    17b4:	8b 81       	ldd	r24, Y+3	; 0x03
    17b6:	81 30       	cpi	r24, 0x01	; 1
    17b8:	a1 f4       	brne	.+40     	; 0x17e2 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    17ba:	a2 e3       	ldi	r26, 0x32	; 50
    17bc:	b0 e0       	ldi	r27, 0x00	; 0
    17be:	e2 e3       	ldi	r30, 0x32	; 50
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	80 81       	ld	r24, Z
    17c4:	48 2f       	mov	r20, r24
    17c6:	8a 81       	ldd	r24, Y+2	; 0x02
    17c8:	28 2f       	mov	r18, r24
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	81 e0       	ldi	r24, 0x01	; 1
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	02 2e       	mov	r0, r18
    17d2:	02 c0       	rjmp	.+4      	; 0x17d8 <GPIO_writePin+0x194>
    17d4:	88 0f       	add	r24, r24
    17d6:	99 1f       	adc	r25, r25
    17d8:	0a 94       	dec	r0
    17da:	e2 f7       	brpl	.-8      	; 0x17d4 <GPIO_writePin+0x190>
    17dc:	84 2b       	or	r24, r20
    17de:	8c 93       	st	X, r24
    17e0:	14 c0       	rjmp	.+40     	; 0x180a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    17e2:	a2 e3       	ldi	r26, 0x32	; 50
    17e4:	b0 e0       	ldi	r27, 0x00	; 0
    17e6:	e2 e3       	ldi	r30, 0x32	; 50
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	80 81       	ld	r24, Z
    17ec:	48 2f       	mov	r20, r24
    17ee:	8a 81       	ldd	r24, Y+2	; 0x02
    17f0:	28 2f       	mov	r18, r24
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	02 2e       	mov	r0, r18
    17fa:	02 c0       	rjmp	.+4      	; 0x1800 <GPIO_writePin+0x1bc>
    17fc:	88 0f       	add	r24, r24
    17fe:	99 1f       	adc	r25, r25
    1800:	0a 94       	dec	r0
    1802:	e2 f7       	brpl	.-8      	; 0x17fc <GPIO_writePin+0x1b8>
    1804:	80 95       	com	r24
    1806:	84 23       	and	r24, r20
    1808:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    180a:	0f 90       	pop	r0
    180c:	0f 90       	pop	r0
    180e:	0f 90       	pop	r0
    1810:	0f 90       	pop	r0
    1812:	0f 90       	pop	r0
    1814:	cf 91       	pop	r28
    1816:	df 91       	pop	r29
    1818:	08 95       	ret

0000181a <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    181a:	df 93       	push	r29
    181c:	cf 93       	push	r28
    181e:	00 d0       	rcall	.+0      	; 0x1820 <GPIO_readPin+0x6>
    1820:	00 d0       	rcall	.+0      	; 0x1822 <GPIO_readPin+0x8>
    1822:	0f 92       	push	r0
    1824:	cd b7       	in	r28, 0x3d	; 61
    1826:	de b7       	in	r29, 0x3e	; 62
    1828:	8a 83       	std	Y+2, r24	; 0x02
    182a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    182c:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    182e:	8b 81       	ldd	r24, Y+3	; 0x03
    1830:	88 30       	cpi	r24, 0x08	; 8
    1832:	08 f0       	brcs	.+2      	; 0x1836 <GPIO_readPin+0x1c>
    1834:	84 c0       	rjmp	.+264    	; 0x193e <GPIO_readPin+0x124>
    1836:	8a 81       	ldd	r24, Y+2	; 0x02
    1838:	84 30       	cpi	r24, 0x04	; 4
    183a:	08 f0       	brcs	.+2      	; 0x183e <GPIO_readPin+0x24>
    183c:	80 c0       	rjmp	.+256    	; 0x193e <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    183e:	8a 81       	ldd	r24, Y+2	; 0x02
    1840:	28 2f       	mov	r18, r24
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	3d 83       	std	Y+5, r19	; 0x05
    1846:	2c 83       	std	Y+4, r18	; 0x04
    1848:	4c 81       	ldd	r20, Y+4	; 0x04
    184a:	5d 81       	ldd	r21, Y+5	; 0x05
    184c:	41 30       	cpi	r20, 0x01	; 1
    184e:	51 05       	cpc	r21, r1
    1850:	79 f1       	breq	.+94     	; 0x18b0 <GPIO_readPin+0x96>
    1852:	8c 81       	ldd	r24, Y+4	; 0x04
    1854:	9d 81       	ldd	r25, Y+5	; 0x05
    1856:	82 30       	cpi	r24, 0x02	; 2
    1858:	91 05       	cpc	r25, r1
    185a:	34 f4       	brge	.+12     	; 0x1868 <GPIO_readPin+0x4e>
    185c:	2c 81       	ldd	r18, Y+4	; 0x04
    185e:	3d 81       	ldd	r19, Y+5	; 0x05
    1860:	21 15       	cp	r18, r1
    1862:	31 05       	cpc	r19, r1
    1864:	69 f0       	breq	.+26     	; 0x1880 <GPIO_readPin+0x66>
    1866:	6b c0       	rjmp	.+214    	; 0x193e <GPIO_readPin+0x124>
    1868:	4c 81       	ldd	r20, Y+4	; 0x04
    186a:	5d 81       	ldd	r21, Y+5	; 0x05
    186c:	42 30       	cpi	r20, 0x02	; 2
    186e:	51 05       	cpc	r21, r1
    1870:	b9 f1       	breq	.+110    	; 0x18e0 <GPIO_readPin+0xc6>
    1872:	8c 81       	ldd	r24, Y+4	; 0x04
    1874:	9d 81       	ldd	r25, Y+5	; 0x05
    1876:	83 30       	cpi	r24, 0x03	; 3
    1878:	91 05       	cpc	r25, r1
    187a:	09 f4       	brne	.+2      	; 0x187e <GPIO_readPin+0x64>
    187c:	49 c0       	rjmp	.+146    	; 0x1910 <GPIO_readPin+0xf6>
    187e:	5f c0       	rjmp	.+190    	; 0x193e <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1880:	e9 e3       	ldi	r30, 0x39	; 57
    1882:	f0 e0       	ldi	r31, 0x00	; 0
    1884:	80 81       	ld	r24, Z
    1886:	28 2f       	mov	r18, r24
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	8b 81       	ldd	r24, Y+3	; 0x03
    188c:	88 2f       	mov	r24, r24
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	a9 01       	movw	r20, r18
    1892:	02 c0       	rjmp	.+4      	; 0x1898 <GPIO_readPin+0x7e>
    1894:	55 95       	asr	r21
    1896:	47 95       	ror	r20
    1898:	8a 95       	dec	r24
    189a:	e2 f7       	brpl	.-8      	; 0x1894 <GPIO_readPin+0x7a>
    189c:	ca 01       	movw	r24, r20
    189e:	81 70       	andi	r24, 0x01	; 1
    18a0:	90 70       	andi	r25, 0x00	; 0
    18a2:	88 23       	and	r24, r24
    18a4:	19 f0       	breq	.+6      	; 0x18ac <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    18a6:	81 e0       	ldi	r24, 0x01	; 1
    18a8:	89 83       	std	Y+1, r24	; 0x01
    18aa:	49 c0       	rjmp	.+146    	; 0x193e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    18ac:	19 82       	std	Y+1, r1	; 0x01
    18ae:	47 c0       	rjmp	.+142    	; 0x193e <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    18b0:	e6 e3       	ldi	r30, 0x36	; 54
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	80 81       	ld	r24, Z
    18b6:	28 2f       	mov	r18, r24
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	8b 81       	ldd	r24, Y+3	; 0x03
    18bc:	88 2f       	mov	r24, r24
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	a9 01       	movw	r20, r18
    18c2:	02 c0       	rjmp	.+4      	; 0x18c8 <GPIO_readPin+0xae>
    18c4:	55 95       	asr	r21
    18c6:	47 95       	ror	r20
    18c8:	8a 95       	dec	r24
    18ca:	e2 f7       	brpl	.-8      	; 0x18c4 <GPIO_readPin+0xaa>
    18cc:	ca 01       	movw	r24, r20
    18ce:	81 70       	andi	r24, 0x01	; 1
    18d0:	90 70       	andi	r25, 0x00	; 0
    18d2:	88 23       	and	r24, r24
    18d4:	19 f0       	breq	.+6      	; 0x18dc <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    18d6:	81 e0       	ldi	r24, 0x01	; 1
    18d8:	89 83       	std	Y+1, r24	; 0x01
    18da:	31 c0       	rjmp	.+98     	; 0x193e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    18dc:	19 82       	std	Y+1, r1	; 0x01
    18de:	2f c0       	rjmp	.+94     	; 0x193e <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    18e0:	e3 e3       	ldi	r30, 0x33	; 51
    18e2:	f0 e0       	ldi	r31, 0x00	; 0
    18e4:	80 81       	ld	r24, Z
    18e6:	28 2f       	mov	r18, r24
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	8b 81       	ldd	r24, Y+3	; 0x03
    18ec:	88 2f       	mov	r24, r24
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	a9 01       	movw	r20, r18
    18f2:	02 c0       	rjmp	.+4      	; 0x18f8 <GPIO_readPin+0xde>
    18f4:	55 95       	asr	r21
    18f6:	47 95       	ror	r20
    18f8:	8a 95       	dec	r24
    18fa:	e2 f7       	brpl	.-8      	; 0x18f4 <GPIO_readPin+0xda>
    18fc:	ca 01       	movw	r24, r20
    18fe:	81 70       	andi	r24, 0x01	; 1
    1900:	90 70       	andi	r25, 0x00	; 0
    1902:	88 23       	and	r24, r24
    1904:	19 f0       	breq	.+6      	; 0x190c <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1906:	81 e0       	ldi	r24, 0x01	; 1
    1908:	89 83       	std	Y+1, r24	; 0x01
    190a:	19 c0       	rjmp	.+50     	; 0x193e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    190c:	19 82       	std	Y+1, r1	; 0x01
    190e:	17 c0       	rjmp	.+46     	; 0x193e <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1910:	e0 e3       	ldi	r30, 0x30	; 48
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	80 81       	ld	r24, Z
    1916:	28 2f       	mov	r18, r24
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	8b 81       	ldd	r24, Y+3	; 0x03
    191c:	88 2f       	mov	r24, r24
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	a9 01       	movw	r20, r18
    1922:	02 c0       	rjmp	.+4      	; 0x1928 <GPIO_readPin+0x10e>
    1924:	55 95       	asr	r21
    1926:	47 95       	ror	r20
    1928:	8a 95       	dec	r24
    192a:	e2 f7       	brpl	.-8      	; 0x1924 <GPIO_readPin+0x10a>
    192c:	ca 01       	movw	r24, r20
    192e:	81 70       	andi	r24, 0x01	; 1
    1930:	90 70       	andi	r25, 0x00	; 0
    1932:	88 23       	and	r24, r24
    1934:	19 f0       	breq	.+6      	; 0x193c <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1936:	81 e0       	ldi	r24, 0x01	; 1
    1938:	89 83       	std	Y+1, r24	; 0x01
    193a:	01 c0       	rjmp	.+2      	; 0x193e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    193c:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    193e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1940:	0f 90       	pop	r0
    1942:	0f 90       	pop	r0
    1944:	0f 90       	pop	r0
    1946:	0f 90       	pop	r0
    1948:	0f 90       	pop	r0
    194a:	cf 91       	pop	r28
    194c:	df 91       	pop	r29
    194e:	08 95       	ret

00001950 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1950:	df 93       	push	r29
    1952:	cf 93       	push	r28
    1954:	00 d0       	rcall	.+0      	; 0x1956 <GPIO_setupPortDirection+0x6>
    1956:	00 d0       	rcall	.+0      	; 0x1958 <GPIO_setupPortDirection+0x8>
    1958:	cd b7       	in	r28, 0x3d	; 61
    195a:	de b7       	in	r29, 0x3e	; 62
    195c:	89 83       	std	Y+1, r24	; 0x01
    195e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1960:	89 81       	ldd	r24, Y+1	; 0x01
    1962:	84 30       	cpi	r24, 0x04	; 4
    1964:	90 f5       	brcc	.+100    	; 0x19ca <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1966:	89 81       	ldd	r24, Y+1	; 0x01
    1968:	28 2f       	mov	r18, r24
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	3c 83       	std	Y+4, r19	; 0x04
    196e:	2b 83       	std	Y+3, r18	; 0x03
    1970:	8b 81       	ldd	r24, Y+3	; 0x03
    1972:	9c 81       	ldd	r25, Y+4	; 0x04
    1974:	81 30       	cpi	r24, 0x01	; 1
    1976:	91 05       	cpc	r25, r1
    1978:	d1 f0       	breq	.+52     	; 0x19ae <GPIO_setupPortDirection+0x5e>
    197a:	2b 81       	ldd	r18, Y+3	; 0x03
    197c:	3c 81       	ldd	r19, Y+4	; 0x04
    197e:	22 30       	cpi	r18, 0x02	; 2
    1980:	31 05       	cpc	r19, r1
    1982:	2c f4       	brge	.+10     	; 0x198e <GPIO_setupPortDirection+0x3e>
    1984:	8b 81       	ldd	r24, Y+3	; 0x03
    1986:	9c 81       	ldd	r25, Y+4	; 0x04
    1988:	00 97       	sbiw	r24, 0x00	; 0
    198a:	61 f0       	breq	.+24     	; 0x19a4 <GPIO_setupPortDirection+0x54>
    198c:	1e c0       	rjmp	.+60     	; 0x19ca <GPIO_setupPortDirection+0x7a>
    198e:	2b 81       	ldd	r18, Y+3	; 0x03
    1990:	3c 81       	ldd	r19, Y+4	; 0x04
    1992:	22 30       	cpi	r18, 0x02	; 2
    1994:	31 05       	cpc	r19, r1
    1996:	81 f0       	breq	.+32     	; 0x19b8 <GPIO_setupPortDirection+0x68>
    1998:	8b 81       	ldd	r24, Y+3	; 0x03
    199a:	9c 81       	ldd	r25, Y+4	; 0x04
    199c:	83 30       	cpi	r24, 0x03	; 3
    199e:	91 05       	cpc	r25, r1
    19a0:	81 f0       	breq	.+32     	; 0x19c2 <GPIO_setupPortDirection+0x72>
    19a2:	13 c0       	rjmp	.+38     	; 0x19ca <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    19a4:	ea e3       	ldi	r30, 0x3A	; 58
    19a6:	f0 e0       	ldi	r31, 0x00	; 0
    19a8:	8a 81       	ldd	r24, Y+2	; 0x02
    19aa:	80 83       	st	Z, r24
    19ac:	0e c0       	rjmp	.+28     	; 0x19ca <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    19ae:	e7 e3       	ldi	r30, 0x37	; 55
    19b0:	f0 e0       	ldi	r31, 0x00	; 0
    19b2:	8a 81       	ldd	r24, Y+2	; 0x02
    19b4:	80 83       	st	Z, r24
    19b6:	09 c0       	rjmp	.+18     	; 0x19ca <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    19b8:	e4 e3       	ldi	r30, 0x34	; 52
    19ba:	f0 e0       	ldi	r31, 0x00	; 0
    19bc:	8a 81       	ldd	r24, Y+2	; 0x02
    19be:	80 83       	st	Z, r24
    19c0:	04 c0       	rjmp	.+8      	; 0x19ca <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    19c2:	e1 e3       	ldi	r30, 0x31	; 49
    19c4:	f0 e0       	ldi	r31, 0x00	; 0
    19c6:	8a 81       	ldd	r24, Y+2	; 0x02
    19c8:	80 83       	st	Z, r24
			break;
		}
	}
}
    19ca:	0f 90       	pop	r0
    19cc:	0f 90       	pop	r0
    19ce:	0f 90       	pop	r0
    19d0:	0f 90       	pop	r0
    19d2:	cf 91       	pop	r28
    19d4:	df 91       	pop	r29
    19d6:	08 95       	ret

000019d8 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    19d8:	df 93       	push	r29
    19da:	cf 93       	push	r28
    19dc:	00 d0       	rcall	.+0      	; 0x19de <GPIO_writePort+0x6>
    19de:	00 d0       	rcall	.+0      	; 0x19e0 <GPIO_writePort+0x8>
    19e0:	cd b7       	in	r28, 0x3d	; 61
    19e2:	de b7       	in	r29, 0x3e	; 62
    19e4:	89 83       	std	Y+1, r24	; 0x01
    19e6:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    19e8:	89 81       	ldd	r24, Y+1	; 0x01
    19ea:	84 30       	cpi	r24, 0x04	; 4
    19ec:	90 f5       	brcc	.+100    	; 0x1a52 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    19ee:	89 81       	ldd	r24, Y+1	; 0x01
    19f0:	28 2f       	mov	r18, r24
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	3c 83       	std	Y+4, r19	; 0x04
    19f6:	2b 83       	std	Y+3, r18	; 0x03
    19f8:	8b 81       	ldd	r24, Y+3	; 0x03
    19fa:	9c 81       	ldd	r25, Y+4	; 0x04
    19fc:	81 30       	cpi	r24, 0x01	; 1
    19fe:	91 05       	cpc	r25, r1
    1a00:	d1 f0       	breq	.+52     	; 0x1a36 <GPIO_writePort+0x5e>
    1a02:	2b 81       	ldd	r18, Y+3	; 0x03
    1a04:	3c 81       	ldd	r19, Y+4	; 0x04
    1a06:	22 30       	cpi	r18, 0x02	; 2
    1a08:	31 05       	cpc	r19, r1
    1a0a:	2c f4       	brge	.+10     	; 0x1a16 <GPIO_writePort+0x3e>
    1a0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a10:	00 97       	sbiw	r24, 0x00	; 0
    1a12:	61 f0       	breq	.+24     	; 0x1a2c <GPIO_writePort+0x54>
    1a14:	1e c0       	rjmp	.+60     	; 0x1a52 <GPIO_writePort+0x7a>
    1a16:	2b 81       	ldd	r18, Y+3	; 0x03
    1a18:	3c 81       	ldd	r19, Y+4	; 0x04
    1a1a:	22 30       	cpi	r18, 0x02	; 2
    1a1c:	31 05       	cpc	r19, r1
    1a1e:	81 f0       	breq	.+32     	; 0x1a40 <GPIO_writePort+0x68>
    1a20:	8b 81       	ldd	r24, Y+3	; 0x03
    1a22:	9c 81       	ldd	r25, Y+4	; 0x04
    1a24:	83 30       	cpi	r24, 0x03	; 3
    1a26:	91 05       	cpc	r25, r1
    1a28:	81 f0       	breq	.+32     	; 0x1a4a <GPIO_writePort+0x72>
    1a2a:	13 c0       	rjmp	.+38     	; 0x1a52 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1a2c:	eb e3       	ldi	r30, 0x3B	; 59
    1a2e:	f0 e0       	ldi	r31, 0x00	; 0
    1a30:	8a 81       	ldd	r24, Y+2	; 0x02
    1a32:	80 83       	st	Z, r24
    1a34:	0e c0       	rjmp	.+28     	; 0x1a52 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1a36:	e8 e3       	ldi	r30, 0x38	; 56
    1a38:	f0 e0       	ldi	r31, 0x00	; 0
    1a3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3c:	80 83       	st	Z, r24
    1a3e:	09 c0       	rjmp	.+18     	; 0x1a52 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1a40:	e5 e3       	ldi	r30, 0x35	; 53
    1a42:	f0 e0       	ldi	r31, 0x00	; 0
    1a44:	8a 81       	ldd	r24, Y+2	; 0x02
    1a46:	80 83       	st	Z, r24
    1a48:	04 c0       	rjmp	.+8      	; 0x1a52 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1a4a:	e2 e3       	ldi	r30, 0x32	; 50
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a50:	80 83       	st	Z, r24
			break;
		}
	}
}
    1a52:	0f 90       	pop	r0
    1a54:	0f 90       	pop	r0
    1a56:	0f 90       	pop	r0
    1a58:	0f 90       	pop	r0
    1a5a:	cf 91       	pop	r28
    1a5c:	df 91       	pop	r29
    1a5e:	08 95       	ret

00001a60 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1a60:	df 93       	push	r29
    1a62:	cf 93       	push	r28
    1a64:	00 d0       	rcall	.+0      	; 0x1a66 <GPIO_readPort+0x6>
    1a66:	00 d0       	rcall	.+0      	; 0x1a68 <GPIO_readPort+0x8>
    1a68:	cd b7       	in	r28, 0x3d	; 61
    1a6a:	de b7       	in	r29, 0x3e	; 62
    1a6c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1a6e:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1a70:	8a 81       	ldd	r24, Y+2	; 0x02
    1a72:	84 30       	cpi	r24, 0x04	; 4
    1a74:	90 f5       	brcc	.+100    	; 0x1ada <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1a76:	8a 81       	ldd	r24, Y+2	; 0x02
    1a78:	28 2f       	mov	r18, r24
    1a7a:	30 e0       	ldi	r19, 0x00	; 0
    1a7c:	3c 83       	std	Y+4, r19	; 0x04
    1a7e:	2b 83       	std	Y+3, r18	; 0x03
    1a80:	8b 81       	ldd	r24, Y+3	; 0x03
    1a82:	9c 81       	ldd	r25, Y+4	; 0x04
    1a84:	81 30       	cpi	r24, 0x01	; 1
    1a86:	91 05       	cpc	r25, r1
    1a88:	d1 f0       	breq	.+52     	; 0x1abe <GPIO_readPort+0x5e>
    1a8a:	2b 81       	ldd	r18, Y+3	; 0x03
    1a8c:	3c 81       	ldd	r19, Y+4	; 0x04
    1a8e:	22 30       	cpi	r18, 0x02	; 2
    1a90:	31 05       	cpc	r19, r1
    1a92:	2c f4       	brge	.+10     	; 0x1a9e <GPIO_readPort+0x3e>
    1a94:	8b 81       	ldd	r24, Y+3	; 0x03
    1a96:	9c 81       	ldd	r25, Y+4	; 0x04
    1a98:	00 97       	sbiw	r24, 0x00	; 0
    1a9a:	61 f0       	breq	.+24     	; 0x1ab4 <GPIO_readPort+0x54>
    1a9c:	1e c0       	rjmp	.+60     	; 0x1ada <GPIO_readPort+0x7a>
    1a9e:	2b 81       	ldd	r18, Y+3	; 0x03
    1aa0:	3c 81       	ldd	r19, Y+4	; 0x04
    1aa2:	22 30       	cpi	r18, 0x02	; 2
    1aa4:	31 05       	cpc	r19, r1
    1aa6:	81 f0       	breq	.+32     	; 0x1ac8 <GPIO_readPort+0x68>
    1aa8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aaa:	9c 81       	ldd	r25, Y+4	; 0x04
    1aac:	83 30       	cpi	r24, 0x03	; 3
    1aae:	91 05       	cpc	r25, r1
    1ab0:	81 f0       	breq	.+32     	; 0x1ad2 <GPIO_readPort+0x72>
    1ab2:	13 c0       	rjmp	.+38     	; 0x1ada <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1ab4:	e9 e3       	ldi	r30, 0x39	; 57
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	80 81       	ld	r24, Z
    1aba:	89 83       	std	Y+1, r24	; 0x01
    1abc:	0e c0       	rjmp	.+28     	; 0x1ada <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1abe:	e6 e3       	ldi	r30, 0x36	; 54
    1ac0:	f0 e0       	ldi	r31, 0x00	; 0
    1ac2:	80 81       	ld	r24, Z
    1ac4:	89 83       	std	Y+1, r24	; 0x01
    1ac6:	09 c0       	rjmp	.+18     	; 0x1ada <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1ac8:	e3 e3       	ldi	r30, 0x33	; 51
    1aca:	f0 e0       	ldi	r31, 0x00	; 0
    1acc:	80 81       	ld	r24, Z
    1ace:	89 83       	std	Y+1, r24	; 0x01
    1ad0:	04 c0       	rjmp	.+8      	; 0x1ada <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1ad2:	e0 e3       	ldi	r30, 0x30	; 48
    1ad4:	f0 e0       	ldi	r31, 0x00	; 0
    1ad6:	80 81       	ld	r24, Z
    1ad8:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1ada:	89 81       	ldd	r24, Y+1	; 0x01
}
    1adc:	0f 90       	pop	r0
    1ade:	0f 90       	pop	r0
    1ae0:	0f 90       	pop	r0
    1ae2:	0f 90       	pop	r0
    1ae4:	cf 91       	pop	r28
    1ae6:	df 91       	pop	r29
    1ae8:	08 95       	ret

00001aea <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1aea:	df 93       	push	r29
    1aec:	cf 93       	push	r28
    1aee:	cd b7       	in	r28, 0x3d	; 61
    1af0:	de b7       	in	r29, 0x3e	; 62
    1af2:	2e 97       	sbiw	r28, 0x0e	; 14
    1af4:	0f b6       	in	r0, 0x3f	; 63
    1af6:	f8 94       	cli
    1af8:	de bf       	out	0x3e, r29	; 62
    1afa:	0f be       	out	0x3f, r0	; 63
    1afc:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1afe:	81 e0       	ldi	r24, 0x01	; 1
    1b00:	65 e0       	ldi	r22, 0x05	; 5
    1b02:	41 e0       	ldi	r20, 0x01	; 1
    1b04:	0e 94 37 0a 	call	0x146e	; 0x146e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1b08:	83 e0       	ldi	r24, 0x03	; 3
    1b0a:	64 e0       	ldi	r22, 0x04	; 4
    1b0c:	41 e0       	ldi	r20, 0x01	; 1
    1b0e:	0e 94 37 0a 	call	0x146e	; 0x146e <GPIO_setupPinDirection>
    1b12:	80 e0       	ldi	r24, 0x00	; 0
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	a0 ea       	ldi	r26, 0xA0	; 160
    1b18:	b1 e4       	ldi	r27, 0x41	; 65
    1b1a:	8b 87       	std	Y+11, r24	; 0x0b
    1b1c:	9c 87       	std	Y+12, r25	; 0x0c
    1b1e:	ad 87       	std	Y+13, r26	; 0x0d
    1b20:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b22:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b24:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b26:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b28:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b2a:	20 e0       	ldi	r18, 0x00	; 0
    1b2c:	30 e0       	ldi	r19, 0x00	; 0
    1b2e:	4a ef       	ldi	r20, 0xFA	; 250
    1b30:	54 e4       	ldi	r21, 0x44	; 68
    1b32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b36:	dc 01       	movw	r26, r24
    1b38:	cb 01       	movw	r24, r22
    1b3a:	8f 83       	std	Y+7, r24	; 0x07
    1b3c:	98 87       	std	Y+8, r25	; 0x08
    1b3e:	a9 87       	std	Y+9, r26	; 0x09
    1b40:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b42:	6f 81       	ldd	r22, Y+7	; 0x07
    1b44:	78 85       	ldd	r23, Y+8	; 0x08
    1b46:	89 85       	ldd	r24, Y+9	; 0x09
    1b48:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b4a:	20 e0       	ldi	r18, 0x00	; 0
    1b4c:	30 e0       	ldi	r19, 0x00	; 0
    1b4e:	40 e8       	ldi	r20, 0x80	; 128
    1b50:	5f e3       	ldi	r21, 0x3F	; 63
    1b52:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b56:	88 23       	and	r24, r24
    1b58:	2c f4       	brge	.+10     	; 0x1b64 <LCD_init+0x7a>
		__ticks = 1;
    1b5a:	81 e0       	ldi	r24, 0x01	; 1
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	9e 83       	std	Y+6, r25	; 0x06
    1b60:	8d 83       	std	Y+5, r24	; 0x05
    1b62:	3f c0       	rjmp	.+126    	; 0x1be2 <LCD_init+0xf8>
	else if (__tmp > 65535)
    1b64:	6f 81       	ldd	r22, Y+7	; 0x07
    1b66:	78 85       	ldd	r23, Y+8	; 0x08
    1b68:	89 85       	ldd	r24, Y+9	; 0x09
    1b6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b6c:	20 e0       	ldi	r18, 0x00	; 0
    1b6e:	3f ef       	ldi	r19, 0xFF	; 255
    1b70:	4f e7       	ldi	r20, 0x7F	; 127
    1b72:	57 e4       	ldi	r21, 0x47	; 71
    1b74:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b78:	18 16       	cp	r1, r24
    1b7a:	4c f5       	brge	.+82     	; 0x1bce <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b7c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b7e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b80:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b82:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b84:	20 e0       	ldi	r18, 0x00	; 0
    1b86:	30 e0       	ldi	r19, 0x00	; 0
    1b88:	40 e2       	ldi	r20, 0x20	; 32
    1b8a:	51 e4       	ldi	r21, 0x41	; 65
    1b8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b90:	dc 01       	movw	r26, r24
    1b92:	cb 01       	movw	r24, r22
    1b94:	bc 01       	movw	r22, r24
    1b96:	cd 01       	movw	r24, r26
    1b98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b9c:	dc 01       	movw	r26, r24
    1b9e:	cb 01       	movw	r24, r22
    1ba0:	9e 83       	std	Y+6, r25	; 0x06
    1ba2:	8d 83       	std	Y+5, r24	; 0x05
    1ba4:	0f c0       	rjmp	.+30     	; 0x1bc4 <LCD_init+0xda>
    1ba6:	88 ec       	ldi	r24, 0xC8	; 200
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	9c 83       	std	Y+4, r25	; 0x04
    1bac:	8b 83       	std	Y+3, r24	; 0x03
    1bae:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb0:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb2:	01 97       	sbiw	r24, 0x01	; 1
    1bb4:	f1 f7       	brne	.-4      	; 0x1bb2 <LCD_init+0xc8>
    1bb6:	9c 83       	std	Y+4, r25	; 0x04
    1bb8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bba:	8d 81       	ldd	r24, Y+5	; 0x05
    1bbc:	9e 81       	ldd	r25, Y+6	; 0x06
    1bbe:	01 97       	sbiw	r24, 0x01	; 1
    1bc0:	9e 83       	std	Y+6, r25	; 0x06
    1bc2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bc4:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc6:	9e 81       	ldd	r25, Y+6	; 0x06
    1bc8:	00 97       	sbiw	r24, 0x00	; 0
    1bca:	69 f7       	brne	.-38     	; 0x1ba6 <LCD_init+0xbc>
    1bcc:	14 c0       	rjmp	.+40     	; 0x1bf6 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bce:	6f 81       	ldd	r22, Y+7	; 0x07
    1bd0:	78 85       	ldd	r23, Y+8	; 0x08
    1bd2:	89 85       	ldd	r24, Y+9	; 0x09
    1bd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bda:	dc 01       	movw	r26, r24
    1bdc:	cb 01       	movw	r24, r22
    1bde:	9e 83       	std	Y+6, r25	; 0x06
    1be0:	8d 83       	std	Y+5, r24	; 0x05
    1be2:	8d 81       	ldd	r24, Y+5	; 0x05
    1be4:	9e 81       	ldd	r25, Y+6	; 0x06
    1be6:	9a 83       	std	Y+2, r25	; 0x02
    1be8:	89 83       	std	Y+1, r24	; 0x01
    1bea:	89 81       	ldd	r24, Y+1	; 0x01
    1bec:	9a 81       	ldd	r25, Y+2	; 0x02
    1bee:	01 97       	sbiw	r24, 0x01	; 1
    1bf0:	f1 f7       	brne	.-4      	; 0x1bee <LCD_init+0x104>
    1bf2:	9a 83       	std	Y+2, r25	; 0x02
    1bf4:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    1bf6:	81 e0       	ldi	r24, 0x01	; 1
    1bf8:	60 e0       	ldi	r22, 0x00	; 0
    1bfa:	41 e0       	ldi	r20, 0x01	; 1
    1bfc:	0e 94 37 0a 	call	0x146e	; 0x146e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    1c00:	81 e0       	ldi	r24, 0x01	; 1
    1c02:	61 e0       	ldi	r22, 0x01	; 1
    1c04:	41 e0       	ldi	r20, 0x01	; 1
    1c06:	0e 94 37 0a 	call	0x146e	; 0x146e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    1c0a:	81 e0       	ldi	r24, 0x01	; 1
    1c0c:	62 e0       	ldi	r22, 0x02	; 2
    1c0e:	41 e0       	ldi	r20, 0x01	; 1
    1c10:	0e 94 37 0a 	call	0x146e	; 0x146e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    1c14:	81 e0       	ldi	r24, 0x01	; 1
    1c16:	63 e0       	ldi	r22, 0x03	; 3
    1c18:	41 e0       	ldi	r20, 0x01	; 1
    1c1a:	0e 94 37 0a 	call	0x146e	; 0x146e <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    1c1e:	83 e3       	ldi	r24, 0x33	; 51
    1c20:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    1c24:	82 e3       	ldi	r24, 0x32	; 50
    1c26:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    1c2a:	88 e2       	ldi	r24, 0x28	; 40
    1c2c:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1c30:	8c e0       	ldi	r24, 0x0C	; 12
    1c32:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1c36:	81 e0       	ldi	r24, 0x01	; 1
    1c38:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <LCD_sendCommand>
}
    1c3c:	2e 96       	adiw	r28, 0x0e	; 14
    1c3e:	0f b6       	in	r0, 0x3f	; 63
    1c40:	f8 94       	cli
    1c42:	de bf       	out	0x3e, r29	; 62
    1c44:	0f be       	out	0x3f, r0	; 63
    1c46:	cd bf       	out	0x3d, r28	; 61
    1c48:	cf 91       	pop	r28
    1c4a:	df 91       	pop	r29
    1c4c:	08 95       	ret

00001c4e <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1c4e:	0f 93       	push	r16
    1c50:	1f 93       	push	r17
    1c52:	df 93       	push	r29
    1c54:	cf 93       	push	r28
    1c56:	cd b7       	in	r28, 0x3d	; 61
    1c58:	de b7       	in	r29, 0x3e	; 62
    1c5a:	c3 56       	subi	r28, 0x63	; 99
    1c5c:	d0 40       	sbci	r29, 0x00	; 0
    1c5e:	0f b6       	in	r0, 0x3f	; 63
    1c60:	f8 94       	cli
    1c62:	de bf       	out	0x3e, r29	; 62
    1c64:	0f be       	out	0x3f, r0	; 63
    1c66:	cd bf       	out	0x3d, r28	; 61
    1c68:	fe 01       	movw	r30, r28
    1c6a:	ed 59       	subi	r30, 0x9D	; 157
    1c6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6e:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1c70:	81 e0       	ldi	r24, 0x01	; 1
    1c72:	65 e0       	ldi	r22, 0x05	; 5
    1c74:	40 e0       	ldi	r20, 0x00	; 0
    1c76:	0e 94 22 0b 	call	0x1644	; 0x1644 <GPIO_writePin>
    1c7a:	fe 01       	movw	r30, r28
    1c7c:	e1 5a       	subi	r30, 0xA1	; 161
    1c7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c80:	80 e0       	ldi	r24, 0x00	; 0
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	a0 e8       	ldi	r26, 0x80	; 128
    1c86:	bf e3       	ldi	r27, 0x3F	; 63
    1c88:	80 83       	st	Z, r24
    1c8a:	91 83       	std	Z+1, r25	; 0x01
    1c8c:	a2 83       	std	Z+2, r26	; 0x02
    1c8e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c90:	8e 01       	movw	r16, r28
    1c92:	05 5a       	subi	r16, 0xA5	; 165
    1c94:	1f 4f       	sbci	r17, 0xFF	; 255
    1c96:	fe 01       	movw	r30, r28
    1c98:	e1 5a       	subi	r30, 0xA1	; 161
    1c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9c:	60 81       	ld	r22, Z
    1c9e:	71 81       	ldd	r23, Z+1	; 0x01
    1ca0:	82 81       	ldd	r24, Z+2	; 0x02
    1ca2:	93 81       	ldd	r25, Z+3	; 0x03
    1ca4:	20 e0       	ldi	r18, 0x00	; 0
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	4a ef       	ldi	r20, 0xFA	; 250
    1caa:	54 e4       	ldi	r21, 0x44	; 68
    1cac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb0:	dc 01       	movw	r26, r24
    1cb2:	cb 01       	movw	r24, r22
    1cb4:	f8 01       	movw	r30, r16
    1cb6:	80 83       	st	Z, r24
    1cb8:	91 83       	std	Z+1, r25	; 0x01
    1cba:	a2 83       	std	Z+2, r26	; 0x02
    1cbc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1cbe:	fe 01       	movw	r30, r28
    1cc0:	e5 5a       	subi	r30, 0xA5	; 165
    1cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc4:	60 81       	ld	r22, Z
    1cc6:	71 81       	ldd	r23, Z+1	; 0x01
    1cc8:	82 81       	ldd	r24, Z+2	; 0x02
    1cca:	93 81       	ldd	r25, Z+3	; 0x03
    1ccc:	20 e0       	ldi	r18, 0x00	; 0
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	40 e8       	ldi	r20, 0x80	; 128
    1cd2:	5f e3       	ldi	r21, 0x3F	; 63
    1cd4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cd8:	88 23       	and	r24, r24
    1cda:	44 f4       	brge	.+16     	; 0x1cec <LCD_sendCommand+0x9e>
		__ticks = 1;
    1cdc:	fe 01       	movw	r30, r28
    1cde:	e7 5a       	subi	r30, 0xA7	; 167
    1ce0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce2:	81 e0       	ldi	r24, 0x01	; 1
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	91 83       	std	Z+1, r25	; 0x01
    1ce8:	80 83       	st	Z, r24
    1cea:	64 c0       	rjmp	.+200    	; 0x1db4 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    1cec:	fe 01       	movw	r30, r28
    1cee:	e5 5a       	subi	r30, 0xA5	; 165
    1cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf2:	60 81       	ld	r22, Z
    1cf4:	71 81       	ldd	r23, Z+1	; 0x01
    1cf6:	82 81       	ldd	r24, Z+2	; 0x02
    1cf8:	93 81       	ldd	r25, Z+3	; 0x03
    1cfa:	20 e0       	ldi	r18, 0x00	; 0
    1cfc:	3f ef       	ldi	r19, 0xFF	; 255
    1cfe:	4f e7       	ldi	r20, 0x7F	; 127
    1d00:	57 e4       	ldi	r21, 0x47	; 71
    1d02:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d06:	18 16       	cp	r1, r24
    1d08:	0c f0       	brlt	.+2      	; 0x1d0c <LCD_sendCommand+0xbe>
    1d0a:	43 c0       	rjmp	.+134    	; 0x1d92 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d0c:	fe 01       	movw	r30, r28
    1d0e:	e1 5a       	subi	r30, 0xA1	; 161
    1d10:	ff 4f       	sbci	r31, 0xFF	; 255
    1d12:	60 81       	ld	r22, Z
    1d14:	71 81       	ldd	r23, Z+1	; 0x01
    1d16:	82 81       	ldd	r24, Z+2	; 0x02
    1d18:	93 81       	ldd	r25, Z+3	; 0x03
    1d1a:	20 e0       	ldi	r18, 0x00	; 0
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	40 e2       	ldi	r20, 0x20	; 32
    1d20:	51 e4       	ldi	r21, 0x41	; 65
    1d22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d26:	dc 01       	movw	r26, r24
    1d28:	cb 01       	movw	r24, r22
    1d2a:	8e 01       	movw	r16, r28
    1d2c:	07 5a       	subi	r16, 0xA7	; 167
    1d2e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d30:	bc 01       	movw	r22, r24
    1d32:	cd 01       	movw	r24, r26
    1d34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d38:	dc 01       	movw	r26, r24
    1d3a:	cb 01       	movw	r24, r22
    1d3c:	f8 01       	movw	r30, r16
    1d3e:	91 83       	std	Z+1, r25	; 0x01
    1d40:	80 83       	st	Z, r24
    1d42:	1f c0       	rjmp	.+62     	; 0x1d82 <LCD_sendCommand+0x134>
    1d44:	fe 01       	movw	r30, r28
    1d46:	e9 5a       	subi	r30, 0xA9	; 169
    1d48:	ff 4f       	sbci	r31, 0xFF	; 255
    1d4a:	88 ec       	ldi	r24, 0xC8	; 200
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	91 83       	std	Z+1, r25	; 0x01
    1d50:	80 83       	st	Z, r24
    1d52:	fe 01       	movw	r30, r28
    1d54:	e9 5a       	subi	r30, 0xA9	; 169
    1d56:	ff 4f       	sbci	r31, 0xFF	; 255
    1d58:	80 81       	ld	r24, Z
    1d5a:	91 81       	ldd	r25, Z+1	; 0x01
    1d5c:	01 97       	sbiw	r24, 0x01	; 1
    1d5e:	f1 f7       	brne	.-4      	; 0x1d5c <LCD_sendCommand+0x10e>
    1d60:	fe 01       	movw	r30, r28
    1d62:	e9 5a       	subi	r30, 0xA9	; 169
    1d64:	ff 4f       	sbci	r31, 0xFF	; 255
    1d66:	91 83       	std	Z+1, r25	; 0x01
    1d68:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d6a:	de 01       	movw	r26, r28
    1d6c:	a7 5a       	subi	r26, 0xA7	; 167
    1d6e:	bf 4f       	sbci	r27, 0xFF	; 255
    1d70:	fe 01       	movw	r30, r28
    1d72:	e7 5a       	subi	r30, 0xA7	; 167
    1d74:	ff 4f       	sbci	r31, 0xFF	; 255
    1d76:	80 81       	ld	r24, Z
    1d78:	91 81       	ldd	r25, Z+1	; 0x01
    1d7a:	01 97       	sbiw	r24, 0x01	; 1
    1d7c:	11 96       	adiw	r26, 0x01	; 1
    1d7e:	9c 93       	st	X, r25
    1d80:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d82:	fe 01       	movw	r30, r28
    1d84:	e7 5a       	subi	r30, 0xA7	; 167
    1d86:	ff 4f       	sbci	r31, 0xFF	; 255
    1d88:	80 81       	ld	r24, Z
    1d8a:	91 81       	ldd	r25, Z+1	; 0x01
    1d8c:	00 97       	sbiw	r24, 0x00	; 0
    1d8e:	d1 f6       	brne	.-76     	; 0x1d44 <LCD_sendCommand+0xf6>
    1d90:	27 c0       	rjmp	.+78     	; 0x1de0 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d92:	8e 01       	movw	r16, r28
    1d94:	07 5a       	subi	r16, 0xA7	; 167
    1d96:	1f 4f       	sbci	r17, 0xFF	; 255
    1d98:	fe 01       	movw	r30, r28
    1d9a:	e5 5a       	subi	r30, 0xA5	; 165
    1d9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9e:	60 81       	ld	r22, Z
    1da0:	71 81       	ldd	r23, Z+1	; 0x01
    1da2:	82 81       	ldd	r24, Z+2	; 0x02
    1da4:	93 81       	ldd	r25, Z+3	; 0x03
    1da6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1daa:	dc 01       	movw	r26, r24
    1dac:	cb 01       	movw	r24, r22
    1dae:	f8 01       	movw	r30, r16
    1db0:	91 83       	std	Z+1, r25	; 0x01
    1db2:	80 83       	st	Z, r24
    1db4:	de 01       	movw	r26, r28
    1db6:	ab 5a       	subi	r26, 0xAB	; 171
    1db8:	bf 4f       	sbci	r27, 0xFF	; 255
    1dba:	fe 01       	movw	r30, r28
    1dbc:	e7 5a       	subi	r30, 0xA7	; 167
    1dbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc0:	80 81       	ld	r24, Z
    1dc2:	91 81       	ldd	r25, Z+1	; 0x01
    1dc4:	8d 93       	st	X+, r24
    1dc6:	9c 93       	st	X, r25
    1dc8:	fe 01       	movw	r30, r28
    1dca:	eb 5a       	subi	r30, 0xAB	; 171
    1dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dce:	80 81       	ld	r24, Z
    1dd0:	91 81       	ldd	r25, Z+1	; 0x01
    1dd2:	01 97       	sbiw	r24, 0x01	; 1
    1dd4:	f1 f7       	brne	.-4      	; 0x1dd2 <LCD_sendCommand+0x184>
    1dd6:	fe 01       	movw	r30, r28
    1dd8:	eb 5a       	subi	r30, 0xAB	; 171
    1dda:	ff 4f       	sbci	r31, 0xFF	; 255
    1ddc:	91 83       	std	Z+1, r25	; 0x01
    1dde:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1de0:	83 e0       	ldi	r24, 0x03	; 3
    1de2:	64 e0       	ldi	r22, 0x04	; 4
    1de4:	41 e0       	ldi	r20, 0x01	; 1
    1de6:	0e 94 22 0b 	call	0x1644	; 0x1644 <GPIO_writePin>
    1dea:	fe 01       	movw	r30, r28
    1dec:	ef 5a       	subi	r30, 0xAF	; 175
    1dee:	ff 4f       	sbci	r31, 0xFF	; 255
    1df0:	80 e0       	ldi	r24, 0x00	; 0
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	a0 e8       	ldi	r26, 0x80	; 128
    1df6:	bf e3       	ldi	r27, 0x3F	; 63
    1df8:	80 83       	st	Z, r24
    1dfa:	91 83       	std	Z+1, r25	; 0x01
    1dfc:	a2 83       	std	Z+2, r26	; 0x02
    1dfe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e00:	8e 01       	movw	r16, r28
    1e02:	03 5b       	subi	r16, 0xB3	; 179
    1e04:	1f 4f       	sbci	r17, 0xFF	; 255
    1e06:	fe 01       	movw	r30, r28
    1e08:	ef 5a       	subi	r30, 0xAF	; 175
    1e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0c:	60 81       	ld	r22, Z
    1e0e:	71 81       	ldd	r23, Z+1	; 0x01
    1e10:	82 81       	ldd	r24, Z+2	; 0x02
    1e12:	93 81       	ldd	r25, Z+3	; 0x03
    1e14:	20 e0       	ldi	r18, 0x00	; 0
    1e16:	30 e0       	ldi	r19, 0x00	; 0
    1e18:	4a ef       	ldi	r20, 0xFA	; 250
    1e1a:	54 e4       	ldi	r21, 0x44	; 68
    1e1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e20:	dc 01       	movw	r26, r24
    1e22:	cb 01       	movw	r24, r22
    1e24:	f8 01       	movw	r30, r16
    1e26:	80 83       	st	Z, r24
    1e28:	91 83       	std	Z+1, r25	; 0x01
    1e2a:	a2 83       	std	Z+2, r26	; 0x02
    1e2c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e2e:	fe 01       	movw	r30, r28
    1e30:	e3 5b       	subi	r30, 0xB3	; 179
    1e32:	ff 4f       	sbci	r31, 0xFF	; 255
    1e34:	60 81       	ld	r22, Z
    1e36:	71 81       	ldd	r23, Z+1	; 0x01
    1e38:	82 81       	ldd	r24, Z+2	; 0x02
    1e3a:	93 81       	ldd	r25, Z+3	; 0x03
    1e3c:	20 e0       	ldi	r18, 0x00	; 0
    1e3e:	30 e0       	ldi	r19, 0x00	; 0
    1e40:	40 e8       	ldi	r20, 0x80	; 128
    1e42:	5f e3       	ldi	r21, 0x3F	; 63
    1e44:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e48:	88 23       	and	r24, r24
    1e4a:	44 f4       	brge	.+16     	; 0x1e5c <LCD_sendCommand+0x20e>
		__ticks = 1;
    1e4c:	fe 01       	movw	r30, r28
    1e4e:	e5 5b       	subi	r30, 0xB5	; 181
    1e50:	ff 4f       	sbci	r31, 0xFF	; 255
    1e52:	81 e0       	ldi	r24, 0x01	; 1
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	91 83       	std	Z+1, r25	; 0x01
    1e58:	80 83       	st	Z, r24
    1e5a:	64 c0       	rjmp	.+200    	; 0x1f24 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    1e5c:	fe 01       	movw	r30, r28
    1e5e:	e3 5b       	subi	r30, 0xB3	; 179
    1e60:	ff 4f       	sbci	r31, 0xFF	; 255
    1e62:	60 81       	ld	r22, Z
    1e64:	71 81       	ldd	r23, Z+1	; 0x01
    1e66:	82 81       	ldd	r24, Z+2	; 0x02
    1e68:	93 81       	ldd	r25, Z+3	; 0x03
    1e6a:	20 e0       	ldi	r18, 0x00	; 0
    1e6c:	3f ef       	ldi	r19, 0xFF	; 255
    1e6e:	4f e7       	ldi	r20, 0x7F	; 127
    1e70:	57 e4       	ldi	r21, 0x47	; 71
    1e72:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e76:	18 16       	cp	r1, r24
    1e78:	0c f0       	brlt	.+2      	; 0x1e7c <LCD_sendCommand+0x22e>
    1e7a:	43 c0       	rjmp	.+134    	; 0x1f02 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e7c:	fe 01       	movw	r30, r28
    1e7e:	ef 5a       	subi	r30, 0xAF	; 175
    1e80:	ff 4f       	sbci	r31, 0xFF	; 255
    1e82:	60 81       	ld	r22, Z
    1e84:	71 81       	ldd	r23, Z+1	; 0x01
    1e86:	82 81       	ldd	r24, Z+2	; 0x02
    1e88:	93 81       	ldd	r25, Z+3	; 0x03
    1e8a:	20 e0       	ldi	r18, 0x00	; 0
    1e8c:	30 e0       	ldi	r19, 0x00	; 0
    1e8e:	40 e2       	ldi	r20, 0x20	; 32
    1e90:	51 e4       	ldi	r21, 0x41	; 65
    1e92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e96:	dc 01       	movw	r26, r24
    1e98:	cb 01       	movw	r24, r22
    1e9a:	8e 01       	movw	r16, r28
    1e9c:	05 5b       	subi	r16, 0xB5	; 181
    1e9e:	1f 4f       	sbci	r17, 0xFF	; 255
    1ea0:	bc 01       	movw	r22, r24
    1ea2:	cd 01       	movw	r24, r26
    1ea4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ea8:	dc 01       	movw	r26, r24
    1eaa:	cb 01       	movw	r24, r22
    1eac:	f8 01       	movw	r30, r16
    1eae:	91 83       	std	Z+1, r25	; 0x01
    1eb0:	80 83       	st	Z, r24
    1eb2:	1f c0       	rjmp	.+62     	; 0x1ef2 <LCD_sendCommand+0x2a4>
    1eb4:	fe 01       	movw	r30, r28
    1eb6:	e7 5b       	subi	r30, 0xB7	; 183
    1eb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eba:	88 ec       	ldi	r24, 0xC8	; 200
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	91 83       	std	Z+1, r25	; 0x01
    1ec0:	80 83       	st	Z, r24
    1ec2:	fe 01       	movw	r30, r28
    1ec4:	e7 5b       	subi	r30, 0xB7	; 183
    1ec6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec8:	80 81       	ld	r24, Z
    1eca:	91 81       	ldd	r25, Z+1	; 0x01
    1ecc:	01 97       	sbiw	r24, 0x01	; 1
    1ece:	f1 f7       	brne	.-4      	; 0x1ecc <LCD_sendCommand+0x27e>
    1ed0:	fe 01       	movw	r30, r28
    1ed2:	e7 5b       	subi	r30, 0xB7	; 183
    1ed4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed6:	91 83       	std	Z+1, r25	; 0x01
    1ed8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eda:	de 01       	movw	r26, r28
    1edc:	a5 5b       	subi	r26, 0xB5	; 181
    1ede:	bf 4f       	sbci	r27, 0xFF	; 255
    1ee0:	fe 01       	movw	r30, r28
    1ee2:	e5 5b       	subi	r30, 0xB5	; 181
    1ee4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee6:	80 81       	ld	r24, Z
    1ee8:	91 81       	ldd	r25, Z+1	; 0x01
    1eea:	01 97       	sbiw	r24, 0x01	; 1
    1eec:	11 96       	adiw	r26, 0x01	; 1
    1eee:	9c 93       	st	X, r25
    1ef0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ef2:	fe 01       	movw	r30, r28
    1ef4:	e5 5b       	subi	r30, 0xB5	; 181
    1ef6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef8:	80 81       	ld	r24, Z
    1efa:	91 81       	ldd	r25, Z+1	; 0x01
    1efc:	00 97       	sbiw	r24, 0x00	; 0
    1efe:	d1 f6       	brne	.-76     	; 0x1eb4 <LCD_sendCommand+0x266>
    1f00:	27 c0       	rjmp	.+78     	; 0x1f50 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f02:	8e 01       	movw	r16, r28
    1f04:	05 5b       	subi	r16, 0xB5	; 181
    1f06:	1f 4f       	sbci	r17, 0xFF	; 255
    1f08:	fe 01       	movw	r30, r28
    1f0a:	e3 5b       	subi	r30, 0xB3	; 179
    1f0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0e:	60 81       	ld	r22, Z
    1f10:	71 81       	ldd	r23, Z+1	; 0x01
    1f12:	82 81       	ldd	r24, Z+2	; 0x02
    1f14:	93 81       	ldd	r25, Z+3	; 0x03
    1f16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f1a:	dc 01       	movw	r26, r24
    1f1c:	cb 01       	movw	r24, r22
    1f1e:	f8 01       	movw	r30, r16
    1f20:	91 83       	std	Z+1, r25	; 0x01
    1f22:	80 83       	st	Z, r24
    1f24:	de 01       	movw	r26, r28
    1f26:	a9 5b       	subi	r26, 0xB9	; 185
    1f28:	bf 4f       	sbci	r27, 0xFF	; 255
    1f2a:	fe 01       	movw	r30, r28
    1f2c:	e5 5b       	subi	r30, 0xB5	; 181
    1f2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f30:	80 81       	ld	r24, Z
    1f32:	91 81       	ldd	r25, Z+1	; 0x01
    1f34:	8d 93       	st	X+, r24
    1f36:	9c 93       	st	X, r25
    1f38:	fe 01       	movw	r30, r28
    1f3a:	e9 5b       	subi	r30, 0xB9	; 185
    1f3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3e:	80 81       	ld	r24, Z
    1f40:	91 81       	ldd	r25, Z+1	; 0x01
    1f42:	01 97       	sbiw	r24, 0x01	; 1
    1f44:	f1 f7       	brne	.-4      	; 0x1f42 <LCD_sendCommand+0x2f4>
    1f46:	fe 01       	movw	r30, r28
    1f48:	e9 5b       	subi	r30, 0xB9	; 185
    1f4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4c:	91 83       	std	Z+1, r25	; 0x01
    1f4e:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    1f50:	fe 01       	movw	r30, r28
    1f52:	ed 59       	subi	r30, 0x9D	; 157
    1f54:	ff 4f       	sbci	r31, 0xFF	; 255
    1f56:	80 81       	ld	r24, Z
    1f58:	88 2f       	mov	r24, r24
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	80 71       	andi	r24, 0x10	; 16
    1f5e:	90 70       	andi	r25, 0x00	; 0
    1f60:	95 95       	asr	r25
    1f62:	87 95       	ror	r24
    1f64:	95 95       	asr	r25
    1f66:	87 95       	ror	r24
    1f68:	95 95       	asr	r25
    1f6a:	87 95       	ror	r24
    1f6c:	95 95       	asr	r25
    1f6e:	87 95       	ror	r24
    1f70:	98 2f       	mov	r25, r24
    1f72:	81 e0       	ldi	r24, 0x01	; 1
    1f74:	60 e0       	ldi	r22, 0x00	; 0
    1f76:	49 2f       	mov	r20, r25
    1f78:	0e 94 22 0b 	call	0x1644	; 0x1644 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    1f7c:	fe 01       	movw	r30, r28
    1f7e:	ed 59       	subi	r30, 0x9D	; 157
    1f80:	ff 4f       	sbci	r31, 0xFF	; 255
    1f82:	80 81       	ld	r24, Z
    1f84:	88 2f       	mov	r24, r24
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	80 72       	andi	r24, 0x20	; 32
    1f8a:	90 70       	andi	r25, 0x00	; 0
    1f8c:	95 95       	asr	r25
    1f8e:	87 95       	ror	r24
    1f90:	95 95       	asr	r25
    1f92:	87 95       	ror	r24
    1f94:	95 95       	asr	r25
    1f96:	87 95       	ror	r24
    1f98:	95 95       	asr	r25
    1f9a:	87 95       	ror	r24
    1f9c:	95 95       	asr	r25
    1f9e:	87 95       	ror	r24
    1fa0:	98 2f       	mov	r25, r24
    1fa2:	81 e0       	ldi	r24, 0x01	; 1
    1fa4:	61 e0       	ldi	r22, 0x01	; 1
    1fa6:	49 2f       	mov	r20, r25
    1fa8:	0e 94 22 0b 	call	0x1644	; 0x1644 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    1fac:	fe 01       	movw	r30, r28
    1fae:	ed 59       	subi	r30, 0x9D	; 157
    1fb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb2:	80 81       	ld	r24, Z
    1fb4:	88 2f       	mov	r24, r24
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	80 74       	andi	r24, 0x40	; 64
    1fba:	90 70       	andi	r25, 0x00	; 0
    1fbc:	08 2e       	mov	r0, r24
    1fbe:	89 2f       	mov	r24, r25
    1fc0:	00 0c       	add	r0, r0
    1fc2:	88 1f       	adc	r24, r24
    1fc4:	99 0b       	sbc	r25, r25
    1fc6:	00 0c       	add	r0, r0
    1fc8:	88 1f       	adc	r24, r24
    1fca:	99 1f       	adc	r25, r25
    1fcc:	98 2f       	mov	r25, r24
    1fce:	81 e0       	ldi	r24, 0x01	; 1
    1fd0:	62 e0       	ldi	r22, 0x02	; 2
    1fd2:	49 2f       	mov	r20, r25
    1fd4:	0e 94 22 0b 	call	0x1644	; 0x1644 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    1fd8:	fe 01       	movw	r30, r28
    1fda:	ed 59       	subi	r30, 0x9D	; 157
    1fdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fde:	80 81       	ld	r24, Z
    1fe0:	98 2f       	mov	r25, r24
    1fe2:	99 1f       	adc	r25, r25
    1fe4:	99 27       	eor	r25, r25
    1fe6:	99 1f       	adc	r25, r25
    1fe8:	81 e0       	ldi	r24, 0x01	; 1
    1fea:	63 e0       	ldi	r22, 0x03	; 3
    1fec:	49 2f       	mov	r20, r25
    1fee:	0e 94 22 0b 	call	0x1644	; 0x1644 <GPIO_writePin>
    1ff2:	fe 01       	movw	r30, r28
    1ff4:	ed 5b       	subi	r30, 0xBD	; 189
    1ff6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff8:	80 e0       	ldi	r24, 0x00	; 0
    1ffa:	90 e0       	ldi	r25, 0x00	; 0
    1ffc:	a0 e8       	ldi	r26, 0x80	; 128
    1ffe:	bf e3       	ldi	r27, 0x3F	; 63
    2000:	80 83       	st	Z, r24
    2002:	91 83       	std	Z+1, r25	; 0x01
    2004:	a2 83       	std	Z+2, r26	; 0x02
    2006:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2008:	8e 01       	movw	r16, r28
    200a:	01 5c       	subi	r16, 0xC1	; 193
    200c:	1f 4f       	sbci	r17, 0xFF	; 255
    200e:	fe 01       	movw	r30, r28
    2010:	ed 5b       	subi	r30, 0xBD	; 189
    2012:	ff 4f       	sbci	r31, 0xFF	; 255
    2014:	60 81       	ld	r22, Z
    2016:	71 81       	ldd	r23, Z+1	; 0x01
    2018:	82 81       	ldd	r24, Z+2	; 0x02
    201a:	93 81       	ldd	r25, Z+3	; 0x03
    201c:	20 e0       	ldi	r18, 0x00	; 0
    201e:	30 e0       	ldi	r19, 0x00	; 0
    2020:	4a ef       	ldi	r20, 0xFA	; 250
    2022:	54 e4       	ldi	r21, 0x44	; 68
    2024:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2028:	dc 01       	movw	r26, r24
    202a:	cb 01       	movw	r24, r22
    202c:	f8 01       	movw	r30, r16
    202e:	80 83       	st	Z, r24
    2030:	91 83       	std	Z+1, r25	; 0x01
    2032:	a2 83       	std	Z+2, r26	; 0x02
    2034:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2036:	fe 01       	movw	r30, r28
    2038:	ff 96       	adiw	r30, 0x3f	; 63
    203a:	60 81       	ld	r22, Z
    203c:	71 81       	ldd	r23, Z+1	; 0x01
    203e:	82 81       	ldd	r24, Z+2	; 0x02
    2040:	93 81       	ldd	r25, Z+3	; 0x03
    2042:	20 e0       	ldi	r18, 0x00	; 0
    2044:	30 e0       	ldi	r19, 0x00	; 0
    2046:	40 e8       	ldi	r20, 0x80	; 128
    2048:	5f e3       	ldi	r21, 0x3F	; 63
    204a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    204e:	88 23       	and	r24, r24
    2050:	2c f4       	brge	.+10     	; 0x205c <LCD_sendCommand+0x40e>
		__ticks = 1;
    2052:	81 e0       	ldi	r24, 0x01	; 1
    2054:	90 e0       	ldi	r25, 0x00	; 0
    2056:	9e af       	std	Y+62, r25	; 0x3e
    2058:	8d af       	std	Y+61, r24	; 0x3d
    205a:	46 c0       	rjmp	.+140    	; 0x20e8 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    205c:	fe 01       	movw	r30, r28
    205e:	ff 96       	adiw	r30, 0x3f	; 63
    2060:	60 81       	ld	r22, Z
    2062:	71 81       	ldd	r23, Z+1	; 0x01
    2064:	82 81       	ldd	r24, Z+2	; 0x02
    2066:	93 81       	ldd	r25, Z+3	; 0x03
    2068:	20 e0       	ldi	r18, 0x00	; 0
    206a:	3f ef       	ldi	r19, 0xFF	; 255
    206c:	4f e7       	ldi	r20, 0x7F	; 127
    206e:	57 e4       	ldi	r21, 0x47	; 71
    2070:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2074:	18 16       	cp	r1, r24
    2076:	64 f5       	brge	.+88     	; 0x20d0 <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2078:	fe 01       	movw	r30, r28
    207a:	ed 5b       	subi	r30, 0xBD	; 189
    207c:	ff 4f       	sbci	r31, 0xFF	; 255
    207e:	60 81       	ld	r22, Z
    2080:	71 81       	ldd	r23, Z+1	; 0x01
    2082:	82 81       	ldd	r24, Z+2	; 0x02
    2084:	93 81       	ldd	r25, Z+3	; 0x03
    2086:	20 e0       	ldi	r18, 0x00	; 0
    2088:	30 e0       	ldi	r19, 0x00	; 0
    208a:	40 e2       	ldi	r20, 0x20	; 32
    208c:	51 e4       	ldi	r21, 0x41	; 65
    208e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2092:	dc 01       	movw	r26, r24
    2094:	cb 01       	movw	r24, r22
    2096:	bc 01       	movw	r22, r24
    2098:	cd 01       	movw	r24, r26
    209a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    209e:	dc 01       	movw	r26, r24
    20a0:	cb 01       	movw	r24, r22
    20a2:	9e af       	std	Y+62, r25	; 0x3e
    20a4:	8d af       	std	Y+61, r24	; 0x3d
    20a6:	0f c0       	rjmp	.+30     	; 0x20c6 <LCD_sendCommand+0x478>
    20a8:	88 ec       	ldi	r24, 0xC8	; 200
    20aa:	90 e0       	ldi	r25, 0x00	; 0
    20ac:	9c af       	std	Y+60, r25	; 0x3c
    20ae:	8b af       	std	Y+59, r24	; 0x3b
    20b0:	8b ad       	ldd	r24, Y+59	; 0x3b
    20b2:	9c ad       	ldd	r25, Y+60	; 0x3c
    20b4:	01 97       	sbiw	r24, 0x01	; 1
    20b6:	f1 f7       	brne	.-4      	; 0x20b4 <LCD_sendCommand+0x466>
    20b8:	9c af       	std	Y+60, r25	; 0x3c
    20ba:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20bc:	8d ad       	ldd	r24, Y+61	; 0x3d
    20be:	9e ad       	ldd	r25, Y+62	; 0x3e
    20c0:	01 97       	sbiw	r24, 0x01	; 1
    20c2:	9e af       	std	Y+62, r25	; 0x3e
    20c4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20c6:	8d ad       	ldd	r24, Y+61	; 0x3d
    20c8:	9e ad       	ldd	r25, Y+62	; 0x3e
    20ca:	00 97       	sbiw	r24, 0x00	; 0
    20cc:	69 f7       	brne	.-38     	; 0x20a8 <LCD_sendCommand+0x45a>
    20ce:	16 c0       	rjmp	.+44     	; 0x20fc <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20d0:	fe 01       	movw	r30, r28
    20d2:	ff 96       	adiw	r30, 0x3f	; 63
    20d4:	60 81       	ld	r22, Z
    20d6:	71 81       	ldd	r23, Z+1	; 0x01
    20d8:	82 81       	ldd	r24, Z+2	; 0x02
    20da:	93 81       	ldd	r25, Z+3	; 0x03
    20dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20e0:	dc 01       	movw	r26, r24
    20e2:	cb 01       	movw	r24, r22
    20e4:	9e af       	std	Y+62, r25	; 0x3e
    20e6:	8d af       	std	Y+61, r24	; 0x3d
    20e8:	8d ad       	ldd	r24, Y+61	; 0x3d
    20ea:	9e ad       	ldd	r25, Y+62	; 0x3e
    20ec:	9a af       	std	Y+58, r25	; 0x3a
    20ee:	89 af       	std	Y+57, r24	; 0x39
    20f0:	89 ad       	ldd	r24, Y+57	; 0x39
    20f2:	9a ad       	ldd	r25, Y+58	; 0x3a
    20f4:	01 97       	sbiw	r24, 0x01	; 1
    20f6:	f1 f7       	brne	.-4      	; 0x20f4 <LCD_sendCommand+0x4a6>
    20f8:	9a af       	std	Y+58, r25	; 0x3a
    20fa:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    20fc:	83 e0       	ldi	r24, 0x03	; 3
    20fe:	64 e0       	ldi	r22, 0x04	; 4
    2100:	40 e0       	ldi	r20, 0x00	; 0
    2102:	0e 94 22 0b 	call	0x1644	; 0x1644 <GPIO_writePin>
    2106:	80 e0       	ldi	r24, 0x00	; 0
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	a0 e8       	ldi	r26, 0x80	; 128
    210c:	bf e3       	ldi	r27, 0x3F	; 63
    210e:	8d ab       	std	Y+53, r24	; 0x35
    2110:	9e ab       	std	Y+54, r25	; 0x36
    2112:	af ab       	std	Y+55, r26	; 0x37
    2114:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2116:	6d a9       	ldd	r22, Y+53	; 0x35
    2118:	7e a9       	ldd	r23, Y+54	; 0x36
    211a:	8f a9       	ldd	r24, Y+55	; 0x37
    211c:	98 ad       	ldd	r25, Y+56	; 0x38
    211e:	20 e0       	ldi	r18, 0x00	; 0
    2120:	30 e0       	ldi	r19, 0x00	; 0
    2122:	4a ef       	ldi	r20, 0xFA	; 250
    2124:	54 e4       	ldi	r21, 0x44	; 68
    2126:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    212a:	dc 01       	movw	r26, r24
    212c:	cb 01       	movw	r24, r22
    212e:	89 ab       	std	Y+49, r24	; 0x31
    2130:	9a ab       	std	Y+50, r25	; 0x32
    2132:	ab ab       	std	Y+51, r26	; 0x33
    2134:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2136:	69 a9       	ldd	r22, Y+49	; 0x31
    2138:	7a a9       	ldd	r23, Y+50	; 0x32
    213a:	8b a9       	ldd	r24, Y+51	; 0x33
    213c:	9c a9       	ldd	r25, Y+52	; 0x34
    213e:	20 e0       	ldi	r18, 0x00	; 0
    2140:	30 e0       	ldi	r19, 0x00	; 0
    2142:	40 e8       	ldi	r20, 0x80	; 128
    2144:	5f e3       	ldi	r21, 0x3F	; 63
    2146:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    214a:	88 23       	and	r24, r24
    214c:	2c f4       	brge	.+10     	; 0x2158 <LCD_sendCommand+0x50a>
		__ticks = 1;
    214e:	81 e0       	ldi	r24, 0x01	; 1
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	98 ab       	std	Y+48, r25	; 0x30
    2154:	8f a7       	std	Y+47, r24	; 0x2f
    2156:	3f c0       	rjmp	.+126    	; 0x21d6 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    2158:	69 a9       	ldd	r22, Y+49	; 0x31
    215a:	7a a9       	ldd	r23, Y+50	; 0x32
    215c:	8b a9       	ldd	r24, Y+51	; 0x33
    215e:	9c a9       	ldd	r25, Y+52	; 0x34
    2160:	20 e0       	ldi	r18, 0x00	; 0
    2162:	3f ef       	ldi	r19, 0xFF	; 255
    2164:	4f e7       	ldi	r20, 0x7F	; 127
    2166:	57 e4       	ldi	r21, 0x47	; 71
    2168:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    216c:	18 16       	cp	r1, r24
    216e:	4c f5       	brge	.+82     	; 0x21c2 <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2170:	6d a9       	ldd	r22, Y+53	; 0x35
    2172:	7e a9       	ldd	r23, Y+54	; 0x36
    2174:	8f a9       	ldd	r24, Y+55	; 0x37
    2176:	98 ad       	ldd	r25, Y+56	; 0x38
    2178:	20 e0       	ldi	r18, 0x00	; 0
    217a:	30 e0       	ldi	r19, 0x00	; 0
    217c:	40 e2       	ldi	r20, 0x20	; 32
    217e:	51 e4       	ldi	r21, 0x41	; 65
    2180:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2184:	dc 01       	movw	r26, r24
    2186:	cb 01       	movw	r24, r22
    2188:	bc 01       	movw	r22, r24
    218a:	cd 01       	movw	r24, r26
    218c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2190:	dc 01       	movw	r26, r24
    2192:	cb 01       	movw	r24, r22
    2194:	98 ab       	std	Y+48, r25	; 0x30
    2196:	8f a7       	std	Y+47, r24	; 0x2f
    2198:	0f c0       	rjmp	.+30     	; 0x21b8 <LCD_sendCommand+0x56a>
    219a:	88 ec       	ldi	r24, 0xC8	; 200
    219c:	90 e0       	ldi	r25, 0x00	; 0
    219e:	9e a7       	std	Y+46, r25	; 0x2e
    21a0:	8d a7       	std	Y+45, r24	; 0x2d
    21a2:	8d a5       	ldd	r24, Y+45	; 0x2d
    21a4:	9e a5       	ldd	r25, Y+46	; 0x2e
    21a6:	01 97       	sbiw	r24, 0x01	; 1
    21a8:	f1 f7       	brne	.-4      	; 0x21a6 <LCD_sendCommand+0x558>
    21aa:	9e a7       	std	Y+46, r25	; 0x2e
    21ac:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ae:	8f a5       	ldd	r24, Y+47	; 0x2f
    21b0:	98 a9       	ldd	r25, Y+48	; 0x30
    21b2:	01 97       	sbiw	r24, 0x01	; 1
    21b4:	98 ab       	std	Y+48, r25	; 0x30
    21b6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21b8:	8f a5       	ldd	r24, Y+47	; 0x2f
    21ba:	98 a9       	ldd	r25, Y+48	; 0x30
    21bc:	00 97       	sbiw	r24, 0x00	; 0
    21be:	69 f7       	brne	.-38     	; 0x219a <LCD_sendCommand+0x54c>
    21c0:	14 c0       	rjmp	.+40     	; 0x21ea <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21c2:	69 a9       	ldd	r22, Y+49	; 0x31
    21c4:	7a a9       	ldd	r23, Y+50	; 0x32
    21c6:	8b a9       	ldd	r24, Y+51	; 0x33
    21c8:	9c a9       	ldd	r25, Y+52	; 0x34
    21ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ce:	dc 01       	movw	r26, r24
    21d0:	cb 01       	movw	r24, r22
    21d2:	98 ab       	std	Y+48, r25	; 0x30
    21d4:	8f a7       	std	Y+47, r24	; 0x2f
    21d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    21d8:	98 a9       	ldd	r25, Y+48	; 0x30
    21da:	9c a7       	std	Y+44, r25	; 0x2c
    21dc:	8b a7       	std	Y+43, r24	; 0x2b
    21de:	8b a5       	ldd	r24, Y+43	; 0x2b
    21e0:	9c a5       	ldd	r25, Y+44	; 0x2c
    21e2:	01 97       	sbiw	r24, 0x01	; 1
    21e4:	f1 f7       	brne	.-4      	; 0x21e2 <LCD_sendCommand+0x594>
    21e6:	9c a7       	std	Y+44, r25	; 0x2c
    21e8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    21ea:	83 e0       	ldi	r24, 0x03	; 3
    21ec:	64 e0       	ldi	r22, 0x04	; 4
    21ee:	41 e0       	ldi	r20, 0x01	; 1
    21f0:	0e 94 22 0b 	call	0x1644	; 0x1644 <GPIO_writePin>
    21f4:	80 e0       	ldi	r24, 0x00	; 0
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	a0 e8       	ldi	r26, 0x80	; 128
    21fa:	bf e3       	ldi	r27, 0x3F	; 63
    21fc:	8f a3       	std	Y+39, r24	; 0x27
    21fe:	98 a7       	std	Y+40, r25	; 0x28
    2200:	a9 a7       	std	Y+41, r26	; 0x29
    2202:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2204:	6f a1       	ldd	r22, Y+39	; 0x27
    2206:	78 a5       	ldd	r23, Y+40	; 0x28
    2208:	89 a5       	ldd	r24, Y+41	; 0x29
    220a:	9a a5       	ldd	r25, Y+42	; 0x2a
    220c:	20 e0       	ldi	r18, 0x00	; 0
    220e:	30 e0       	ldi	r19, 0x00	; 0
    2210:	4a ef       	ldi	r20, 0xFA	; 250
    2212:	54 e4       	ldi	r21, 0x44	; 68
    2214:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2218:	dc 01       	movw	r26, r24
    221a:	cb 01       	movw	r24, r22
    221c:	8b a3       	std	Y+35, r24	; 0x23
    221e:	9c a3       	std	Y+36, r25	; 0x24
    2220:	ad a3       	std	Y+37, r26	; 0x25
    2222:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2224:	6b a1       	ldd	r22, Y+35	; 0x23
    2226:	7c a1       	ldd	r23, Y+36	; 0x24
    2228:	8d a1       	ldd	r24, Y+37	; 0x25
    222a:	9e a1       	ldd	r25, Y+38	; 0x26
    222c:	20 e0       	ldi	r18, 0x00	; 0
    222e:	30 e0       	ldi	r19, 0x00	; 0
    2230:	40 e8       	ldi	r20, 0x80	; 128
    2232:	5f e3       	ldi	r21, 0x3F	; 63
    2234:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2238:	88 23       	and	r24, r24
    223a:	2c f4       	brge	.+10     	; 0x2246 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    223c:	81 e0       	ldi	r24, 0x01	; 1
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	9a a3       	std	Y+34, r25	; 0x22
    2242:	89 a3       	std	Y+33, r24	; 0x21
    2244:	3f c0       	rjmp	.+126    	; 0x22c4 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    2246:	6b a1       	ldd	r22, Y+35	; 0x23
    2248:	7c a1       	ldd	r23, Y+36	; 0x24
    224a:	8d a1       	ldd	r24, Y+37	; 0x25
    224c:	9e a1       	ldd	r25, Y+38	; 0x26
    224e:	20 e0       	ldi	r18, 0x00	; 0
    2250:	3f ef       	ldi	r19, 0xFF	; 255
    2252:	4f e7       	ldi	r20, 0x7F	; 127
    2254:	57 e4       	ldi	r21, 0x47	; 71
    2256:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    225a:	18 16       	cp	r1, r24
    225c:	4c f5       	brge	.+82     	; 0x22b0 <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    225e:	6f a1       	ldd	r22, Y+39	; 0x27
    2260:	78 a5       	ldd	r23, Y+40	; 0x28
    2262:	89 a5       	ldd	r24, Y+41	; 0x29
    2264:	9a a5       	ldd	r25, Y+42	; 0x2a
    2266:	20 e0       	ldi	r18, 0x00	; 0
    2268:	30 e0       	ldi	r19, 0x00	; 0
    226a:	40 e2       	ldi	r20, 0x20	; 32
    226c:	51 e4       	ldi	r21, 0x41	; 65
    226e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2272:	dc 01       	movw	r26, r24
    2274:	cb 01       	movw	r24, r22
    2276:	bc 01       	movw	r22, r24
    2278:	cd 01       	movw	r24, r26
    227a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    227e:	dc 01       	movw	r26, r24
    2280:	cb 01       	movw	r24, r22
    2282:	9a a3       	std	Y+34, r25	; 0x22
    2284:	89 a3       	std	Y+33, r24	; 0x21
    2286:	0f c0       	rjmp	.+30     	; 0x22a6 <LCD_sendCommand+0x658>
    2288:	88 ec       	ldi	r24, 0xC8	; 200
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	98 a3       	std	Y+32, r25	; 0x20
    228e:	8f 8f       	std	Y+31, r24	; 0x1f
    2290:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2292:	98 a1       	ldd	r25, Y+32	; 0x20
    2294:	01 97       	sbiw	r24, 0x01	; 1
    2296:	f1 f7       	brne	.-4      	; 0x2294 <LCD_sendCommand+0x646>
    2298:	98 a3       	std	Y+32, r25	; 0x20
    229a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    229c:	89 a1       	ldd	r24, Y+33	; 0x21
    229e:	9a a1       	ldd	r25, Y+34	; 0x22
    22a0:	01 97       	sbiw	r24, 0x01	; 1
    22a2:	9a a3       	std	Y+34, r25	; 0x22
    22a4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22a6:	89 a1       	ldd	r24, Y+33	; 0x21
    22a8:	9a a1       	ldd	r25, Y+34	; 0x22
    22aa:	00 97       	sbiw	r24, 0x00	; 0
    22ac:	69 f7       	brne	.-38     	; 0x2288 <LCD_sendCommand+0x63a>
    22ae:	14 c0       	rjmp	.+40     	; 0x22d8 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22b0:	6b a1       	ldd	r22, Y+35	; 0x23
    22b2:	7c a1       	ldd	r23, Y+36	; 0x24
    22b4:	8d a1       	ldd	r24, Y+37	; 0x25
    22b6:	9e a1       	ldd	r25, Y+38	; 0x26
    22b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22bc:	dc 01       	movw	r26, r24
    22be:	cb 01       	movw	r24, r22
    22c0:	9a a3       	std	Y+34, r25	; 0x22
    22c2:	89 a3       	std	Y+33, r24	; 0x21
    22c4:	89 a1       	ldd	r24, Y+33	; 0x21
    22c6:	9a a1       	ldd	r25, Y+34	; 0x22
    22c8:	9e 8f       	std	Y+30, r25	; 0x1e
    22ca:	8d 8f       	std	Y+29, r24	; 0x1d
    22cc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22ce:	9e 8d       	ldd	r25, Y+30	; 0x1e
    22d0:	01 97       	sbiw	r24, 0x01	; 1
    22d2:	f1 f7       	brne	.-4      	; 0x22d0 <LCD_sendCommand+0x682>
    22d4:	9e 8f       	std	Y+30, r25	; 0x1e
    22d6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    22d8:	fe 01       	movw	r30, r28
    22da:	ed 59       	subi	r30, 0x9D	; 157
    22dc:	ff 4f       	sbci	r31, 0xFF	; 255
    22de:	80 81       	ld	r24, Z
    22e0:	98 2f       	mov	r25, r24
    22e2:	91 70       	andi	r25, 0x01	; 1
    22e4:	81 e0       	ldi	r24, 0x01	; 1
    22e6:	60 e0       	ldi	r22, 0x00	; 0
    22e8:	49 2f       	mov	r20, r25
    22ea:	0e 94 22 0b 	call	0x1644	; 0x1644 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    22ee:	fe 01       	movw	r30, r28
    22f0:	ed 59       	subi	r30, 0x9D	; 157
    22f2:	ff 4f       	sbci	r31, 0xFF	; 255
    22f4:	80 81       	ld	r24, Z
    22f6:	88 2f       	mov	r24, r24
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	82 70       	andi	r24, 0x02	; 2
    22fc:	90 70       	andi	r25, 0x00	; 0
    22fe:	95 95       	asr	r25
    2300:	87 95       	ror	r24
    2302:	98 2f       	mov	r25, r24
    2304:	81 e0       	ldi	r24, 0x01	; 1
    2306:	61 e0       	ldi	r22, 0x01	; 1
    2308:	49 2f       	mov	r20, r25
    230a:	0e 94 22 0b 	call	0x1644	; 0x1644 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    230e:	fe 01       	movw	r30, r28
    2310:	ed 59       	subi	r30, 0x9D	; 157
    2312:	ff 4f       	sbci	r31, 0xFF	; 255
    2314:	80 81       	ld	r24, Z
    2316:	88 2f       	mov	r24, r24
    2318:	90 e0       	ldi	r25, 0x00	; 0
    231a:	84 70       	andi	r24, 0x04	; 4
    231c:	90 70       	andi	r25, 0x00	; 0
    231e:	95 95       	asr	r25
    2320:	87 95       	ror	r24
    2322:	95 95       	asr	r25
    2324:	87 95       	ror	r24
    2326:	98 2f       	mov	r25, r24
    2328:	81 e0       	ldi	r24, 0x01	; 1
    232a:	62 e0       	ldi	r22, 0x02	; 2
    232c:	49 2f       	mov	r20, r25
    232e:	0e 94 22 0b 	call	0x1644	; 0x1644 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    2332:	fe 01       	movw	r30, r28
    2334:	ed 59       	subi	r30, 0x9D	; 157
    2336:	ff 4f       	sbci	r31, 0xFF	; 255
    2338:	80 81       	ld	r24, Z
    233a:	88 2f       	mov	r24, r24
    233c:	90 e0       	ldi	r25, 0x00	; 0
    233e:	88 70       	andi	r24, 0x08	; 8
    2340:	90 70       	andi	r25, 0x00	; 0
    2342:	95 95       	asr	r25
    2344:	87 95       	ror	r24
    2346:	95 95       	asr	r25
    2348:	87 95       	ror	r24
    234a:	95 95       	asr	r25
    234c:	87 95       	ror	r24
    234e:	98 2f       	mov	r25, r24
    2350:	81 e0       	ldi	r24, 0x01	; 1
    2352:	63 e0       	ldi	r22, 0x03	; 3
    2354:	49 2f       	mov	r20, r25
    2356:	0e 94 22 0b 	call	0x1644	; 0x1644 <GPIO_writePin>
    235a:	80 e0       	ldi	r24, 0x00	; 0
    235c:	90 e0       	ldi	r25, 0x00	; 0
    235e:	a0 e8       	ldi	r26, 0x80	; 128
    2360:	bf e3       	ldi	r27, 0x3F	; 63
    2362:	89 8f       	std	Y+25, r24	; 0x19
    2364:	9a 8f       	std	Y+26, r25	; 0x1a
    2366:	ab 8f       	std	Y+27, r26	; 0x1b
    2368:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    236a:	69 8d       	ldd	r22, Y+25	; 0x19
    236c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    236e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2370:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2372:	20 e0       	ldi	r18, 0x00	; 0
    2374:	30 e0       	ldi	r19, 0x00	; 0
    2376:	4a ef       	ldi	r20, 0xFA	; 250
    2378:	54 e4       	ldi	r21, 0x44	; 68
    237a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    237e:	dc 01       	movw	r26, r24
    2380:	cb 01       	movw	r24, r22
    2382:	8d 8b       	std	Y+21, r24	; 0x15
    2384:	9e 8b       	std	Y+22, r25	; 0x16
    2386:	af 8b       	std	Y+23, r26	; 0x17
    2388:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    238a:	6d 89       	ldd	r22, Y+21	; 0x15
    238c:	7e 89       	ldd	r23, Y+22	; 0x16
    238e:	8f 89       	ldd	r24, Y+23	; 0x17
    2390:	98 8d       	ldd	r25, Y+24	; 0x18
    2392:	20 e0       	ldi	r18, 0x00	; 0
    2394:	30 e0       	ldi	r19, 0x00	; 0
    2396:	40 e8       	ldi	r20, 0x80	; 128
    2398:	5f e3       	ldi	r21, 0x3F	; 63
    239a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    239e:	88 23       	and	r24, r24
    23a0:	2c f4       	brge	.+10     	; 0x23ac <LCD_sendCommand+0x75e>
		__ticks = 1;
    23a2:	81 e0       	ldi	r24, 0x01	; 1
    23a4:	90 e0       	ldi	r25, 0x00	; 0
    23a6:	9c 8b       	std	Y+20, r25	; 0x14
    23a8:	8b 8b       	std	Y+19, r24	; 0x13
    23aa:	3f c0       	rjmp	.+126    	; 0x242a <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    23ac:	6d 89       	ldd	r22, Y+21	; 0x15
    23ae:	7e 89       	ldd	r23, Y+22	; 0x16
    23b0:	8f 89       	ldd	r24, Y+23	; 0x17
    23b2:	98 8d       	ldd	r25, Y+24	; 0x18
    23b4:	20 e0       	ldi	r18, 0x00	; 0
    23b6:	3f ef       	ldi	r19, 0xFF	; 255
    23b8:	4f e7       	ldi	r20, 0x7F	; 127
    23ba:	57 e4       	ldi	r21, 0x47	; 71
    23bc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23c0:	18 16       	cp	r1, r24
    23c2:	4c f5       	brge	.+82     	; 0x2416 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23c4:	69 8d       	ldd	r22, Y+25	; 0x19
    23c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23cc:	20 e0       	ldi	r18, 0x00	; 0
    23ce:	30 e0       	ldi	r19, 0x00	; 0
    23d0:	40 e2       	ldi	r20, 0x20	; 32
    23d2:	51 e4       	ldi	r21, 0x41	; 65
    23d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23d8:	dc 01       	movw	r26, r24
    23da:	cb 01       	movw	r24, r22
    23dc:	bc 01       	movw	r22, r24
    23de:	cd 01       	movw	r24, r26
    23e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23e4:	dc 01       	movw	r26, r24
    23e6:	cb 01       	movw	r24, r22
    23e8:	9c 8b       	std	Y+20, r25	; 0x14
    23ea:	8b 8b       	std	Y+19, r24	; 0x13
    23ec:	0f c0       	rjmp	.+30     	; 0x240c <LCD_sendCommand+0x7be>
    23ee:	88 ec       	ldi	r24, 0xC8	; 200
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	9a 8b       	std	Y+18, r25	; 0x12
    23f4:	89 8b       	std	Y+17, r24	; 0x11
    23f6:	89 89       	ldd	r24, Y+17	; 0x11
    23f8:	9a 89       	ldd	r25, Y+18	; 0x12
    23fa:	01 97       	sbiw	r24, 0x01	; 1
    23fc:	f1 f7       	brne	.-4      	; 0x23fa <LCD_sendCommand+0x7ac>
    23fe:	9a 8b       	std	Y+18, r25	; 0x12
    2400:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2402:	8b 89       	ldd	r24, Y+19	; 0x13
    2404:	9c 89       	ldd	r25, Y+20	; 0x14
    2406:	01 97       	sbiw	r24, 0x01	; 1
    2408:	9c 8b       	std	Y+20, r25	; 0x14
    240a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    240c:	8b 89       	ldd	r24, Y+19	; 0x13
    240e:	9c 89       	ldd	r25, Y+20	; 0x14
    2410:	00 97       	sbiw	r24, 0x00	; 0
    2412:	69 f7       	brne	.-38     	; 0x23ee <LCD_sendCommand+0x7a0>
    2414:	14 c0       	rjmp	.+40     	; 0x243e <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2416:	6d 89       	ldd	r22, Y+21	; 0x15
    2418:	7e 89       	ldd	r23, Y+22	; 0x16
    241a:	8f 89       	ldd	r24, Y+23	; 0x17
    241c:	98 8d       	ldd	r25, Y+24	; 0x18
    241e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2422:	dc 01       	movw	r26, r24
    2424:	cb 01       	movw	r24, r22
    2426:	9c 8b       	std	Y+20, r25	; 0x14
    2428:	8b 8b       	std	Y+19, r24	; 0x13
    242a:	8b 89       	ldd	r24, Y+19	; 0x13
    242c:	9c 89       	ldd	r25, Y+20	; 0x14
    242e:	98 8b       	std	Y+16, r25	; 0x10
    2430:	8f 87       	std	Y+15, r24	; 0x0f
    2432:	8f 85       	ldd	r24, Y+15	; 0x0f
    2434:	98 89       	ldd	r25, Y+16	; 0x10
    2436:	01 97       	sbiw	r24, 0x01	; 1
    2438:	f1 f7       	brne	.-4      	; 0x2436 <LCD_sendCommand+0x7e8>
    243a:	98 8b       	std	Y+16, r25	; 0x10
    243c:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    243e:	83 e0       	ldi	r24, 0x03	; 3
    2440:	64 e0       	ldi	r22, 0x04	; 4
    2442:	40 e0       	ldi	r20, 0x00	; 0
    2444:	0e 94 22 0b 	call	0x1644	; 0x1644 <GPIO_writePin>
    2448:	80 e0       	ldi	r24, 0x00	; 0
    244a:	90 e0       	ldi	r25, 0x00	; 0
    244c:	a0 e8       	ldi	r26, 0x80	; 128
    244e:	bf e3       	ldi	r27, 0x3F	; 63
    2450:	8b 87       	std	Y+11, r24	; 0x0b
    2452:	9c 87       	std	Y+12, r25	; 0x0c
    2454:	ad 87       	std	Y+13, r26	; 0x0d
    2456:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2458:	6b 85       	ldd	r22, Y+11	; 0x0b
    245a:	7c 85       	ldd	r23, Y+12	; 0x0c
    245c:	8d 85       	ldd	r24, Y+13	; 0x0d
    245e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2460:	20 e0       	ldi	r18, 0x00	; 0
    2462:	30 e0       	ldi	r19, 0x00	; 0
    2464:	4a ef       	ldi	r20, 0xFA	; 250
    2466:	54 e4       	ldi	r21, 0x44	; 68
    2468:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    246c:	dc 01       	movw	r26, r24
    246e:	cb 01       	movw	r24, r22
    2470:	8f 83       	std	Y+7, r24	; 0x07
    2472:	98 87       	std	Y+8, r25	; 0x08
    2474:	a9 87       	std	Y+9, r26	; 0x09
    2476:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2478:	6f 81       	ldd	r22, Y+7	; 0x07
    247a:	78 85       	ldd	r23, Y+8	; 0x08
    247c:	89 85       	ldd	r24, Y+9	; 0x09
    247e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2480:	20 e0       	ldi	r18, 0x00	; 0
    2482:	30 e0       	ldi	r19, 0x00	; 0
    2484:	40 e8       	ldi	r20, 0x80	; 128
    2486:	5f e3       	ldi	r21, 0x3F	; 63
    2488:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    248c:	88 23       	and	r24, r24
    248e:	2c f4       	brge	.+10     	; 0x249a <LCD_sendCommand+0x84c>
		__ticks = 1;
    2490:	81 e0       	ldi	r24, 0x01	; 1
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	9e 83       	std	Y+6, r25	; 0x06
    2496:	8d 83       	std	Y+5, r24	; 0x05
    2498:	3f c0       	rjmp	.+126    	; 0x2518 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    249a:	6f 81       	ldd	r22, Y+7	; 0x07
    249c:	78 85       	ldd	r23, Y+8	; 0x08
    249e:	89 85       	ldd	r24, Y+9	; 0x09
    24a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    24a2:	20 e0       	ldi	r18, 0x00	; 0
    24a4:	3f ef       	ldi	r19, 0xFF	; 255
    24a6:	4f e7       	ldi	r20, 0x7F	; 127
    24a8:	57 e4       	ldi	r21, 0x47	; 71
    24aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24ae:	18 16       	cp	r1, r24
    24b0:	4c f5       	brge	.+82     	; 0x2504 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    24b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    24b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    24b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    24ba:	20 e0       	ldi	r18, 0x00	; 0
    24bc:	30 e0       	ldi	r19, 0x00	; 0
    24be:	40 e2       	ldi	r20, 0x20	; 32
    24c0:	51 e4       	ldi	r21, 0x41	; 65
    24c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24c6:	dc 01       	movw	r26, r24
    24c8:	cb 01       	movw	r24, r22
    24ca:	bc 01       	movw	r22, r24
    24cc:	cd 01       	movw	r24, r26
    24ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24d2:	dc 01       	movw	r26, r24
    24d4:	cb 01       	movw	r24, r22
    24d6:	9e 83       	std	Y+6, r25	; 0x06
    24d8:	8d 83       	std	Y+5, r24	; 0x05
    24da:	0f c0       	rjmp	.+30     	; 0x24fa <LCD_sendCommand+0x8ac>
    24dc:	88 ec       	ldi	r24, 0xC8	; 200
    24de:	90 e0       	ldi	r25, 0x00	; 0
    24e0:	9c 83       	std	Y+4, r25	; 0x04
    24e2:	8b 83       	std	Y+3, r24	; 0x03
    24e4:	8b 81       	ldd	r24, Y+3	; 0x03
    24e6:	9c 81       	ldd	r25, Y+4	; 0x04
    24e8:	01 97       	sbiw	r24, 0x01	; 1
    24ea:	f1 f7       	brne	.-4      	; 0x24e8 <LCD_sendCommand+0x89a>
    24ec:	9c 83       	std	Y+4, r25	; 0x04
    24ee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24f0:	8d 81       	ldd	r24, Y+5	; 0x05
    24f2:	9e 81       	ldd	r25, Y+6	; 0x06
    24f4:	01 97       	sbiw	r24, 0x01	; 1
    24f6:	9e 83       	std	Y+6, r25	; 0x06
    24f8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24fa:	8d 81       	ldd	r24, Y+5	; 0x05
    24fc:	9e 81       	ldd	r25, Y+6	; 0x06
    24fe:	00 97       	sbiw	r24, 0x00	; 0
    2500:	69 f7       	brne	.-38     	; 0x24dc <LCD_sendCommand+0x88e>
    2502:	14 c0       	rjmp	.+40     	; 0x252c <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2504:	6f 81       	ldd	r22, Y+7	; 0x07
    2506:	78 85       	ldd	r23, Y+8	; 0x08
    2508:	89 85       	ldd	r24, Y+9	; 0x09
    250a:	9a 85       	ldd	r25, Y+10	; 0x0a
    250c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2510:	dc 01       	movw	r26, r24
    2512:	cb 01       	movw	r24, r22
    2514:	9e 83       	std	Y+6, r25	; 0x06
    2516:	8d 83       	std	Y+5, r24	; 0x05
    2518:	8d 81       	ldd	r24, Y+5	; 0x05
    251a:	9e 81       	ldd	r25, Y+6	; 0x06
    251c:	9a 83       	std	Y+2, r25	; 0x02
    251e:	89 83       	std	Y+1, r24	; 0x01
    2520:	89 81       	ldd	r24, Y+1	; 0x01
    2522:	9a 81       	ldd	r25, Y+2	; 0x02
    2524:	01 97       	sbiw	r24, 0x01	; 1
    2526:	f1 f7       	brne	.-4      	; 0x2524 <LCD_sendCommand+0x8d6>
    2528:	9a 83       	std	Y+2, r25	; 0x02
    252a:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    252c:	cd 59       	subi	r28, 0x9D	; 157
    252e:	df 4f       	sbci	r29, 0xFF	; 255
    2530:	0f b6       	in	r0, 0x3f	; 63
    2532:	f8 94       	cli
    2534:	de bf       	out	0x3e, r29	; 62
    2536:	0f be       	out	0x3f, r0	; 63
    2538:	cd bf       	out	0x3d, r28	; 61
    253a:	cf 91       	pop	r28
    253c:	df 91       	pop	r29
    253e:	1f 91       	pop	r17
    2540:	0f 91       	pop	r16
    2542:	08 95       	ret

00002544 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2544:	0f 93       	push	r16
    2546:	1f 93       	push	r17
    2548:	df 93       	push	r29
    254a:	cf 93       	push	r28
    254c:	cd b7       	in	r28, 0x3d	; 61
    254e:	de b7       	in	r29, 0x3e	; 62
    2550:	c3 56       	subi	r28, 0x63	; 99
    2552:	d0 40       	sbci	r29, 0x00	; 0
    2554:	0f b6       	in	r0, 0x3f	; 63
    2556:	f8 94       	cli
    2558:	de bf       	out	0x3e, r29	; 62
    255a:	0f be       	out	0x3f, r0	; 63
    255c:	cd bf       	out	0x3d, r28	; 61
    255e:	fe 01       	movw	r30, r28
    2560:	ed 59       	subi	r30, 0x9D	; 157
    2562:	ff 4f       	sbci	r31, 0xFF	; 255
    2564:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2566:	81 e0       	ldi	r24, 0x01	; 1
    2568:	65 e0       	ldi	r22, 0x05	; 5
    256a:	41 e0       	ldi	r20, 0x01	; 1
    256c:	0e 94 22 0b 	call	0x1644	; 0x1644 <GPIO_writePin>
    2570:	fe 01       	movw	r30, r28
    2572:	e1 5a       	subi	r30, 0xA1	; 161
    2574:	ff 4f       	sbci	r31, 0xFF	; 255
    2576:	80 e0       	ldi	r24, 0x00	; 0
    2578:	90 e0       	ldi	r25, 0x00	; 0
    257a:	a0 e8       	ldi	r26, 0x80	; 128
    257c:	bf e3       	ldi	r27, 0x3F	; 63
    257e:	80 83       	st	Z, r24
    2580:	91 83       	std	Z+1, r25	; 0x01
    2582:	a2 83       	std	Z+2, r26	; 0x02
    2584:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2586:	8e 01       	movw	r16, r28
    2588:	05 5a       	subi	r16, 0xA5	; 165
    258a:	1f 4f       	sbci	r17, 0xFF	; 255
    258c:	fe 01       	movw	r30, r28
    258e:	e1 5a       	subi	r30, 0xA1	; 161
    2590:	ff 4f       	sbci	r31, 0xFF	; 255
    2592:	60 81       	ld	r22, Z
    2594:	71 81       	ldd	r23, Z+1	; 0x01
    2596:	82 81       	ldd	r24, Z+2	; 0x02
    2598:	93 81       	ldd	r25, Z+3	; 0x03
    259a:	20 e0       	ldi	r18, 0x00	; 0
    259c:	30 e0       	ldi	r19, 0x00	; 0
    259e:	4a ef       	ldi	r20, 0xFA	; 250
    25a0:	54 e4       	ldi	r21, 0x44	; 68
    25a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25a6:	dc 01       	movw	r26, r24
    25a8:	cb 01       	movw	r24, r22
    25aa:	f8 01       	movw	r30, r16
    25ac:	80 83       	st	Z, r24
    25ae:	91 83       	std	Z+1, r25	; 0x01
    25b0:	a2 83       	std	Z+2, r26	; 0x02
    25b2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25b4:	fe 01       	movw	r30, r28
    25b6:	e5 5a       	subi	r30, 0xA5	; 165
    25b8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ba:	60 81       	ld	r22, Z
    25bc:	71 81       	ldd	r23, Z+1	; 0x01
    25be:	82 81       	ldd	r24, Z+2	; 0x02
    25c0:	93 81       	ldd	r25, Z+3	; 0x03
    25c2:	20 e0       	ldi	r18, 0x00	; 0
    25c4:	30 e0       	ldi	r19, 0x00	; 0
    25c6:	40 e8       	ldi	r20, 0x80	; 128
    25c8:	5f e3       	ldi	r21, 0x3F	; 63
    25ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25ce:	88 23       	and	r24, r24
    25d0:	44 f4       	brge	.+16     	; 0x25e2 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    25d2:	fe 01       	movw	r30, r28
    25d4:	e7 5a       	subi	r30, 0xA7	; 167
    25d6:	ff 4f       	sbci	r31, 0xFF	; 255
    25d8:	81 e0       	ldi	r24, 0x01	; 1
    25da:	90 e0       	ldi	r25, 0x00	; 0
    25dc:	91 83       	std	Z+1, r25	; 0x01
    25de:	80 83       	st	Z, r24
    25e0:	64 c0       	rjmp	.+200    	; 0x26aa <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    25e2:	fe 01       	movw	r30, r28
    25e4:	e5 5a       	subi	r30, 0xA5	; 165
    25e6:	ff 4f       	sbci	r31, 0xFF	; 255
    25e8:	60 81       	ld	r22, Z
    25ea:	71 81       	ldd	r23, Z+1	; 0x01
    25ec:	82 81       	ldd	r24, Z+2	; 0x02
    25ee:	93 81       	ldd	r25, Z+3	; 0x03
    25f0:	20 e0       	ldi	r18, 0x00	; 0
    25f2:	3f ef       	ldi	r19, 0xFF	; 255
    25f4:	4f e7       	ldi	r20, 0x7F	; 127
    25f6:	57 e4       	ldi	r21, 0x47	; 71
    25f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25fc:	18 16       	cp	r1, r24
    25fe:	0c f0       	brlt	.+2      	; 0x2602 <LCD_displayCharacter+0xbe>
    2600:	43 c0       	rjmp	.+134    	; 0x2688 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2602:	fe 01       	movw	r30, r28
    2604:	e1 5a       	subi	r30, 0xA1	; 161
    2606:	ff 4f       	sbci	r31, 0xFF	; 255
    2608:	60 81       	ld	r22, Z
    260a:	71 81       	ldd	r23, Z+1	; 0x01
    260c:	82 81       	ldd	r24, Z+2	; 0x02
    260e:	93 81       	ldd	r25, Z+3	; 0x03
    2610:	20 e0       	ldi	r18, 0x00	; 0
    2612:	30 e0       	ldi	r19, 0x00	; 0
    2614:	40 e2       	ldi	r20, 0x20	; 32
    2616:	51 e4       	ldi	r21, 0x41	; 65
    2618:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    261c:	dc 01       	movw	r26, r24
    261e:	cb 01       	movw	r24, r22
    2620:	8e 01       	movw	r16, r28
    2622:	07 5a       	subi	r16, 0xA7	; 167
    2624:	1f 4f       	sbci	r17, 0xFF	; 255
    2626:	bc 01       	movw	r22, r24
    2628:	cd 01       	movw	r24, r26
    262a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    262e:	dc 01       	movw	r26, r24
    2630:	cb 01       	movw	r24, r22
    2632:	f8 01       	movw	r30, r16
    2634:	91 83       	std	Z+1, r25	; 0x01
    2636:	80 83       	st	Z, r24
    2638:	1f c0       	rjmp	.+62     	; 0x2678 <LCD_displayCharacter+0x134>
    263a:	fe 01       	movw	r30, r28
    263c:	e9 5a       	subi	r30, 0xA9	; 169
    263e:	ff 4f       	sbci	r31, 0xFF	; 255
    2640:	88 ec       	ldi	r24, 0xC8	; 200
    2642:	90 e0       	ldi	r25, 0x00	; 0
    2644:	91 83       	std	Z+1, r25	; 0x01
    2646:	80 83       	st	Z, r24
    2648:	fe 01       	movw	r30, r28
    264a:	e9 5a       	subi	r30, 0xA9	; 169
    264c:	ff 4f       	sbci	r31, 0xFF	; 255
    264e:	80 81       	ld	r24, Z
    2650:	91 81       	ldd	r25, Z+1	; 0x01
    2652:	01 97       	sbiw	r24, 0x01	; 1
    2654:	f1 f7       	brne	.-4      	; 0x2652 <LCD_displayCharacter+0x10e>
    2656:	fe 01       	movw	r30, r28
    2658:	e9 5a       	subi	r30, 0xA9	; 169
    265a:	ff 4f       	sbci	r31, 0xFF	; 255
    265c:	91 83       	std	Z+1, r25	; 0x01
    265e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2660:	de 01       	movw	r26, r28
    2662:	a7 5a       	subi	r26, 0xA7	; 167
    2664:	bf 4f       	sbci	r27, 0xFF	; 255
    2666:	fe 01       	movw	r30, r28
    2668:	e7 5a       	subi	r30, 0xA7	; 167
    266a:	ff 4f       	sbci	r31, 0xFF	; 255
    266c:	80 81       	ld	r24, Z
    266e:	91 81       	ldd	r25, Z+1	; 0x01
    2670:	01 97       	sbiw	r24, 0x01	; 1
    2672:	11 96       	adiw	r26, 0x01	; 1
    2674:	9c 93       	st	X, r25
    2676:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2678:	fe 01       	movw	r30, r28
    267a:	e7 5a       	subi	r30, 0xA7	; 167
    267c:	ff 4f       	sbci	r31, 0xFF	; 255
    267e:	80 81       	ld	r24, Z
    2680:	91 81       	ldd	r25, Z+1	; 0x01
    2682:	00 97       	sbiw	r24, 0x00	; 0
    2684:	d1 f6       	brne	.-76     	; 0x263a <LCD_displayCharacter+0xf6>
    2686:	27 c0       	rjmp	.+78     	; 0x26d6 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2688:	8e 01       	movw	r16, r28
    268a:	07 5a       	subi	r16, 0xA7	; 167
    268c:	1f 4f       	sbci	r17, 0xFF	; 255
    268e:	fe 01       	movw	r30, r28
    2690:	e5 5a       	subi	r30, 0xA5	; 165
    2692:	ff 4f       	sbci	r31, 0xFF	; 255
    2694:	60 81       	ld	r22, Z
    2696:	71 81       	ldd	r23, Z+1	; 0x01
    2698:	82 81       	ldd	r24, Z+2	; 0x02
    269a:	93 81       	ldd	r25, Z+3	; 0x03
    269c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26a0:	dc 01       	movw	r26, r24
    26a2:	cb 01       	movw	r24, r22
    26a4:	f8 01       	movw	r30, r16
    26a6:	91 83       	std	Z+1, r25	; 0x01
    26a8:	80 83       	st	Z, r24
    26aa:	de 01       	movw	r26, r28
    26ac:	ab 5a       	subi	r26, 0xAB	; 171
    26ae:	bf 4f       	sbci	r27, 0xFF	; 255
    26b0:	fe 01       	movw	r30, r28
    26b2:	e7 5a       	subi	r30, 0xA7	; 167
    26b4:	ff 4f       	sbci	r31, 0xFF	; 255
    26b6:	80 81       	ld	r24, Z
    26b8:	91 81       	ldd	r25, Z+1	; 0x01
    26ba:	8d 93       	st	X+, r24
    26bc:	9c 93       	st	X, r25
    26be:	fe 01       	movw	r30, r28
    26c0:	eb 5a       	subi	r30, 0xAB	; 171
    26c2:	ff 4f       	sbci	r31, 0xFF	; 255
    26c4:	80 81       	ld	r24, Z
    26c6:	91 81       	ldd	r25, Z+1	; 0x01
    26c8:	01 97       	sbiw	r24, 0x01	; 1
    26ca:	f1 f7       	brne	.-4      	; 0x26c8 <LCD_displayCharacter+0x184>
    26cc:	fe 01       	movw	r30, r28
    26ce:	eb 5a       	subi	r30, 0xAB	; 171
    26d0:	ff 4f       	sbci	r31, 0xFF	; 255
    26d2:	91 83       	std	Z+1, r25	; 0x01
    26d4:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    26d6:	83 e0       	ldi	r24, 0x03	; 3
    26d8:	64 e0       	ldi	r22, 0x04	; 4
    26da:	41 e0       	ldi	r20, 0x01	; 1
    26dc:	0e 94 22 0b 	call	0x1644	; 0x1644 <GPIO_writePin>
    26e0:	fe 01       	movw	r30, r28
    26e2:	ef 5a       	subi	r30, 0xAF	; 175
    26e4:	ff 4f       	sbci	r31, 0xFF	; 255
    26e6:	80 e0       	ldi	r24, 0x00	; 0
    26e8:	90 e0       	ldi	r25, 0x00	; 0
    26ea:	a0 e8       	ldi	r26, 0x80	; 128
    26ec:	bf e3       	ldi	r27, 0x3F	; 63
    26ee:	80 83       	st	Z, r24
    26f0:	91 83       	std	Z+1, r25	; 0x01
    26f2:	a2 83       	std	Z+2, r26	; 0x02
    26f4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26f6:	8e 01       	movw	r16, r28
    26f8:	03 5b       	subi	r16, 0xB3	; 179
    26fa:	1f 4f       	sbci	r17, 0xFF	; 255
    26fc:	fe 01       	movw	r30, r28
    26fe:	ef 5a       	subi	r30, 0xAF	; 175
    2700:	ff 4f       	sbci	r31, 0xFF	; 255
    2702:	60 81       	ld	r22, Z
    2704:	71 81       	ldd	r23, Z+1	; 0x01
    2706:	82 81       	ldd	r24, Z+2	; 0x02
    2708:	93 81       	ldd	r25, Z+3	; 0x03
    270a:	20 e0       	ldi	r18, 0x00	; 0
    270c:	30 e0       	ldi	r19, 0x00	; 0
    270e:	4a ef       	ldi	r20, 0xFA	; 250
    2710:	54 e4       	ldi	r21, 0x44	; 68
    2712:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2716:	dc 01       	movw	r26, r24
    2718:	cb 01       	movw	r24, r22
    271a:	f8 01       	movw	r30, r16
    271c:	80 83       	st	Z, r24
    271e:	91 83       	std	Z+1, r25	; 0x01
    2720:	a2 83       	std	Z+2, r26	; 0x02
    2722:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2724:	fe 01       	movw	r30, r28
    2726:	e3 5b       	subi	r30, 0xB3	; 179
    2728:	ff 4f       	sbci	r31, 0xFF	; 255
    272a:	60 81       	ld	r22, Z
    272c:	71 81       	ldd	r23, Z+1	; 0x01
    272e:	82 81       	ldd	r24, Z+2	; 0x02
    2730:	93 81       	ldd	r25, Z+3	; 0x03
    2732:	20 e0       	ldi	r18, 0x00	; 0
    2734:	30 e0       	ldi	r19, 0x00	; 0
    2736:	40 e8       	ldi	r20, 0x80	; 128
    2738:	5f e3       	ldi	r21, 0x3F	; 63
    273a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    273e:	88 23       	and	r24, r24
    2740:	44 f4       	brge	.+16     	; 0x2752 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    2742:	fe 01       	movw	r30, r28
    2744:	e5 5b       	subi	r30, 0xB5	; 181
    2746:	ff 4f       	sbci	r31, 0xFF	; 255
    2748:	81 e0       	ldi	r24, 0x01	; 1
    274a:	90 e0       	ldi	r25, 0x00	; 0
    274c:	91 83       	std	Z+1, r25	; 0x01
    274e:	80 83       	st	Z, r24
    2750:	64 c0       	rjmp	.+200    	; 0x281a <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    2752:	fe 01       	movw	r30, r28
    2754:	e3 5b       	subi	r30, 0xB3	; 179
    2756:	ff 4f       	sbci	r31, 0xFF	; 255
    2758:	60 81       	ld	r22, Z
    275a:	71 81       	ldd	r23, Z+1	; 0x01
    275c:	82 81       	ldd	r24, Z+2	; 0x02
    275e:	93 81       	ldd	r25, Z+3	; 0x03
    2760:	20 e0       	ldi	r18, 0x00	; 0
    2762:	3f ef       	ldi	r19, 0xFF	; 255
    2764:	4f e7       	ldi	r20, 0x7F	; 127
    2766:	57 e4       	ldi	r21, 0x47	; 71
    2768:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    276c:	18 16       	cp	r1, r24
    276e:	0c f0       	brlt	.+2      	; 0x2772 <LCD_displayCharacter+0x22e>
    2770:	43 c0       	rjmp	.+134    	; 0x27f8 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2772:	fe 01       	movw	r30, r28
    2774:	ef 5a       	subi	r30, 0xAF	; 175
    2776:	ff 4f       	sbci	r31, 0xFF	; 255
    2778:	60 81       	ld	r22, Z
    277a:	71 81       	ldd	r23, Z+1	; 0x01
    277c:	82 81       	ldd	r24, Z+2	; 0x02
    277e:	93 81       	ldd	r25, Z+3	; 0x03
    2780:	20 e0       	ldi	r18, 0x00	; 0
    2782:	30 e0       	ldi	r19, 0x00	; 0
    2784:	40 e2       	ldi	r20, 0x20	; 32
    2786:	51 e4       	ldi	r21, 0x41	; 65
    2788:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    278c:	dc 01       	movw	r26, r24
    278e:	cb 01       	movw	r24, r22
    2790:	8e 01       	movw	r16, r28
    2792:	05 5b       	subi	r16, 0xB5	; 181
    2794:	1f 4f       	sbci	r17, 0xFF	; 255
    2796:	bc 01       	movw	r22, r24
    2798:	cd 01       	movw	r24, r26
    279a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    279e:	dc 01       	movw	r26, r24
    27a0:	cb 01       	movw	r24, r22
    27a2:	f8 01       	movw	r30, r16
    27a4:	91 83       	std	Z+1, r25	; 0x01
    27a6:	80 83       	st	Z, r24
    27a8:	1f c0       	rjmp	.+62     	; 0x27e8 <LCD_displayCharacter+0x2a4>
    27aa:	fe 01       	movw	r30, r28
    27ac:	e7 5b       	subi	r30, 0xB7	; 183
    27ae:	ff 4f       	sbci	r31, 0xFF	; 255
    27b0:	88 ec       	ldi	r24, 0xC8	; 200
    27b2:	90 e0       	ldi	r25, 0x00	; 0
    27b4:	91 83       	std	Z+1, r25	; 0x01
    27b6:	80 83       	st	Z, r24
    27b8:	fe 01       	movw	r30, r28
    27ba:	e7 5b       	subi	r30, 0xB7	; 183
    27bc:	ff 4f       	sbci	r31, 0xFF	; 255
    27be:	80 81       	ld	r24, Z
    27c0:	91 81       	ldd	r25, Z+1	; 0x01
    27c2:	01 97       	sbiw	r24, 0x01	; 1
    27c4:	f1 f7       	brne	.-4      	; 0x27c2 <LCD_displayCharacter+0x27e>
    27c6:	fe 01       	movw	r30, r28
    27c8:	e7 5b       	subi	r30, 0xB7	; 183
    27ca:	ff 4f       	sbci	r31, 0xFF	; 255
    27cc:	91 83       	std	Z+1, r25	; 0x01
    27ce:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27d0:	de 01       	movw	r26, r28
    27d2:	a5 5b       	subi	r26, 0xB5	; 181
    27d4:	bf 4f       	sbci	r27, 0xFF	; 255
    27d6:	fe 01       	movw	r30, r28
    27d8:	e5 5b       	subi	r30, 0xB5	; 181
    27da:	ff 4f       	sbci	r31, 0xFF	; 255
    27dc:	80 81       	ld	r24, Z
    27de:	91 81       	ldd	r25, Z+1	; 0x01
    27e0:	01 97       	sbiw	r24, 0x01	; 1
    27e2:	11 96       	adiw	r26, 0x01	; 1
    27e4:	9c 93       	st	X, r25
    27e6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27e8:	fe 01       	movw	r30, r28
    27ea:	e5 5b       	subi	r30, 0xB5	; 181
    27ec:	ff 4f       	sbci	r31, 0xFF	; 255
    27ee:	80 81       	ld	r24, Z
    27f0:	91 81       	ldd	r25, Z+1	; 0x01
    27f2:	00 97       	sbiw	r24, 0x00	; 0
    27f4:	d1 f6       	brne	.-76     	; 0x27aa <LCD_displayCharacter+0x266>
    27f6:	27 c0       	rjmp	.+78     	; 0x2846 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27f8:	8e 01       	movw	r16, r28
    27fa:	05 5b       	subi	r16, 0xB5	; 181
    27fc:	1f 4f       	sbci	r17, 0xFF	; 255
    27fe:	fe 01       	movw	r30, r28
    2800:	e3 5b       	subi	r30, 0xB3	; 179
    2802:	ff 4f       	sbci	r31, 0xFF	; 255
    2804:	60 81       	ld	r22, Z
    2806:	71 81       	ldd	r23, Z+1	; 0x01
    2808:	82 81       	ldd	r24, Z+2	; 0x02
    280a:	93 81       	ldd	r25, Z+3	; 0x03
    280c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2810:	dc 01       	movw	r26, r24
    2812:	cb 01       	movw	r24, r22
    2814:	f8 01       	movw	r30, r16
    2816:	91 83       	std	Z+1, r25	; 0x01
    2818:	80 83       	st	Z, r24
    281a:	de 01       	movw	r26, r28
    281c:	a9 5b       	subi	r26, 0xB9	; 185
    281e:	bf 4f       	sbci	r27, 0xFF	; 255
    2820:	fe 01       	movw	r30, r28
    2822:	e5 5b       	subi	r30, 0xB5	; 181
    2824:	ff 4f       	sbci	r31, 0xFF	; 255
    2826:	80 81       	ld	r24, Z
    2828:	91 81       	ldd	r25, Z+1	; 0x01
    282a:	8d 93       	st	X+, r24
    282c:	9c 93       	st	X, r25
    282e:	fe 01       	movw	r30, r28
    2830:	e9 5b       	subi	r30, 0xB9	; 185
    2832:	ff 4f       	sbci	r31, 0xFF	; 255
    2834:	80 81       	ld	r24, Z
    2836:	91 81       	ldd	r25, Z+1	; 0x01
    2838:	01 97       	sbiw	r24, 0x01	; 1
    283a:	f1 f7       	brne	.-4      	; 0x2838 <LCD_displayCharacter+0x2f4>
    283c:	fe 01       	movw	r30, r28
    283e:	e9 5b       	subi	r30, 0xB9	; 185
    2840:	ff 4f       	sbci	r31, 0xFF	; 255
    2842:	91 83       	std	Z+1, r25	; 0x01
    2844:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    2846:	fe 01       	movw	r30, r28
    2848:	ed 59       	subi	r30, 0x9D	; 157
    284a:	ff 4f       	sbci	r31, 0xFF	; 255
    284c:	80 81       	ld	r24, Z
    284e:	88 2f       	mov	r24, r24
    2850:	90 e0       	ldi	r25, 0x00	; 0
    2852:	80 71       	andi	r24, 0x10	; 16
    2854:	90 70       	andi	r25, 0x00	; 0
    2856:	95 95       	asr	r25
    2858:	87 95       	ror	r24
    285a:	95 95       	asr	r25
    285c:	87 95       	ror	r24
    285e:	95 95       	asr	r25
    2860:	87 95       	ror	r24
    2862:	95 95       	asr	r25
    2864:	87 95       	ror	r24
    2866:	98 2f       	mov	r25, r24
    2868:	81 e0       	ldi	r24, 0x01	; 1
    286a:	60 e0       	ldi	r22, 0x00	; 0
    286c:	49 2f       	mov	r20, r25
    286e:	0e 94 22 0b 	call	0x1644	; 0x1644 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    2872:	fe 01       	movw	r30, r28
    2874:	ed 59       	subi	r30, 0x9D	; 157
    2876:	ff 4f       	sbci	r31, 0xFF	; 255
    2878:	80 81       	ld	r24, Z
    287a:	88 2f       	mov	r24, r24
    287c:	90 e0       	ldi	r25, 0x00	; 0
    287e:	80 72       	andi	r24, 0x20	; 32
    2880:	90 70       	andi	r25, 0x00	; 0
    2882:	95 95       	asr	r25
    2884:	87 95       	ror	r24
    2886:	95 95       	asr	r25
    2888:	87 95       	ror	r24
    288a:	95 95       	asr	r25
    288c:	87 95       	ror	r24
    288e:	95 95       	asr	r25
    2890:	87 95       	ror	r24
    2892:	95 95       	asr	r25
    2894:	87 95       	ror	r24
    2896:	98 2f       	mov	r25, r24
    2898:	81 e0       	ldi	r24, 0x01	; 1
    289a:	61 e0       	ldi	r22, 0x01	; 1
    289c:	49 2f       	mov	r20, r25
    289e:	0e 94 22 0b 	call	0x1644	; 0x1644 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    28a2:	fe 01       	movw	r30, r28
    28a4:	ed 59       	subi	r30, 0x9D	; 157
    28a6:	ff 4f       	sbci	r31, 0xFF	; 255
    28a8:	80 81       	ld	r24, Z
    28aa:	88 2f       	mov	r24, r24
    28ac:	90 e0       	ldi	r25, 0x00	; 0
    28ae:	80 74       	andi	r24, 0x40	; 64
    28b0:	90 70       	andi	r25, 0x00	; 0
    28b2:	08 2e       	mov	r0, r24
    28b4:	89 2f       	mov	r24, r25
    28b6:	00 0c       	add	r0, r0
    28b8:	88 1f       	adc	r24, r24
    28ba:	99 0b       	sbc	r25, r25
    28bc:	00 0c       	add	r0, r0
    28be:	88 1f       	adc	r24, r24
    28c0:	99 1f       	adc	r25, r25
    28c2:	98 2f       	mov	r25, r24
    28c4:	81 e0       	ldi	r24, 0x01	; 1
    28c6:	62 e0       	ldi	r22, 0x02	; 2
    28c8:	49 2f       	mov	r20, r25
    28ca:	0e 94 22 0b 	call	0x1644	; 0x1644 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    28ce:	fe 01       	movw	r30, r28
    28d0:	ed 59       	subi	r30, 0x9D	; 157
    28d2:	ff 4f       	sbci	r31, 0xFF	; 255
    28d4:	80 81       	ld	r24, Z
    28d6:	98 2f       	mov	r25, r24
    28d8:	99 1f       	adc	r25, r25
    28da:	99 27       	eor	r25, r25
    28dc:	99 1f       	adc	r25, r25
    28de:	81 e0       	ldi	r24, 0x01	; 1
    28e0:	63 e0       	ldi	r22, 0x03	; 3
    28e2:	49 2f       	mov	r20, r25
    28e4:	0e 94 22 0b 	call	0x1644	; 0x1644 <GPIO_writePin>
    28e8:	fe 01       	movw	r30, r28
    28ea:	ed 5b       	subi	r30, 0xBD	; 189
    28ec:	ff 4f       	sbci	r31, 0xFF	; 255
    28ee:	80 e0       	ldi	r24, 0x00	; 0
    28f0:	90 e0       	ldi	r25, 0x00	; 0
    28f2:	a0 e8       	ldi	r26, 0x80	; 128
    28f4:	bf e3       	ldi	r27, 0x3F	; 63
    28f6:	80 83       	st	Z, r24
    28f8:	91 83       	std	Z+1, r25	; 0x01
    28fa:	a2 83       	std	Z+2, r26	; 0x02
    28fc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28fe:	8e 01       	movw	r16, r28
    2900:	01 5c       	subi	r16, 0xC1	; 193
    2902:	1f 4f       	sbci	r17, 0xFF	; 255
    2904:	fe 01       	movw	r30, r28
    2906:	ed 5b       	subi	r30, 0xBD	; 189
    2908:	ff 4f       	sbci	r31, 0xFF	; 255
    290a:	60 81       	ld	r22, Z
    290c:	71 81       	ldd	r23, Z+1	; 0x01
    290e:	82 81       	ldd	r24, Z+2	; 0x02
    2910:	93 81       	ldd	r25, Z+3	; 0x03
    2912:	20 e0       	ldi	r18, 0x00	; 0
    2914:	30 e0       	ldi	r19, 0x00	; 0
    2916:	4a ef       	ldi	r20, 0xFA	; 250
    2918:	54 e4       	ldi	r21, 0x44	; 68
    291a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    291e:	dc 01       	movw	r26, r24
    2920:	cb 01       	movw	r24, r22
    2922:	f8 01       	movw	r30, r16
    2924:	80 83       	st	Z, r24
    2926:	91 83       	std	Z+1, r25	; 0x01
    2928:	a2 83       	std	Z+2, r26	; 0x02
    292a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    292c:	fe 01       	movw	r30, r28
    292e:	ff 96       	adiw	r30, 0x3f	; 63
    2930:	60 81       	ld	r22, Z
    2932:	71 81       	ldd	r23, Z+1	; 0x01
    2934:	82 81       	ldd	r24, Z+2	; 0x02
    2936:	93 81       	ldd	r25, Z+3	; 0x03
    2938:	20 e0       	ldi	r18, 0x00	; 0
    293a:	30 e0       	ldi	r19, 0x00	; 0
    293c:	40 e8       	ldi	r20, 0x80	; 128
    293e:	5f e3       	ldi	r21, 0x3F	; 63
    2940:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2944:	88 23       	and	r24, r24
    2946:	2c f4       	brge	.+10     	; 0x2952 <LCD_displayCharacter+0x40e>
		__ticks = 1;
    2948:	81 e0       	ldi	r24, 0x01	; 1
    294a:	90 e0       	ldi	r25, 0x00	; 0
    294c:	9e af       	std	Y+62, r25	; 0x3e
    294e:	8d af       	std	Y+61, r24	; 0x3d
    2950:	46 c0       	rjmp	.+140    	; 0x29de <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    2952:	fe 01       	movw	r30, r28
    2954:	ff 96       	adiw	r30, 0x3f	; 63
    2956:	60 81       	ld	r22, Z
    2958:	71 81       	ldd	r23, Z+1	; 0x01
    295a:	82 81       	ldd	r24, Z+2	; 0x02
    295c:	93 81       	ldd	r25, Z+3	; 0x03
    295e:	20 e0       	ldi	r18, 0x00	; 0
    2960:	3f ef       	ldi	r19, 0xFF	; 255
    2962:	4f e7       	ldi	r20, 0x7F	; 127
    2964:	57 e4       	ldi	r21, 0x47	; 71
    2966:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    296a:	18 16       	cp	r1, r24
    296c:	64 f5       	brge	.+88     	; 0x29c6 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    296e:	fe 01       	movw	r30, r28
    2970:	ed 5b       	subi	r30, 0xBD	; 189
    2972:	ff 4f       	sbci	r31, 0xFF	; 255
    2974:	60 81       	ld	r22, Z
    2976:	71 81       	ldd	r23, Z+1	; 0x01
    2978:	82 81       	ldd	r24, Z+2	; 0x02
    297a:	93 81       	ldd	r25, Z+3	; 0x03
    297c:	20 e0       	ldi	r18, 0x00	; 0
    297e:	30 e0       	ldi	r19, 0x00	; 0
    2980:	40 e2       	ldi	r20, 0x20	; 32
    2982:	51 e4       	ldi	r21, 0x41	; 65
    2984:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2988:	dc 01       	movw	r26, r24
    298a:	cb 01       	movw	r24, r22
    298c:	bc 01       	movw	r22, r24
    298e:	cd 01       	movw	r24, r26
    2990:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2994:	dc 01       	movw	r26, r24
    2996:	cb 01       	movw	r24, r22
    2998:	9e af       	std	Y+62, r25	; 0x3e
    299a:	8d af       	std	Y+61, r24	; 0x3d
    299c:	0f c0       	rjmp	.+30     	; 0x29bc <LCD_displayCharacter+0x478>
    299e:	88 ec       	ldi	r24, 0xC8	; 200
    29a0:	90 e0       	ldi	r25, 0x00	; 0
    29a2:	9c af       	std	Y+60, r25	; 0x3c
    29a4:	8b af       	std	Y+59, r24	; 0x3b
    29a6:	8b ad       	ldd	r24, Y+59	; 0x3b
    29a8:	9c ad       	ldd	r25, Y+60	; 0x3c
    29aa:	01 97       	sbiw	r24, 0x01	; 1
    29ac:	f1 f7       	brne	.-4      	; 0x29aa <LCD_displayCharacter+0x466>
    29ae:	9c af       	std	Y+60, r25	; 0x3c
    29b0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29b2:	8d ad       	ldd	r24, Y+61	; 0x3d
    29b4:	9e ad       	ldd	r25, Y+62	; 0x3e
    29b6:	01 97       	sbiw	r24, 0x01	; 1
    29b8:	9e af       	std	Y+62, r25	; 0x3e
    29ba:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29bc:	8d ad       	ldd	r24, Y+61	; 0x3d
    29be:	9e ad       	ldd	r25, Y+62	; 0x3e
    29c0:	00 97       	sbiw	r24, 0x00	; 0
    29c2:	69 f7       	brne	.-38     	; 0x299e <LCD_displayCharacter+0x45a>
    29c4:	16 c0       	rjmp	.+44     	; 0x29f2 <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29c6:	fe 01       	movw	r30, r28
    29c8:	ff 96       	adiw	r30, 0x3f	; 63
    29ca:	60 81       	ld	r22, Z
    29cc:	71 81       	ldd	r23, Z+1	; 0x01
    29ce:	82 81       	ldd	r24, Z+2	; 0x02
    29d0:	93 81       	ldd	r25, Z+3	; 0x03
    29d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29d6:	dc 01       	movw	r26, r24
    29d8:	cb 01       	movw	r24, r22
    29da:	9e af       	std	Y+62, r25	; 0x3e
    29dc:	8d af       	std	Y+61, r24	; 0x3d
    29de:	8d ad       	ldd	r24, Y+61	; 0x3d
    29e0:	9e ad       	ldd	r25, Y+62	; 0x3e
    29e2:	9a af       	std	Y+58, r25	; 0x3a
    29e4:	89 af       	std	Y+57, r24	; 0x39
    29e6:	89 ad       	ldd	r24, Y+57	; 0x39
    29e8:	9a ad       	ldd	r25, Y+58	; 0x3a
    29ea:	01 97       	sbiw	r24, 0x01	; 1
    29ec:	f1 f7       	brne	.-4      	; 0x29ea <LCD_displayCharacter+0x4a6>
    29ee:	9a af       	std	Y+58, r25	; 0x3a
    29f0:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    29f2:	83 e0       	ldi	r24, 0x03	; 3
    29f4:	64 e0       	ldi	r22, 0x04	; 4
    29f6:	40 e0       	ldi	r20, 0x00	; 0
    29f8:	0e 94 22 0b 	call	0x1644	; 0x1644 <GPIO_writePin>
    29fc:	80 e0       	ldi	r24, 0x00	; 0
    29fe:	90 e0       	ldi	r25, 0x00	; 0
    2a00:	a0 e8       	ldi	r26, 0x80	; 128
    2a02:	bf e3       	ldi	r27, 0x3F	; 63
    2a04:	8d ab       	std	Y+53, r24	; 0x35
    2a06:	9e ab       	std	Y+54, r25	; 0x36
    2a08:	af ab       	std	Y+55, r26	; 0x37
    2a0a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a0c:	6d a9       	ldd	r22, Y+53	; 0x35
    2a0e:	7e a9       	ldd	r23, Y+54	; 0x36
    2a10:	8f a9       	ldd	r24, Y+55	; 0x37
    2a12:	98 ad       	ldd	r25, Y+56	; 0x38
    2a14:	20 e0       	ldi	r18, 0x00	; 0
    2a16:	30 e0       	ldi	r19, 0x00	; 0
    2a18:	4a ef       	ldi	r20, 0xFA	; 250
    2a1a:	54 e4       	ldi	r21, 0x44	; 68
    2a1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a20:	dc 01       	movw	r26, r24
    2a22:	cb 01       	movw	r24, r22
    2a24:	89 ab       	std	Y+49, r24	; 0x31
    2a26:	9a ab       	std	Y+50, r25	; 0x32
    2a28:	ab ab       	std	Y+51, r26	; 0x33
    2a2a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2a2c:	69 a9       	ldd	r22, Y+49	; 0x31
    2a2e:	7a a9       	ldd	r23, Y+50	; 0x32
    2a30:	8b a9       	ldd	r24, Y+51	; 0x33
    2a32:	9c a9       	ldd	r25, Y+52	; 0x34
    2a34:	20 e0       	ldi	r18, 0x00	; 0
    2a36:	30 e0       	ldi	r19, 0x00	; 0
    2a38:	40 e8       	ldi	r20, 0x80	; 128
    2a3a:	5f e3       	ldi	r21, 0x3F	; 63
    2a3c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a40:	88 23       	and	r24, r24
    2a42:	2c f4       	brge	.+10     	; 0x2a4e <LCD_displayCharacter+0x50a>
		__ticks = 1;
    2a44:	81 e0       	ldi	r24, 0x01	; 1
    2a46:	90 e0       	ldi	r25, 0x00	; 0
    2a48:	98 ab       	std	Y+48, r25	; 0x30
    2a4a:	8f a7       	std	Y+47, r24	; 0x2f
    2a4c:	3f c0       	rjmp	.+126    	; 0x2acc <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    2a4e:	69 a9       	ldd	r22, Y+49	; 0x31
    2a50:	7a a9       	ldd	r23, Y+50	; 0x32
    2a52:	8b a9       	ldd	r24, Y+51	; 0x33
    2a54:	9c a9       	ldd	r25, Y+52	; 0x34
    2a56:	20 e0       	ldi	r18, 0x00	; 0
    2a58:	3f ef       	ldi	r19, 0xFF	; 255
    2a5a:	4f e7       	ldi	r20, 0x7F	; 127
    2a5c:	57 e4       	ldi	r21, 0x47	; 71
    2a5e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a62:	18 16       	cp	r1, r24
    2a64:	4c f5       	brge	.+82     	; 0x2ab8 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a66:	6d a9       	ldd	r22, Y+53	; 0x35
    2a68:	7e a9       	ldd	r23, Y+54	; 0x36
    2a6a:	8f a9       	ldd	r24, Y+55	; 0x37
    2a6c:	98 ad       	ldd	r25, Y+56	; 0x38
    2a6e:	20 e0       	ldi	r18, 0x00	; 0
    2a70:	30 e0       	ldi	r19, 0x00	; 0
    2a72:	40 e2       	ldi	r20, 0x20	; 32
    2a74:	51 e4       	ldi	r21, 0x41	; 65
    2a76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a7a:	dc 01       	movw	r26, r24
    2a7c:	cb 01       	movw	r24, r22
    2a7e:	bc 01       	movw	r22, r24
    2a80:	cd 01       	movw	r24, r26
    2a82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a86:	dc 01       	movw	r26, r24
    2a88:	cb 01       	movw	r24, r22
    2a8a:	98 ab       	std	Y+48, r25	; 0x30
    2a8c:	8f a7       	std	Y+47, r24	; 0x2f
    2a8e:	0f c0       	rjmp	.+30     	; 0x2aae <LCD_displayCharacter+0x56a>
    2a90:	88 ec       	ldi	r24, 0xC8	; 200
    2a92:	90 e0       	ldi	r25, 0x00	; 0
    2a94:	9e a7       	std	Y+46, r25	; 0x2e
    2a96:	8d a7       	std	Y+45, r24	; 0x2d
    2a98:	8d a5       	ldd	r24, Y+45	; 0x2d
    2a9a:	9e a5       	ldd	r25, Y+46	; 0x2e
    2a9c:	01 97       	sbiw	r24, 0x01	; 1
    2a9e:	f1 f7       	brne	.-4      	; 0x2a9c <LCD_displayCharacter+0x558>
    2aa0:	9e a7       	std	Y+46, r25	; 0x2e
    2aa2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aa4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2aa6:	98 a9       	ldd	r25, Y+48	; 0x30
    2aa8:	01 97       	sbiw	r24, 0x01	; 1
    2aaa:	98 ab       	std	Y+48, r25	; 0x30
    2aac:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aae:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ab0:	98 a9       	ldd	r25, Y+48	; 0x30
    2ab2:	00 97       	sbiw	r24, 0x00	; 0
    2ab4:	69 f7       	brne	.-38     	; 0x2a90 <LCD_displayCharacter+0x54c>
    2ab6:	14 c0       	rjmp	.+40     	; 0x2ae0 <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ab8:	69 a9       	ldd	r22, Y+49	; 0x31
    2aba:	7a a9       	ldd	r23, Y+50	; 0x32
    2abc:	8b a9       	ldd	r24, Y+51	; 0x33
    2abe:	9c a9       	ldd	r25, Y+52	; 0x34
    2ac0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ac4:	dc 01       	movw	r26, r24
    2ac6:	cb 01       	movw	r24, r22
    2ac8:	98 ab       	std	Y+48, r25	; 0x30
    2aca:	8f a7       	std	Y+47, r24	; 0x2f
    2acc:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ace:	98 a9       	ldd	r25, Y+48	; 0x30
    2ad0:	9c a7       	std	Y+44, r25	; 0x2c
    2ad2:	8b a7       	std	Y+43, r24	; 0x2b
    2ad4:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ad6:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ad8:	01 97       	sbiw	r24, 0x01	; 1
    2ada:	f1 f7       	brne	.-4      	; 0x2ad8 <LCD_displayCharacter+0x594>
    2adc:	9c a7       	std	Y+44, r25	; 0x2c
    2ade:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2ae0:	83 e0       	ldi	r24, 0x03	; 3
    2ae2:	64 e0       	ldi	r22, 0x04	; 4
    2ae4:	41 e0       	ldi	r20, 0x01	; 1
    2ae6:	0e 94 22 0b 	call	0x1644	; 0x1644 <GPIO_writePin>
    2aea:	80 e0       	ldi	r24, 0x00	; 0
    2aec:	90 e0       	ldi	r25, 0x00	; 0
    2aee:	a0 e8       	ldi	r26, 0x80	; 128
    2af0:	bf e3       	ldi	r27, 0x3F	; 63
    2af2:	8f a3       	std	Y+39, r24	; 0x27
    2af4:	98 a7       	std	Y+40, r25	; 0x28
    2af6:	a9 a7       	std	Y+41, r26	; 0x29
    2af8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2afa:	6f a1       	ldd	r22, Y+39	; 0x27
    2afc:	78 a5       	ldd	r23, Y+40	; 0x28
    2afe:	89 a5       	ldd	r24, Y+41	; 0x29
    2b00:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b02:	20 e0       	ldi	r18, 0x00	; 0
    2b04:	30 e0       	ldi	r19, 0x00	; 0
    2b06:	4a ef       	ldi	r20, 0xFA	; 250
    2b08:	54 e4       	ldi	r21, 0x44	; 68
    2b0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b0e:	dc 01       	movw	r26, r24
    2b10:	cb 01       	movw	r24, r22
    2b12:	8b a3       	std	Y+35, r24	; 0x23
    2b14:	9c a3       	std	Y+36, r25	; 0x24
    2b16:	ad a3       	std	Y+37, r26	; 0x25
    2b18:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2b1a:	6b a1       	ldd	r22, Y+35	; 0x23
    2b1c:	7c a1       	ldd	r23, Y+36	; 0x24
    2b1e:	8d a1       	ldd	r24, Y+37	; 0x25
    2b20:	9e a1       	ldd	r25, Y+38	; 0x26
    2b22:	20 e0       	ldi	r18, 0x00	; 0
    2b24:	30 e0       	ldi	r19, 0x00	; 0
    2b26:	40 e8       	ldi	r20, 0x80	; 128
    2b28:	5f e3       	ldi	r21, 0x3F	; 63
    2b2a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b2e:	88 23       	and	r24, r24
    2b30:	2c f4       	brge	.+10     	; 0x2b3c <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    2b32:	81 e0       	ldi	r24, 0x01	; 1
    2b34:	90 e0       	ldi	r25, 0x00	; 0
    2b36:	9a a3       	std	Y+34, r25	; 0x22
    2b38:	89 a3       	std	Y+33, r24	; 0x21
    2b3a:	3f c0       	rjmp	.+126    	; 0x2bba <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    2b3c:	6b a1       	ldd	r22, Y+35	; 0x23
    2b3e:	7c a1       	ldd	r23, Y+36	; 0x24
    2b40:	8d a1       	ldd	r24, Y+37	; 0x25
    2b42:	9e a1       	ldd	r25, Y+38	; 0x26
    2b44:	20 e0       	ldi	r18, 0x00	; 0
    2b46:	3f ef       	ldi	r19, 0xFF	; 255
    2b48:	4f e7       	ldi	r20, 0x7F	; 127
    2b4a:	57 e4       	ldi	r21, 0x47	; 71
    2b4c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b50:	18 16       	cp	r1, r24
    2b52:	4c f5       	brge	.+82     	; 0x2ba6 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b54:	6f a1       	ldd	r22, Y+39	; 0x27
    2b56:	78 a5       	ldd	r23, Y+40	; 0x28
    2b58:	89 a5       	ldd	r24, Y+41	; 0x29
    2b5a:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b5c:	20 e0       	ldi	r18, 0x00	; 0
    2b5e:	30 e0       	ldi	r19, 0x00	; 0
    2b60:	40 e2       	ldi	r20, 0x20	; 32
    2b62:	51 e4       	ldi	r21, 0x41	; 65
    2b64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b68:	dc 01       	movw	r26, r24
    2b6a:	cb 01       	movw	r24, r22
    2b6c:	bc 01       	movw	r22, r24
    2b6e:	cd 01       	movw	r24, r26
    2b70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b74:	dc 01       	movw	r26, r24
    2b76:	cb 01       	movw	r24, r22
    2b78:	9a a3       	std	Y+34, r25	; 0x22
    2b7a:	89 a3       	std	Y+33, r24	; 0x21
    2b7c:	0f c0       	rjmp	.+30     	; 0x2b9c <LCD_displayCharacter+0x658>
    2b7e:	88 ec       	ldi	r24, 0xC8	; 200
    2b80:	90 e0       	ldi	r25, 0x00	; 0
    2b82:	98 a3       	std	Y+32, r25	; 0x20
    2b84:	8f 8f       	std	Y+31, r24	; 0x1f
    2b86:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b88:	98 a1       	ldd	r25, Y+32	; 0x20
    2b8a:	01 97       	sbiw	r24, 0x01	; 1
    2b8c:	f1 f7       	brne	.-4      	; 0x2b8a <LCD_displayCharacter+0x646>
    2b8e:	98 a3       	std	Y+32, r25	; 0x20
    2b90:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b92:	89 a1       	ldd	r24, Y+33	; 0x21
    2b94:	9a a1       	ldd	r25, Y+34	; 0x22
    2b96:	01 97       	sbiw	r24, 0x01	; 1
    2b98:	9a a3       	std	Y+34, r25	; 0x22
    2b9a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b9c:	89 a1       	ldd	r24, Y+33	; 0x21
    2b9e:	9a a1       	ldd	r25, Y+34	; 0x22
    2ba0:	00 97       	sbiw	r24, 0x00	; 0
    2ba2:	69 f7       	brne	.-38     	; 0x2b7e <LCD_displayCharacter+0x63a>
    2ba4:	14 c0       	rjmp	.+40     	; 0x2bce <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ba6:	6b a1       	ldd	r22, Y+35	; 0x23
    2ba8:	7c a1       	ldd	r23, Y+36	; 0x24
    2baa:	8d a1       	ldd	r24, Y+37	; 0x25
    2bac:	9e a1       	ldd	r25, Y+38	; 0x26
    2bae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bb2:	dc 01       	movw	r26, r24
    2bb4:	cb 01       	movw	r24, r22
    2bb6:	9a a3       	std	Y+34, r25	; 0x22
    2bb8:	89 a3       	std	Y+33, r24	; 0x21
    2bba:	89 a1       	ldd	r24, Y+33	; 0x21
    2bbc:	9a a1       	ldd	r25, Y+34	; 0x22
    2bbe:	9e 8f       	std	Y+30, r25	; 0x1e
    2bc0:	8d 8f       	std	Y+29, r24	; 0x1d
    2bc2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2bc4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2bc6:	01 97       	sbiw	r24, 0x01	; 1
    2bc8:	f1 f7       	brne	.-4      	; 0x2bc6 <LCD_displayCharacter+0x682>
    2bca:	9e 8f       	std	Y+30, r25	; 0x1e
    2bcc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    2bce:	fe 01       	movw	r30, r28
    2bd0:	ed 59       	subi	r30, 0x9D	; 157
    2bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd4:	80 81       	ld	r24, Z
    2bd6:	98 2f       	mov	r25, r24
    2bd8:	91 70       	andi	r25, 0x01	; 1
    2bda:	81 e0       	ldi	r24, 0x01	; 1
    2bdc:	60 e0       	ldi	r22, 0x00	; 0
    2bde:	49 2f       	mov	r20, r25
    2be0:	0e 94 22 0b 	call	0x1644	; 0x1644 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    2be4:	fe 01       	movw	r30, r28
    2be6:	ed 59       	subi	r30, 0x9D	; 157
    2be8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bea:	80 81       	ld	r24, Z
    2bec:	88 2f       	mov	r24, r24
    2bee:	90 e0       	ldi	r25, 0x00	; 0
    2bf0:	82 70       	andi	r24, 0x02	; 2
    2bf2:	90 70       	andi	r25, 0x00	; 0
    2bf4:	95 95       	asr	r25
    2bf6:	87 95       	ror	r24
    2bf8:	98 2f       	mov	r25, r24
    2bfa:	81 e0       	ldi	r24, 0x01	; 1
    2bfc:	61 e0       	ldi	r22, 0x01	; 1
    2bfe:	49 2f       	mov	r20, r25
    2c00:	0e 94 22 0b 	call	0x1644	; 0x1644 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    2c04:	fe 01       	movw	r30, r28
    2c06:	ed 59       	subi	r30, 0x9D	; 157
    2c08:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0a:	80 81       	ld	r24, Z
    2c0c:	88 2f       	mov	r24, r24
    2c0e:	90 e0       	ldi	r25, 0x00	; 0
    2c10:	84 70       	andi	r24, 0x04	; 4
    2c12:	90 70       	andi	r25, 0x00	; 0
    2c14:	95 95       	asr	r25
    2c16:	87 95       	ror	r24
    2c18:	95 95       	asr	r25
    2c1a:	87 95       	ror	r24
    2c1c:	98 2f       	mov	r25, r24
    2c1e:	81 e0       	ldi	r24, 0x01	; 1
    2c20:	62 e0       	ldi	r22, 0x02	; 2
    2c22:	49 2f       	mov	r20, r25
    2c24:	0e 94 22 0b 	call	0x1644	; 0x1644 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    2c28:	fe 01       	movw	r30, r28
    2c2a:	ed 59       	subi	r30, 0x9D	; 157
    2c2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c2e:	80 81       	ld	r24, Z
    2c30:	88 2f       	mov	r24, r24
    2c32:	90 e0       	ldi	r25, 0x00	; 0
    2c34:	88 70       	andi	r24, 0x08	; 8
    2c36:	90 70       	andi	r25, 0x00	; 0
    2c38:	95 95       	asr	r25
    2c3a:	87 95       	ror	r24
    2c3c:	95 95       	asr	r25
    2c3e:	87 95       	ror	r24
    2c40:	95 95       	asr	r25
    2c42:	87 95       	ror	r24
    2c44:	98 2f       	mov	r25, r24
    2c46:	81 e0       	ldi	r24, 0x01	; 1
    2c48:	63 e0       	ldi	r22, 0x03	; 3
    2c4a:	49 2f       	mov	r20, r25
    2c4c:	0e 94 22 0b 	call	0x1644	; 0x1644 <GPIO_writePin>
    2c50:	80 e0       	ldi	r24, 0x00	; 0
    2c52:	90 e0       	ldi	r25, 0x00	; 0
    2c54:	a0 e8       	ldi	r26, 0x80	; 128
    2c56:	bf e3       	ldi	r27, 0x3F	; 63
    2c58:	89 8f       	std	Y+25, r24	; 0x19
    2c5a:	9a 8f       	std	Y+26, r25	; 0x1a
    2c5c:	ab 8f       	std	Y+27, r26	; 0x1b
    2c5e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c60:	69 8d       	ldd	r22, Y+25	; 0x19
    2c62:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c64:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c66:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c68:	20 e0       	ldi	r18, 0x00	; 0
    2c6a:	30 e0       	ldi	r19, 0x00	; 0
    2c6c:	4a ef       	ldi	r20, 0xFA	; 250
    2c6e:	54 e4       	ldi	r21, 0x44	; 68
    2c70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c74:	dc 01       	movw	r26, r24
    2c76:	cb 01       	movw	r24, r22
    2c78:	8d 8b       	std	Y+21, r24	; 0x15
    2c7a:	9e 8b       	std	Y+22, r25	; 0x16
    2c7c:	af 8b       	std	Y+23, r26	; 0x17
    2c7e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c80:	6d 89       	ldd	r22, Y+21	; 0x15
    2c82:	7e 89       	ldd	r23, Y+22	; 0x16
    2c84:	8f 89       	ldd	r24, Y+23	; 0x17
    2c86:	98 8d       	ldd	r25, Y+24	; 0x18
    2c88:	20 e0       	ldi	r18, 0x00	; 0
    2c8a:	30 e0       	ldi	r19, 0x00	; 0
    2c8c:	40 e8       	ldi	r20, 0x80	; 128
    2c8e:	5f e3       	ldi	r21, 0x3F	; 63
    2c90:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c94:	88 23       	and	r24, r24
    2c96:	2c f4       	brge	.+10     	; 0x2ca2 <LCD_displayCharacter+0x75e>
		__ticks = 1;
    2c98:	81 e0       	ldi	r24, 0x01	; 1
    2c9a:	90 e0       	ldi	r25, 0x00	; 0
    2c9c:	9c 8b       	std	Y+20, r25	; 0x14
    2c9e:	8b 8b       	std	Y+19, r24	; 0x13
    2ca0:	3f c0       	rjmp	.+126    	; 0x2d20 <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    2ca2:	6d 89       	ldd	r22, Y+21	; 0x15
    2ca4:	7e 89       	ldd	r23, Y+22	; 0x16
    2ca6:	8f 89       	ldd	r24, Y+23	; 0x17
    2ca8:	98 8d       	ldd	r25, Y+24	; 0x18
    2caa:	20 e0       	ldi	r18, 0x00	; 0
    2cac:	3f ef       	ldi	r19, 0xFF	; 255
    2cae:	4f e7       	ldi	r20, 0x7F	; 127
    2cb0:	57 e4       	ldi	r21, 0x47	; 71
    2cb2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cb6:	18 16       	cp	r1, r24
    2cb8:	4c f5       	brge	.+82     	; 0x2d0c <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cba:	69 8d       	ldd	r22, Y+25	; 0x19
    2cbc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2cbe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cc0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cc2:	20 e0       	ldi	r18, 0x00	; 0
    2cc4:	30 e0       	ldi	r19, 0x00	; 0
    2cc6:	40 e2       	ldi	r20, 0x20	; 32
    2cc8:	51 e4       	ldi	r21, 0x41	; 65
    2cca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cce:	dc 01       	movw	r26, r24
    2cd0:	cb 01       	movw	r24, r22
    2cd2:	bc 01       	movw	r22, r24
    2cd4:	cd 01       	movw	r24, r26
    2cd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cda:	dc 01       	movw	r26, r24
    2cdc:	cb 01       	movw	r24, r22
    2cde:	9c 8b       	std	Y+20, r25	; 0x14
    2ce0:	8b 8b       	std	Y+19, r24	; 0x13
    2ce2:	0f c0       	rjmp	.+30     	; 0x2d02 <LCD_displayCharacter+0x7be>
    2ce4:	88 ec       	ldi	r24, 0xC8	; 200
    2ce6:	90 e0       	ldi	r25, 0x00	; 0
    2ce8:	9a 8b       	std	Y+18, r25	; 0x12
    2cea:	89 8b       	std	Y+17, r24	; 0x11
    2cec:	89 89       	ldd	r24, Y+17	; 0x11
    2cee:	9a 89       	ldd	r25, Y+18	; 0x12
    2cf0:	01 97       	sbiw	r24, 0x01	; 1
    2cf2:	f1 f7       	brne	.-4      	; 0x2cf0 <LCD_displayCharacter+0x7ac>
    2cf4:	9a 8b       	std	Y+18, r25	; 0x12
    2cf6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cf8:	8b 89       	ldd	r24, Y+19	; 0x13
    2cfa:	9c 89       	ldd	r25, Y+20	; 0x14
    2cfc:	01 97       	sbiw	r24, 0x01	; 1
    2cfe:	9c 8b       	std	Y+20, r25	; 0x14
    2d00:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d02:	8b 89       	ldd	r24, Y+19	; 0x13
    2d04:	9c 89       	ldd	r25, Y+20	; 0x14
    2d06:	00 97       	sbiw	r24, 0x00	; 0
    2d08:	69 f7       	brne	.-38     	; 0x2ce4 <LCD_displayCharacter+0x7a0>
    2d0a:	14 c0       	rjmp	.+40     	; 0x2d34 <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d0c:	6d 89       	ldd	r22, Y+21	; 0x15
    2d0e:	7e 89       	ldd	r23, Y+22	; 0x16
    2d10:	8f 89       	ldd	r24, Y+23	; 0x17
    2d12:	98 8d       	ldd	r25, Y+24	; 0x18
    2d14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d18:	dc 01       	movw	r26, r24
    2d1a:	cb 01       	movw	r24, r22
    2d1c:	9c 8b       	std	Y+20, r25	; 0x14
    2d1e:	8b 8b       	std	Y+19, r24	; 0x13
    2d20:	8b 89       	ldd	r24, Y+19	; 0x13
    2d22:	9c 89       	ldd	r25, Y+20	; 0x14
    2d24:	98 8b       	std	Y+16, r25	; 0x10
    2d26:	8f 87       	std	Y+15, r24	; 0x0f
    2d28:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d2a:	98 89       	ldd	r25, Y+16	; 0x10
    2d2c:	01 97       	sbiw	r24, 0x01	; 1
    2d2e:	f1 f7       	brne	.-4      	; 0x2d2c <LCD_displayCharacter+0x7e8>
    2d30:	98 8b       	std	Y+16, r25	; 0x10
    2d32:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2d34:	83 e0       	ldi	r24, 0x03	; 3
    2d36:	64 e0       	ldi	r22, 0x04	; 4
    2d38:	40 e0       	ldi	r20, 0x00	; 0
    2d3a:	0e 94 22 0b 	call	0x1644	; 0x1644 <GPIO_writePin>
    2d3e:	80 e0       	ldi	r24, 0x00	; 0
    2d40:	90 e0       	ldi	r25, 0x00	; 0
    2d42:	a0 e8       	ldi	r26, 0x80	; 128
    2d44:	bf e3       	ldi	r27, 0x3F	; 63
    2d46:	8b 87       	std	Y+11, r24	; 0x0b
    2d48:	9c 87       	std	Y+12, r25	; 0x0c
    2d4a:	ad 87       	std	Y+13, r26	; 0x0d
    2d4c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d4e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d50:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d52:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d54:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d56:	20 e0       	ldi	r18, 0x00	; 0
    2d58:	30 e0       	ldi	r19, 0x00	; 0
    2d5a:	4a ef       	ldi	r20, 0xFA	; 250
    2d5c:	54 e4       	ldi	r21, 0x44	; 68
    2d5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d62:	dc 01       	movw	r26, r24
    2d64:	cb 01       	movw	r24, r22
    2d66:	8f 83       	std	Y+7, r24	; 0x07
    2d68:	98 87       	std	Y+8, r25	; 0x08
    2d6a:	a9 87       	std	Y+9, r26	; 0x09
    2d6c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d6e:	6f 81       	ldd	r22, Y+7	; 0x07
    2d70:	78 85       	ldd	r23, Y+8	; 0x08
    2d72:	89 85       	ldd	r24, Y+9	; 0x09
    2d74:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d76:	20 e0       	ldi	r18, 0x00	; 0
    2d78:	30 e0       	ldi	r19, 0x00	; 0
    2d7a:	40 e8       	ldi	r20, 0x80	; 128
    2d7c:	5f e3       	ldi	r21, 0x3F	; 63
    2d7e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d82:	88 23       	and	r24, r24
    2d84:	2c f4       	brge	.+10     	; 0x2d90 <LCD_displayCharacter+0x84c>
		__ticks = 1;
    2d86:	81 e0       	ldi	r24, 0x01	; 1
    2d88:	90 e0       	ldi	r25, 0x00	; 0
    2d8a:	9e 83       	std	Y+6, r25	; 0x06
    2d8c:	8d 83       	std	Y+5, r24	; 0x05
    2d8e:	3f c0       	rjmp	.+126    	; 0x2e0e <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    2d90:	6f 81       	ldd	r22, Y+7	; 0x07
    2d92:	78 85       	ldd	r23, Y+8	; 0x08
    2d94:	89 85       	ldd	r24, Y+9	; 0x09
    2d96:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d98:	20 e0       	ldi	r18, 0x00	; 0
    2d9a:	3f ef       	ldi	r19, 0xFF	; 255
    2d9c:	4f e7       	ldi	r20, 0x7F	; 127
    2d9e:	57 e4       	ldi	r21, 0x47	; 71
    2da0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2da4:	18 16       	cp	r1, r24
    2da6:	4c f5       	brge	.+82     	; 0x2dfa <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2da8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2daa:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dac:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dae:	9e 85       	ldd	r25, Y+14	; 0x0e
    2db0:	20 e0       	ldi	r18, 0x00	; 0
    2db2:	30 e0       	ldi	r19, 0x00	; 0
    2db4:	40 e2       	ldi	r20, 0x20	; 32
    2db6:	51 e4       	ldi	r21, 0x41	; 65
    2db8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dbc:	dc 01       	movw	r26, r24
    2dbe:	cb 01       	movw	r24, r22
    2dc0:	bc 01       	movw	r22, r24
    2dc2:	cd 01       	movw	r24, r26
    2dc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dc8:	dc 01       	movw	r26, r24
    2dca:	cb 01       	movw	r24, r22
    2dcc:	9e 83       	std	Y+6, r25	; 0x06
    2dce:	8d 83       	std	Y+5, r24	; 0x05
    2dd0:	0f c0       	rjmp	.+30     	; 0x2df0 <LCD_displayCharacter+0x8ac>
    2dd2:	88 ec       	ldi	r24, 0xC8	; 200
    2dd4:	90 e0       	ldi	r25, 0x00	; 0
    2dd6:	9c 83       	std	Y+4, r25	; 0x04
    2dd8:	8b 83       	std	Y+3, r24	; 0x03
    2dda:	8b 81       	ldd	r24, Y+3	; 0x03
    2ddc:	9c 81       	ldd	r25, Y+4	; 0x04
    2dde:	01 97       	sbiw	r24, 0x01	; 1
    2de0:	f1 f7       	brne	.-4      	; 0x2dde <LCD_displayCharacter+0x89a>
    2de2:	9c 83       	std	Y+4, r25	; 0x04
    2de4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2de6:	8d 81       	ldd	r24, Y+5	; 0x05
    2de8:	9e 81       	ldd	r25, Y+6	; 0x06
    2dea:	01 97       	sbiw	r24, 0x01	; 1
    2dec:	9e 83       	std	Y+6, r25	; 0x06
    2dee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2df0:	8d 81       	ldd	r24, Y+5	; 0x05
    2df2:	9e 81       	ldd	r25, Y+6	; 0x06
    2df4:	00 97       	sbiw	r24, 0x00	; 0
    2df6:	69 f7       	brne	.-38     	; 0x2dd2 <LCD_displayCharacter+0x88e>
    2df8:	14 c0       	rjmp	.+40     	; 0x2e22 <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dfa:	6f 81       	ldd	r22, Y+7	; 0x07
    2dfc:	78 85       	ldd	r23, Y+8	; 0x08
    2dfe:	89 85       	ldd	r24, Y+9	; 0x09
    2e00:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e06:	dc 01       	movw	r26, r24
    2e08:	cb 01       	movw	r24, r22
    2e0a:	9e 83       	std	Y+6, r25	; 0x06
    2e0c:	8d 83       	std	Y+5, r24	; 0x05
    2e0e:	8d 81       	ldd	r24, Y+5	; 0x05
    2e10:	9e 81       	ldd	r25, Y+6	; 0x06
    2e12:	9a 83       	std	Y+2, r25	; 0x02
    2e14:	89 83       	std	Y+1, r24	; 0x01
    2e16:	89 81       	ldd	r24, Y+1	; 0x01
    2e18:	9a 81       	ldd	r25, Y+2	; 0x02
    2e1a:	01 97       	sbiw	r24, 0x01	; 1
    2e1c:	f1 f7       	brne	.-4      	; 0x2e1a <LCD_displayCharacter+0x8d6>
    2e1e:	9a 83       	std	Y+2, r25	; 0x02
    2e20:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2e22:	cd 59       	subi	r28, 0x9D	; 157
    2e24:	df 4f       	sbci	r29, 0xFF	; 255
    2e26:	0f b6       	in	r0, 0x3f	; 63
    2e28:	f8 94       	cli
    2e2a:	de bf       	out	0x3e, r29	; 62
    2e2c:	0f be       	out	0x3f, r0	; 63
    2e2e:	cd bf       	out	0x3d, r28	; 61
    2e30:	cf 91       	pop	r28
    2e32:	df 91       	pop	r29
    2e34:	1f 91       	pop	r17
    2e36:	0f 91       	pop	r16
    2e38:	08 95       	ret

00002e3a <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2e3a:	df 93       	push	r29
    2e3c:	cf 93       	push	r28
    2e3e:	00 d0       	rcall	.+0      	; 0x2e40 <LCD_displayString+0x6>
    2e40:	0f 92       	push	r0
    2e42:	cd b7       	in	r28, 0x3d	; 61
    2e44:	de b7       	in	r29, 0x3e	; 62
    2e46:	9b 83       	std	Y+3, r25	; 0x03
    2e48:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2e4a:	19 82       	std	Y+1, r1	; 0x01
    2e4c:	0e c0       	rjmp	.+28     	; 0x2e6a <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2e4e:	89 81       	ldd	r24, Y+1	; 0x01
    2e50:	28 2f       	mov	r18, r24
    2e52:	30 e0       	ldi	r19, 0x00	; 0
    2e54:	8a 81       	ldd	r24, Y+2	; 0x02
    2e56:	9b 81       	ldd	r25, Y+3	; 0x03
    2e58:	fc 01       	movw	r30, r24
    2e5a:	e2 0f       	add	r30, r18
    2e5c:	f3 1f       	adc	r31, r19
    2e5e:	80 81       	ld	r24, Z
    2e60:	0e 94 a2 12 	call	0x2544	; 0x2544 <LCD_displayCharacter>
		i++;
    2e64:	89 81       	ldd	r24, Y+1	; 0x01
    2e66:	8f 5f       	subi	r24, 0xFF	; 255
    2e68:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2e6a:	89 81       	ldd	r24, Y+1	; 0x01
    2e6c:	28 2f       	mov	r18, r24
    2e6e:	30 e0       	ldi	r19, 0x00	; 0
    2e70:	8a 81       	ldd	r24, Y+2	; 0x02
    2e72:	9b 81       	ldd	r25, Y+3	; 0x03
    2e74:	fc 01       	movw	r30, r24
    2e76:	e2 0f       	add	r30, r18
    2e78:	f3 1f       	adc	r31, r19
    2e7a:	80 81       	ld	r24, Z
    2e7c:	88 23       	and	r24, r24
    2e7e:	39 f7       	brne	.-50     	; 0x2e4e <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2e80:	0f 90       	pop	r0
    2e82:	0f 90       	pop	r0
    2e84:	0f 90       	pop	r0
    2e86:	cf 91       	pop	r28
    2e88:	df 91       	pop	r29
    2e8a:	08 95       	ret

00002e8c <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2e8c:	df 93       	push	r29
    2e8e:	cf 93       	push	r28
    2e90:	00 d0       	rcall	.+0      	; 0x2e92 <LCD_moveCursor+0x6>
    2e92:	00 d0       	rcall	.+0      	; 0x2e94 <LCD_moveCursor+0x8>
    2e94:	0f 92       	push	r0
    2e96:	cd b7       	in	r28, 0x3d	; 61
    2e98:	de b7       	in	r29, 0x3e	; 62
    2e9a:	8a 83       	std	Y+2, r24	; 0x02
    2e9c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2e9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2ea0:	28 2f       	mov	r18, r24
    2ea2:	30 e0       	ldi	r19, 0x00	; 0
    2ea4:	3d 83       	std	Y+5, r19	; 0x05
    2ea6:	2c 83       	std	Y+4, r18	; 0x04
    2ea8:	8c 81       	ldd	r24, Y+4	; 0x04
    2eaa:	9d 81       	ldd	r25, Y+5	; 0x05
    2eac:	81 30       	cpi	r24, 0x01	; 1
    2eae:	91 05       	cpc	r25, r1
    2eb0:	c1 f0       	breq	.+48     	; 0x2ee2 <LCD_moveCursor+0x56>
    2eb2:	2c 81       	ldd	r18, Y+4	; 0x04
    2eb4:	3d 81       	ldd	r19, Y+5	; 0x05
    2eb6:	22 30       	cpi	r18, 0x02	; 2
    2eb8:	31 05       	cpc	r19, r1
    2eba:	2c f4       	brge	.+10     	; 0x2ec6 <LCD_moveCursor+0x3a>
    2ebc:	8c 81       	ldd	r24, Y+4	; 0x04
    2ebe:	9d 81       	ldd	r25, Y+5	; 0x05
    2ec0:	00 97       	sbiw	r24, 0x00	; 0
    2ec2:	61 f0       	breq	.+24     	; 0x2edc <LCD_moveCursor+0x50>
    2ec4:	19 c0       	rjmp	.+50     	; 0x2ef8 <LCD_moveCursor+0x6c>
    2ec6:	2c 81       	ldd	r18, Y+4	; 0x04
    2ec8:	3d 81       	ldd	r19, Y+5	; 0x05
    2eca:	22 30       	cpi	r18, 0x02	; 2
    2ecc:	31 05       	cpc	r19, r1
    2ece:	69 f0       	breq	.+26     	; 0x2eea <LCD_moveCursor+0x5e>
    2ed0:	8c 81       	ldd	r24, Y+4	; 0x04
    2ed2:	9d 81       	ldd	r25, Y+5	; 0x05
    2ed4:	83 30       	cpi	r24, 0x03	; 3
    2ed6:	91 05       	cpc	r25, r1
    2ed8:	61 f0       	breq	.+24     	; 0x2ef2 <LCD_moveCursor+0x66>
    2eda:	0e c0       	rjmp	.+28     	; 0x2ef8 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2edc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ede:	89 83       	std	Y+1, r24	; 0x01
    2ee0:	0b c0       	rjmp	.+22     	; 0x2ef8 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2ee2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ee4:	80 5c       	subi	r24, 0xC0	; 192
    2ee6:	89 83       	std	Y+1, r24	; 0x01
    2ee8:	07 c0       	rjmp	.+14     	; 0x2ef8 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2eea:	8b 81       	ldd	r24, Y+3	; 0x03
    2eec:	80 5f       	subi	r24, 0xF0	; 240
    2eee:	89 83       	std	Y+1, r24	; 0x01
    2ef0:	03 c0       	rjmp	.+6      	; 0x2ef8 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2ef2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ef4:	80 5b       	subi	r24, 0xB0	; 176
    2ef6:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2ef8:	89 81       	ldd	r24, Y+1	; 0x01
    2efa:	80 68       	ori	r24, 0x80	; 128
    2efc:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <LCD_sendCommand>
}
    2f00:	0f 90       	pop	r0
    2f02:	0f 90       	pop	r0
    2f04:	0f 90       	pop	r0
    2f06:	0f 90       	pop	r0
    2f08:	0f 90       	pop	r0
    2f0a:	cf 91       	pop	r28
    2f0c:	df 91       	pop	r29
    2f0e:	08 95       	ret

00002f10 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2f10:	df 93       	push	r29
    2f12:	cf 93       	push	r28
    2f14:	00 d0       	rcall	.+0      	; 0x2f16 <LCD_displayStringRowColumn+0x6>
    2f16:	00 d0       	rcall	.+0      	; 0x2f18 <LCD_displayStringRowColumn+0x8>
    2f18:	cd b7       	in	r28, 0x3d	; 61
    2f1a:	de b7       	in	r29, 0x3e	; 62
    2f1c:	89 83       	std	Y+1, r24	; 0x01
    2f1e:	6a 83       	std	Y+2, r22	; 0x02
    2f20:	5c 83       	std	Y+4, r21	; 0x04
    2f22:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2f24:	89 81       	ldd	r24, Y+1	; 0x01
    2f26:	6a 81       	ldd	r22, Y+2	; 0x02
    2f28:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2f2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f2e:	9c 81       	ldd	r25, Y+4	; 0x04
    2f30:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <LCD_displayString>
}
    2f34:	0f 90       	pop	r0
    2f36:	0f 90       	pop	r0
    2f38:	0f 90       	pop	r0
    2f3a:	0f 90       	pop	r0
    2f3c:	cf 91       	pop	r28
    2f3e:	df 91       	pop	r29
    2f40:	08 95       	ret

00002f42 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2f42:	df 93       	push	r29
    2f44:	cf 93       	push	r28
    2f46:	cd b7       	in	r28, 0x3d	; 61
    2f48:	de b7       	in	r29, 0x3e	; 62
    2f4a:	62 97       	sbiw	r28, 0x12	; 18
    2f4c:	0f b6       	in	r0, 0x3f	; 63
    2f4e:	f8 94       	cli
    2f50:	de bf       	out	0x3e, r29	; 62
    2f52:	0f be       	out	0x3f, r0	; 63
    2f54:	cd bf       	out	0x3d, r28	; 61
    2f56:	9a 8b       	std	Y+18, r25	; 0x12
    2f58:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2f5a:	89 89       	ldd	r24, Y+17	; 0x11
    2f5c:	9a 89       	ldd	r25, Y+18	; 0x12
    2f5e:	9e 01       	movw	r18, r28
    2f60:	2f 5f       	subi	r18, 0xFF	; 255
    2f62:	3f 4f       	sbci	r19, 0xFF	; 255
    2f64:	b9 01       	movw	r22, r18
    2f66:	4a e0       	ldi	r20, 0x0A	; 10
    2f68:	50 e0       	ldi	r21, 0x00	; 0
    2f6a:	0e 94 05 18 	call	0x300a	; 0x300a <itoa>
   LCD_displayString(buff); /* Display the string */
    2f6e:	ce 01       	movw	r24, r28
    2f70:	01 96       	adiw	r24, 0x01	; 1
    2f72:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <LCD_displayString>
}
    2f76:	62 96       	adiw	r28, 0x12	; 18
    2f78:	0f b6       	in	r0, 0x3f	; 63
    2f7a:	f8 94       	cli
    2f7c:	de bf       	out	0x3e, r29	; 62
    2f7e:	0f be       	out	0x3f, r0	; 63
    2f80:	cd bf       	out	0x3d, r28	; 61
    2f82:	cf 91       	pop	r28
    2f84:	df 91       	pop	r29
    2f86:	08 95       	ret

00002f88 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2f88:	df 93       	push	r29
    2f8a:	cf 93       	push	r28
    2f8c:	cd b7       	in	r28, 0x3d	; 61
    2f8e:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2f90:	81 e0       	ldi	r24, 0x01	; 1
    2f92:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <LCD_sendCommand>
}
    2f96:	cf 91       	pop	r28
    2f98:	df 91       	pop	r29
    2f9a:	08 95       	ret

00002f9c <__prologue_saves__>:
    2f9c:	2f 92       	push	r2
    2f9e:	3f 92       	push	r3
    2fa0:	4f 92       	push	r4
    2fa2:	5f 92       	push	r5
    2fa4:	6f 92       	push	r6
    2fa6:	7f 92       	push	r7
    2fa8:	8f 92       	push	r8
    2faa:	9f 92       	push	r9
    2fac:	af 92       	push	r10
    2fae:	bf 92       	push	r11
    2fb0:	cf 92       	push	r12
    2fb2:	df 92       	push	r13
    2fb4:	ef 92       	push	r14
    2fb6:	ff 92       	push	r15
    2fb8:	0f 93       	push	r16
    2fba:	1f 93       	push	r17
    2fbc:	cf 93       	push	r28
    2fbe:	df 93       	push	r29
    2fc0:	cd b7       	in	r28, 0x3d	; 61
    2fc2:	de b7       	in	r29, 0x3e	; 62
    2fc4:	ca 1b       	sub	r28, r26
    2fc6:	db 0b       	sbc	r29, r27
    2fc8:	0f b6       	in	r0, 0x3f	; 63
    2fca:	f8 94       	cli
    2fcc:	de bf       	out	0x3e, r29	; 62
    2fce:	0f be       	out	0x3f, r0	; 63
    2fd0:	cd bf       	out	0x3d, r28	; 61
    2fd2:	09 94       	ijmp

00002fd4 <__epilogue_restores__>:
    2fd4:	2a 88       	ldd	r2, Y+18	; 0x12
    2fd6:	39 88       	ldd	r3, Y+17	; 0x11
    2fd8:	48 88       	ldd	r4, Y+16	; 0x10
    2fda:	5f 84       	ldd	r5, Y+15	; 0x0f
    2fdc:	6e 84       	ldd	r6, Y+14	; 0x0e
    2fde:	7d 84       	ldd	r7, Y+13	; 0x0d
    2fe0:	8c 84       	ldd	r8, Y+12	; 0x0c
    2fe2:	9b 84       	ldd	r9, Y+11	; 0x0b
    2fe4:	aa 84       	ldd	r10, Y+10	; 0x0a
    2fe6:	b9 84       	ldd	r11, Y+9	; 0x09
    2fe8:	c8 84       	ldd	r12, Y+8	; 0x08
    2fea:	df 80       	ldd	r13, Y+7	; 0x07
    2fec:	ee 80       	ldd	r14, Y+6	; 0x06
    2fee:	fd 80       	ldd	r15, Y+5	; 0x05
    2ff0:	0c 81       	ldd	r16, Y+4	; 0x04
    2ff2:	1b 81       	ldd	r17, Y+3	; 0x03
    2ff4:	aa 81       	ldd	r26, Y+2	; 0x02
    2ff6:	b9 81       	ldd	r27, Y+1	; 0x01
    2ff8:	ce 0f       	add	r28, r30
    2ffa:	d1 1d       	adc	r29, r1
    2ffc:	0f b6       	in	r0, 0x3f	; 63
    2ffe:	f8 94       	cli
    3000:	de bf       	out	0x3e, r29	; 62
    3002:	0f be       	out	0x3f, r0	; 63
    3004:	cd bf       	out	0x3d, r28	; 61
    3006:	ed 01       	movw	r28, r26
    3008:	08 95       	ret

0000300a <itoa>:
    300a:	fb 01       	movw	r30, r22
    300c:	9f 01       	movw	r18, r30
    300e:	e8 94       	clt
    3010:	42 30       	cpi	r20, 0x02	; 2
    3012:	c4 f0       	brlt	.+48     	; 0x3044 <itoa+0x3a>
    3014:	45 32       	cpi	r20, 0x25	; 37
    3016:	b4 f4       	brge	.+44     	; 0x3044 <itoa+0x3a>
    3018:	4a 30       	cpi	r20, 0x0A	; 10
    301a:	29 f4       	brne	.+10     	; 0x3026 <itoa+0x1c>
    301c:	97 fb       	bst	r25, 7
    301e:	1e f4       	brtc	.+6      	; 0x3026 <itoa+0x1c>
    3020:	90 95       	com	r25
    3022:	81 95       	neg	r24
    3024:	9f 4f       	sbci	r25, 0xFF	; 255
    3026:	64 2f       	mov	r22, r20
    3028:	77 27       	eor	r23, r23
    302a:	0e 94 36 18 	call	0x306c	; 0x306c <__udivmodhi4>
    302e:	80 5d       	subi	r24, 0xD0	; 208
    3030:	8a 33       	cpi	r24, 0x3A	; 58
    3032:	0c f0       	brlt	.+2      	; 0x3036 <itoa+0x2c>
    3034:	89 5d       	subi	r24, 0xD9	; 217
    3036:	81 93       	st	Z+, r24
    3038:	cb 01       	movw	r24, r22
    303a:	00 97       	sbiw	r24, 0x00	; 0
    303c:	a1 f7       	brne	.-24     	; 0x3026 <itoa+0x1c>
    303e:	16 f4       	brtc	.+4      	; 0x3044 <itoa+0x3a>
    3040:	5d e2       	ldi	r21, 0x2D	; 45
    3042:	51 93       	st	Z+, r21
    3044:	10 82       	st	Z, r1
    3046:	c9 01       	movw	r24, r18
    3048:	0c 94 26 18 	jmp	0x304c	; 0x304c <strrev>

0000304c <strrev>:
    304c:	dc 01       	movw	r26, r24
    304e:	fc 01       	movw	r30, r24
    3050:	67 2f       	mov	r22, r23
    3052:	71 91       	ld	r23, Z+
    3054:	77 23       	and	r23, r23
    3056:	e1 f7       	brne	.-8      	; 0x3050 <strrev+0x4>
    3058:	32 97       	sbiw	r30, 0x02	; 2
    305a:	04 c0       	rjmp	.+8      	; 0x3064 <strrev+0x18>
    305c:	7c 91       	ld	r23, X
    305e:	6d 93       	st	X+, r22
    3060:	70 83       	st	Z, r23
    3062:	62 91       	ld	r22, -Z
    3064:	ae 17       	cp	r26, r30
    3066:	bf 07       	cpc	r27, r31
    3068:	c8 f3       	brcs	.-14     	; 0x305c <strrev+0x10>
    306a:	08 95       	ret

0000306c <__udivmodhi4>:
    306c:	aa 1b       	sub	r26, r26
    306e:	bb 1b       	sub	r27, r27
    3070:	51 e1       	ldi	r21, 0x11	; 17
    3072:	07 c0       	rjmp	.+14     	; 0x3082 <__udivmodhi4_ep>

00003074 <__udivmodhi4_loop>:
    3074:	aa 1f       	adc	r26, r26
    3076:	bb 1f       	adc	r27, r27
    3078:	a6 17       	cp	r26, r22
    307a:	b7 07       	cpc	r27, r23
    307c:	10 f0       	brcs	.+4      	; 0x3082 <__udivmodhi4_ep>
    307e:	a6 1b       	sub	r26, r22
    3080:	b7 0b       	sbc	r27, r23

00003082 <__udivmodhi4_ep>:
    3082:	88 1f       	adc	r24, r24
    3084:	99 1f       	adc	r25, r25
    3086:	5a 95       	dec	r21
    3088:	a9 f7       	brne	.-22     	; 0x3074 <__udivmodhi4_loop>
    308a:	80 95       	com	r24
    308c:	90 95       	com	r25
    308e:	bc 01       	movw	r22, r24
    3090:	cd 01       	movw	r24, r26
    3092:	08 95       	ret

00003094 <_exit>:
    3094:	f8 94       	cli

00003096 <__stop_program>:
    3096:	ff cf       	rjmp	.-2      	; 0x3096 <__stop_program>
