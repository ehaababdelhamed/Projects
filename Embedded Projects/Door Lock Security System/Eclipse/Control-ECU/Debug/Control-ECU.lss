
Control-ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000026be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  000026be  00002752  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800076  00800076  00002768  2**0
                  ALLOC
  3 .stab         00002754  00000000  00000000  00002768  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001343  00000000  00000000  00004ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000061ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000633f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000064af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000080f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008fe3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009d90  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a17d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a94b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 42 0f 	jmp	0x1e84	; 0x1e84 <__vector_3>
      10:	0c 94 75 0f 	jmp	0x1eea	; 0x1eea <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 dc 0e 	jmp	0x1db8	; 0x1db8 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 0f 0f 	jmp	0x1e1e	; 0x1e1e <__vector_8>
      24:	0c 94 a9 0e 	jmp	0x1d52	; 0x1d52 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 76 0e 	jmp	0x1cec	; 0x1cec <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee eb       	ldi	r30, 0xBE	; 190
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 37       	cpi	r26, 0x76	; 118
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 e7       	ldi	r26, 0x76	; 118
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 38       	cpi	r26, 0x86	; 134
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <main>
      8a:	0c 94 5d 13 	jmp	0x26ba	; 0x26ba <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 26 13 	jmp	0x264c	; 0x264c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 42 13 	jmp	0x2684	; 0x2684 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 32 13 	jmp	0x2664	; 0x2664 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 4e 13 	jmp	0x269c	; 0x269c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 32 13 	jmp	0x2664	; 0x2664 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 4e 13 	jmp	0x269c	; 0x269c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 26 13 	jmp	0x264c	; 0x264c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 42 13 	jmp	0x2684	; 0x2684 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 32 13 	jmp	0x2664	; 0x2664 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 4e 13 	jmp	0x269c	; 0x269c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 32 13 	jmp	0x2664	; 0x2664 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 4e 13 	jmp	0x269c	; 0x269c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 32 13 	jmp	0x2664	; 0x2664 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 4e 13 	jmp	0x269c	; 0x269c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 36 13 	jmp	0x266c	; 0x266c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 52 13 	jmp	0x26a4	; 0x26a4 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <OpenDoorticks>:

/*
 * Description: call back Function by timer to calcuate time of door open
 */

void OpenDoorticks(void) {
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	ticks++;
     b4e:	80 91 7c 00 	lds	r24, 0x007C
     b52:	90 91 7d 00 	lds	r25, 0x007D
     b56:	a0 91 7e 00 	lds	r26, 0x007E
     b5a:	b0 91 7f 00 	lds	r27, 0x007F
     b5e:	01 96       	adiw	r24, 0x01	; 1
     b60:	a1 1d       	adc	r26, r1
     b62:	b1 1d       	adc	r27, r1
     b64:	80 93 7c 00 	sts	0x007C, r24
     b68:	90 93 7d 00 	sts	0x007D, r25
     b6c:	a0 93 7e 00 	sts	0x007E, r26
     b70:	b0 93 7f 00 	sts	0x007F, r27
	/*disable timer and turn off motor after 33 seconds */
	if (ticks > TIMEOFCLOSEDOOR * NUMBEROFTICKSPERSECOND) {
     b74:	80 91 7c 00 	lds	r24, 0x007C
     b78:	90 91 7d 00 	lds	r25, 0x007D
     b7c:	a0 91 7e 00 	lds	r26, 0x007E
     b80:	b0 91 7f 00 	lds	r27, 0x007F
     b84:	85 38       	cpi	r24, 0x85	; 133
     b86:	91 05       	cpc	r25, r1
     b88:	a1 05       	cpc	r26, r1
     b8a:	b1 05       	cpc	r27, r1
     b8c:	70 f0       	brcs	.+28     	; 0xbaa <OpenDoorticks+0x64>
		DcMotor_Rotate(OFF);
     b8e:	80 e0       	ldi	r24, 0x00	; 0
     b90:	0e 94 57 0a 	call	0x14ae	; 0x14ae <DcMotor_Rotate>
		ticks = 0;
     b94:	10 92 7c 00 	sts	0x007C, r1
     b98:	10 92 7d 00 	sts	0x007D, r1
     b9c:	10 92 7e 00 	sts	0x007E, r1
     ba0:	10 92 7f 00 	sts	0x007F, r1
		Timer_deInit(TIMER_0);
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <Timer_deInit>
	}
}
     baa:	cf 91       	pop	r28
     bac:	df 91       	pop	r29
     bae:	08 95       	ret

00000bb0 <OpenDoor>:
 * 15 seconds CW (OPEN)
 * 3 seconds hold (HOLD)
 * 15 seconds ACW (CLOSE)
 */

void OpenDoor(void) {
     bb0:	df 93       	push	r29
     bb2:	cf 93       	push	r28
     bb4:	cd b7       	in	r28, 0x3d	; 61
     bb6:	de b7       	in	r29, 0x3e	; 62
     bb8:	4c c0       	rjmp	.+152    	; 0xc52 <OpenDoor+0xa2>
	while (ticks < TIMEOFCLOSEDOOR * NUMBEROFTICKSPERSECOND) {
		if (ticks < TIMEOFOPENDOOR * NUMBEROFTICKSPERSECOND) {
     bba:	80 91 7c 00 	lds	r24, 0x007C
     bbe:	90 91 7d 00 	lds	r25, 0x007D
     bc2:	a0 91 7e 00 	lds	r26, 0x007E
     bc6:	b0 91 7f 00 	lds	r27, 0x007F
     bca:	8c 33       	cpi	r24, 0x3C	; 60
     bcc:	91 05       	cpc	r25, r1
     bce:	a1 05       	cpc	r26, r1
     bd0:	b1 05       	cpc	r27, r1
     bd2:	20 f4       	brcc	.+8      	; 0xbdc <OpenDoor+0x2c>
			DcMotor_Rotate(ON_CW);
     bd4:	81 e0       	ldi	r24, 0x01	; 1
     bd6:	0e 94 57 0a 	call	0x14ae	; 0x14ae <DcMotor_Rotate>
     bda:	3b c0       	rjmp	.+118    	; 0xc52 <OpenDoor+0xa2>
		} else if (ticks < TIMEOFHOLDEDOOR * NUMBEROFTICKSPERSECOND
     bdc:	80 91 7c 00 	lds	r24, 0x007C
     be0:	90 91 7d 00 	lds	r25, 0x007D
     be4:	a0 91 7e 00 	lds	r26, 0x007E
     be8:	b0 91 7f 00 	lds	r27, 0x007F
     bec:	88 34       	cpi	r24, 0x48	; 72
     bee:	91 05       	cpc	r25, r1
     bf0:	a1 05       	cpc	r26, r1
     bf2:	b1 05       	cpc	r27, r1
     bf4:	88 f4       	brcc	.+34     	; 0xc18 <OpenDoor+0x68>
     bf6:	80 91 7c 00 	lds	r24, 0x007C
     bfa:	90 91 7d 00 	lds	r25, 0x007D
     bfe:	a0 91 7e 00 	lds	r26, 0x007E
     c02:	b0 91 7f 00 	lds	r27, 0x007F
     c06:	8d 33       	cpi	r24, 0x3D	; 61
     c08:	91 05       	cpc	r25, r1
     c0a:	a1 05       	cpc	r26, r1
     c0c:	b1 05       	cpc	r27, r1
     c0e:	20 f0       	brcs	.+8      	; 0xc18 <OpenDoor+0x68>
				&& ticks > TIMEOFOPENDOOR * NUMBEROFTICKSPERSECOND) {
			DcMotor_Rotate(OFF);
     c10:	80 e0       	ldi	r24, 0x00	; 0
     c12:	0e 94 57 0a 	call	0x14ae	; 0x14ae <DcMotor_Rotate>
     c16:	1d c0       	rjmp	.+58     	; 0xc52 <OpenDoor+0xa2>
		} else if (ticks < TIMEOFCLOSEDOOR * NUMBEROFTICKSPERSECOND
     c18:	80 91 7c 00 	lds	r24, 0x007C
     c1c:	90 91 7d 00 	lds	r25, 0x007D
     c20:	a0 91 7e 00 	lds	r26, 0x007E
     c24:	b0 91 7f 00 	lds	r27, 0x007F
     c28:	84 38       	cpi	r24, 0x84	; 132
     c2a:	91 05       	cpc	r25, r1
     c2c:	a1 05       	cpc	r26, r1
     c2e:	b1 05       	cpc	r27, r1
     c30:	80 f4       	brcc	.+32     	; 0xc52 <OpenDoor+0xa2>
     c32:	80 91 7c 00 	lds	r24, 0x007C
     c36:	90 91 7d 00 	lds	r25, 0x007D
     c3a:	a0 91 7e 00 	lds	r26, 0x007E
     c3e:	b0 91 7f 00 	lds	r27, 0x007F
     c42:	89 34       	cpi	r24, 0x49	; 73
     c44:	91 05       	cpc	r25, r1
     c46:	a1 05       	cpc	r26, r1
     c48:	b1 05       	cpc	r27, r1
     c4a:	18 f0       	brcs	.+6      	; 0xc52 <OpenDoor+0xa2>
				&& ticks > TIMEOFHOLDEDOOR * NUMBEROFTICKSPERSECOND) {
			DcMotor_Rotate(ON_ACW);
     c4c:	82 e0       	ldi	r24, 0x02	; 2
     c4e:	0e 94 57 0a 	call	0x14ae	; 0x14ae <DcMotor_Rotate>
 * 3 seconds hold (HOLD)
 * 15 seconds ACW (CLOSE)
 */

void OpenDoor(void) {
	while (ticks < TIMEOFCLOSEDOOR * NUMBEROFTICKSPERSECOND) {
     c52:	80 91 7c 00 	lds	r24, 0x007C
     c56:	90 91 7d 00 	lds	r25, 0x007D
     c5a:	a0 91 7e 00 	lds	r26, 0x007E
     c5e:	b0 91 7f 00 	lds	r27, 0x007F
     c62:	84 38       	cpi	r24, 0x84	; 132
     c64:	91 05       	cpc	r25, r1
     c66:	a1 05       	cpc	r26, r1
     c68:	b1 05       	cpc	r27, r1
     c6a:	08 f4       	brcc	.+2      	; 0xc6e <OpenDoor+0xbe>
     c6c:	a6 cf       	rjmp	.-180    	; 0xbba <OpenDoor+0xa>
		} else if (ticks < TIMEOFCLOSEDOOR * NUMBEROFTICKSPERSECOND
				&& ticks > TIMEOFHOLDEDOOR * NUMBEROFTICKSPERSECOND) {
			DcMotor_Rotate(ON_ACW);
		}
	}
}
     c6e:	cf 91       	pop	r28
     c70:	df 91       	pop	r29
     c72:	08 95       	ret

00000c74 <turnOnBuzzerticks>:

/*
 * Description: call back Function by timer to calcuate time of Runing Buzzer
 */

void turnOnBuzzerticks() {
     c74:	df 93       	push	r29
     c76:	cf 93       	push	r28
     c78:	cd b7       	in	r28, 0x3d	; 61
     c7a:	de b7       	in	r29, 0x3e	; 62
	ticks++;
     c7c:	80 91 7c 00 	lds	r24, 0x007C
     c80:	90 91 7d 00 	lds	r25, 0x007D
     c84:	a0 91 7e 00 	lds	r26, 0x007E
     c88:	b0 91 7f 00 	lds	r27, 0x007F
     c8c:	01 96       	adiw	r24, 0x01	; 1
     c8e:	a1 1d       	adc	r26, r1
     c90:	b1 1d       	adc	r27, r1
     c92:	80 93 7c 00 	sts	0x007C, r24
     c96:	90 93 7d 00 	sts	0x007D, r25
     c9a:	a0 93 7e 00 	sts	0x007E, r26
     c9e:	b0 93 7f 00 	sts	0x007F, r27
	/*disable timer and turn off buzzer after 1 minute*/
	if (ticks > (60 * NUMBEROFTICKSPERSECOND)) {
     ca2:	80 91 7c 00 	lds	r24, 0x007C
     ca6:	90 91 7d 00 	lds	r25, 0x007D
     caa:	a0 91 7e 00 	lds	r26, 0x007E
     cae:	b0 91 7f 00 	lds	r27, 0x007F
     cb2:	81 3f       	cpi	r24, 0xF1	; 241
     cb4:	91 05       	cpc	r25, r1
     cb6:	a1 05       	cpc	r26, r1
     cb8:	b1 05       	cpc	r27, r1
     cba:	68 f0       	brcs	.+26     	; 0xcd6 <turnOnBuzzerticks+0x62>
		ticks = 0;
     cbc:	10 92 7c 00 	sts	0x007C, r1
     cc0:	10 92 7d 00 	sts	0x007D, r1
     cc4:	10 92 7e 00 	sts	0x007E, r1
     cc8:	10 92 7f 00 	sts	0x007F, r1
		Buzzer_OFF();
     ccc:	0e 94 30 0a 	call	0x1460	; 0x1460 <Buzzer_OFF>
		Timer_deInit(TIMER_0);
     cd0:	80 e0       	ldi	r24, 0x00	; 0
     cd2:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <Timer_deInit>
	}
}
     cd6:	cf 91       	pop	r28
     cd8:	df 91       	pop	r29
     cda:	08 95       	ret

00000cdc <turnOnBuzzer>:

/*
 * Description: Function to turn on buzzer for 1 minute
 */

void turnOnBuzzer() {
     cdc:	df 93       	push	r29
     cde:	cf 93       	push	r28
     ce0:	cd b7       	in	r28, 0x3d	; 61
     ce2:	de b7       	in	r29, 0x3e	; 62
	ticks++;
     ce4:	80 91 7c 00 	lds	r24, 0x007C
     ce8:	90 91 7d 00 	lds	r25, 0x007D
     cec:	a0 91 7e 00 	lds	r26, 0x007E
     cf0:	b0 91 7f 00 	lds	r27, 0x007F
     cf4:	01 96       	adiw	r24, 0x01	; 1
     cf6:	a1 1d       	adc	r26, r1
     cf8:	b1 1d       	adc	r27, r1
     cfa:	80 93 7c 00 	sts	0x007C, r24
     cfe:	90 93 7d 00 	sts	0x007D, r25
     d02:	a0 93 7e 00 	sts	0x007E, r26
     d06:	b0 93 7f 00 	sts	0x007F, r27
     d0a:	02 c0       	rjmp	.+4      	; 0xd10 <turnOnBuzzer+0x34>
	while (ticks < 60) {
		Buzzer_ON();
     d0c:	0e 94 24 0a 	call	0x1448	; 0x1448 <Buzzer_ON>
 * Description: Function to turn on buzzer for 1 minute
 */

void turnOnBuzzer() {
	ticks++;
	while (ticks < 60) {
     d10:	80 91 7c 00 	lds	r24, 0x007C
     d14:	90 91 7d 00 	lds	r25, 0x007D
     d18:	a0 91 7e 00 	lds	r26, 0x007E
     d1c:	b0 91 7f 00 	lds	r27, 0x007F
     d20:	8c 33       	cpi	r24, 0x3C	; 60
     d22:	91 05       	cpc	r25, r1
     d24:	a1 05       	cpc	r26, r1
     d26:	b1 05       	cpc	r27, r1
     d28:	88 f3       	brcs	.-30     	; 0xd0c <turnOnBuzzer+0x30>
		Buzzer_ON();
	}
}
     d2a:	cf 91       	pop	r28
     d2c:	df 91       	pop	r29
     d2e:	08 95       	ret

00000d30 <checkIfFirstUse>:
 * check if there are password is saved at memory or not
 * send flag to HMI_ECU
 *
 */

void checkIfFirstUse(uint8 *new_password_flag) {
     d30:	df 93       	push	r29
     d32:	cf 93       	push	r28
     d34:	00 d0       	rcall	.+0      	; 0xd36 <checkIfFirstUse+0x6>
     d36:	cd b7       	in	r28, 0x3d	; 61
     d38:	de b7       	in	r29, 0x3e	; 62
     d3a:	9a 83       	std	Y+2, r25	; 0x02
     d3c:	89 83       	std	Y+1, r24	; 0x01
	EEPROM_readByte(0x0310, new_password_flag);
     d3e:	29 81       	ldd	r18, Y+1	; 0x01
     d40:	3a 81       	ldd	r19, Y+2	; 0x02
     d42:	80 e1       	ldi	r24, 0x10	; 16
     d44:	93 e0       	ldi	r25, 0x03	; 3
     d46:	b9 01       	movw	r22, r18
     d48:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <EEPROM_readByte>
	if (*new_password_flag == DEFUALTVALUE) {
     d4c:	e9 81       	ldd	r30, Y+1	; 0x01
     d4e:	fa 81       	ldd	r31, Y+2	; 0x02
     d50:	80 81       	ld	r24, Z
     d52:	8f 3f       	cpi	r24, 0xFF	; 255
     d54:	21 f4       	brne	.+8      	; 0xd5e <checkIfFirstUse+0x2e>
		*new_password_flag = 1;
     d56:	e9 81       	ldd	r30, Y+1	; 0x01
     d58:	fa 81       	ldd	r31, Y+2	; 0x02
     d5a:	81 e0       	ldi	r24, 0x01	; 1
     d5c:	80 83       	st	Z, r24
	}
	while (UART_recieveByte() != ECU2_READY) {
     d5e:	0e 94 89 12 	call	0x2512	; 0x2512 <UART_recieveByte>
     d62:	8f 3f       	cpi	r24, 0xFF	; 255
     d64:	e1 f7       	brne	.-8      	; 0xd5e <checkIfFirstUse+0x2e>
	}
	UART_sendByte(*new_password_flag);
     d66:	e9 81       	ldd	r30, Y+1	; 0x01
     d68:	fa 81       	ldd	r31, Y+2	; 0x02
     d6a:	80 81       	ld	r24, Z
     d6c:	0e 94 72 12 	call	0x24e4	; 0x24e4 <UART_sendByte>
}
     d70:	0f 90       	pop	r0
     d72:	0f 90       	pop	r0
     d74:	cf 91       	pop	r28
     d76:	df 91       	pop	r29
     d78:	08 95       	ret

00000d7a <SavePasswordeEeprom>:
 * Description: Function to save new password for the system in eeprom
 * recieve new password from HMI_ECU
 * save new password in eeprom
 */

void SavePasswordeEeprom() {
     d7a:	0f 93       	push	r16
     d7c:	1f 93       	push	r17
     d7e:	df 93       	push	r29
     d80:	cf 93       	push	r28
     d82:	cd b7       	in	r28, 0x3d	; 61
     d84:	de b7       	in	r29, 0x3e	; 62
     d86:	6e 97       	sbiw	r28, 0x1e	; 30
     d88:	0f b6       	in	r0, 0x3f	; 63
     d8a:	f8 94       	cli
     d8c:	de bf       	out	0x3e, r29	; 62
     d8e:	0f be       	out	0x3f, r0	; 63
     d90:	cd bf       	out	0x3d, r28	; 61
	UART_sendByte(ECU2_READY);
     d92:	8f ef       	ldi	r24, 0xFF	; 255
     d94:	0e 94 72 12 	call	0x24e4	; 0x24e4 <UART_sendByte>
	/*recieve password size from HMI_ECU*/
	passwordSize = UART_recieveByte();
     d98:	0e 94 89 12 	call	0x2512	; 0x2512 <UART_recieveByte>
     d9c:	80 93 76 00 	sts	0x0076, r24
	EEPROM_writeByte(0x0310, passwordSize);
     da0:	20 91 76 00 	lds	r18, 0x0076
     da4:	80 e1       	ldi	r24, 0x10	; 16
     da6:	93 e0       	ldi	r25, 0x03	; 3
     da8:	62 2f       	mov	r22, r18
     daa:	0e 94 97 0a 	call	0x152e	; 0x152e <EEPROM_writeByte>
     dae:	80 e0       	ldi	r24, 0x00	; 0
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	a0 e2       	ldi	r26, 0x20	; 32
     db4:	b1 e4       	ldi	r27, 0x41	; 65
     db6:	89 8f       	std	Y+25, r24	; 0x19
     db8:	9a 8f       	std	Y+26, r25	; 0x1a
     dba:	ab 8f       	std	Y+27, r26	; 0x1b
     dbc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dbe:	69 8d       	ldd	r22, Y+25	; 0x19
     dc0:	7a 8d       	ldd	r23, Y+26	; 0x1a
     dc2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     dc4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     dc6:	20 e0       	ldi	r18, 0x00	; 0
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	4a ef       	ldi	r20, 0xFA	; 250
     dcc:	54 e4       	ldi	r21, 0x44	; 68
     dce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dd2:	dc 01       	movw	r26, r24
     dd4:	cb 01       	movw	r24, r22
     dd6:	8d 8b       	std	Y+21, r24	; 0x15
     dd8:	9e 8b       	std	Y+22, r25	; 0x16
     dda:	af 8b       	std	Y+23, r26	; 0x17
     ddc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     dde:	6d 89       	ldd	r22, Y+21	; 0x15
     de0:	7e 89       	ldd	r23, Y+22	; 0x16
     de2:	8f 89       	ldd	r24, Y+23	; 0x17
     de4:	98 8d       	ldd	r25, Y+24	; 0x18
     de6:	20 e0       	ldi	r18, 0x00	; 0
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	40 e8       	ldi	r20, 0x80	; 128
     dec:	5f e3       	ldi	r21, 0x3F	; 63
     dee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     df2:	88 23       	and	r24, r24
     df4:	2c f4       	brge	.+10     	; 0xe00 <SavePasswordeEeprom+0x86>
		__ticks = 1;
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	9c 8b       	std	Y+20, r25	; 0x14
     dfc:	8b 8b       	std	Y+19, r24	; 0x13
     dfe:	3f c0       	rjmp	.+126    	; 0xe7e <SavePasswordeEeprom+0x104>
	else if (__tmp > 65535)
     e00:	6d 89       	ldd	r22, Y+21	; 0x15
     e02:	7e 89       	ldd	r23, Y+22	; 0x16
     e04:	8f 89       	ldd	r24, Y+23	; 0x17
     e06:	98 8d       	ldd	r25, Y+24	; 0x18
     e08:	20 e0       	ldi	r18, 0x00	; 0
     e0a:	3f ef       	ldi	r19, 0xFF	; 255
     e0c:	4f e7       	ldi	r20, 0x7F	; 127
     e0e:	57 e4       	ldi	r21, 0x47	; 71
     e10:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e14:	18 16       	cp	r1, r24
     e16:	4c f5       	brge	.+82     	; 0xe6a <SavePasswordeEeprom+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e18:	69 8d       	ldd	r22, Y+25	; 0x19
     e1a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e1c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e1e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e20:	20 e0       	ldi	r18, 0x00	; 0
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	40 e2       	ldi	r20, 0x20	; 32
     e26:	51 e4       	ldi	r21, 0x41	; 65
     e28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e2c:	dc 01       	movw	r26, r24
     e2e:	cb 01       	movw	r24, r22
     e30:	bc 01       	movw	r22, r24
     e32:	cd 01       	movw	r24, r26
     e34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e38:	dc 01       	movw	r26, r24
     e3a:	cb 01       	movw	r24, r22
     e3c:	9c 8b       	std	Y+20, r25	; 0x14
     e3e:	8b 8b       	std	Y+19, r24	; 0x13
     e40:	0f c0       	rjmp	.+30     	; 0xe60 <SavePasswordeEeprom+0xe6>
     e42:	88 ec       	ldi	r24, 0xC8	; 200
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	9a 8b       	std	Y+18, r25	; 0x12
     e48:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e4a:	89 89       	ldd	r24, Y+17	; 0x11
     e4c:	9a 89       	ldd	r25, Y+18	; 0x12
     e4e:	01 97       	sbiw	r24, 0x01	; 1
     e50:	f1 f7       	brne	.-4      	; 0xe4e <SavePasswordeEeprom+0xd4>
     e52:	9a 8b       	std	Y+18, r25	; 0x12
     e54:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e56:	8b 89       	ldd	r24, Y+19	; 0x13
     e58:	9c 89       	ldd	r25, Y+20	; 0x14
     e5a:	01 97       	sbiw	r24, 0x01	; 1
     e5c:	9c 8b       	std	Y+20, r25	; 0x14
     e5e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e60:	8b 89       	ldd	r24, Y+19	; 0x13
     e62:	9c 89       	ldd	r25, Y+20	; 0x14
     e64:	00 97       	sbiw	r24, 0x00	; 0
     e66:	69 f7       	brne	.-38     	; 0xe42 <SavePasswordeEeprom+0xc8>
     e68:	14 c0       	rjmp	.+40     	; 0xe92 <SavePasswordeEeprom+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e6a:	6d 89       	ldd	r22, Y+21	; 0x15
     e6c:	7e 89       	ldd	r23, Y+22	; 0x16
     e6e:	8f 89       	ldd	r24, Y+23	; 0x17
     e70:	98 8d       	ldd	r25, Y+24	; 0x18
     e72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e76:	dc 01       	movw	r26, r24
     e78:	cb 01       	movw	r24, r22
     e7a:	9c 8b       	std	Y+20, r25	; 0x14
     e7c:	8b 8b       	std	Y+19, r24	; 0x13
     e7e:	8b 89       	ldd	r24, Y+19	; 0x13
     e80:	9c 89       	ldd	r25, Y+20	; 0x14
     e82:	98 8b       	std	Y+16, r25	; 0x10
     e84:	8f 87       	std	Y+15, r24	; 0x0f
     e86:	8f 85       	ldd	r24, Y+15	; 0x0f
     e88:	98 89       	ldd	r25, Y+16	; 0x10
     e8a:	01 97       	sbiw	r24, 0x01	; 1
     e8c:	f1 f7       	brne	.-4      	; 0xe8a <SavePasswordeEeprom+0x110>
     e8e:	98 8b       	std	Y+16, r25	; 0x10
     e90:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	/*recieve new password from HMI_ECU*/
	UART_sendByte(ECU2_READY);
     e92:	8f ef       	ldi	r24, 0xFF	; 255
     e94:	0e 94 72 12 	call	0x24e4	; 0x24e4 <UART_sendByte>
	for (uint8 i = 0; i < passwordSize; i++) {
     e98:	1e 8e       	std	Y+30, r1	; 0x1e
     e9a:	0c c0       	rjmp	.+24     	; 0xeb4 <SavePasswordeEeprom+0x13a>
		g_password[i] = UART_recieveByte();
     e9c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e9e:	08 2f       	mov	r16, r24
     ea0:	10 e0       	ldi	r17, 0x00	; 0
     ea2:	0e 94 89 12 	call	0x2512	; 0x2512 <UART_recieveByte>
     ea6:	f8 01       	movw	r30, r16
     ea8:	e9 58       	subi	r30, 0x89	; 137
     eaa:	ff 4f       	sbci	r31, 0xFF	; 255
     eac:	80 83       	st	Z, r24
	passwordSize = UART_recieveByte();
	EEPROM_writeByte(0x0310, passwordSize);
	_delay_ms(10);
	/*recieve new password from HMI_ECU*/
	UART_sendByte(ECU2_READY);
	for (uint8 i = 0; i < passwordSize; i++) {
     eae:	8e 8d       	ldd	r24, Y+30	; 0x1e
     eb0:	8f 5f       	subi	r24, 0xFF	; 255
     eb2:	8e 8f       	std	Y+30, r24	; 0x1e
     eb4:	90 91 76 00 	lds	r25, 0x0076
     eb8:	8e 8d       	ldd	r24, Y+30	; 0x1e
     eba:	89 17       	cp	r24, r25
     ebc:	78 f3       	brcs	.-34     	; 0xe9c <SavePasswordeEeprom+0x122>
		g_password[i] = UART_recieveByte();
	}
	/*save new password in eeprom*/
	for (uint8 i = 0; i < passwordSize; i++) {
     ebe:	1d 8e       	std	Y+29, r1	; 0x1d
     ec0:	86 c0       	rjmp	.+268    	; 0xfce <SavePasswordeEeprom+0x254>
		EEPROM_writeByte(0x0311 + i, g_password[i]); /* Write password in the external EEPROM */
     ec2:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ec4:	88 2f       	mov	r24, r24
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	8f 5e       	subi	r24, 0xEF	; 239
     eca:	9c 4f       	sbci	r25, 0xFC	; 252
     ecc:	ac 01       	movw	r20, r24
     ece:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ed0:	88 2f       	mov	r24, r24
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	fc 01       	movw	r30, r24
     ed6:	e9 58       	subi	r30, 0x89	; 137
     ed8:	ff 4f       	sbci	r31, 0xFF	; 255
     eda:	20 81       	ld	r18, Z
     edc:	ca 01       	movw	r24, r20
     ede:	62 2f       	mov	r22, r18
     ee0:	0e 94 97 0a 	call	0x152e	; 0x152e <EEPROM_writeByte>
     ee4:	80 e0       	ldi	r24, 0x00	; 0
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	a0 e2       	ldi	r26, 0x20	; 32
     eea:	b1 e4       	ldi	r27, 0x41	; 65
     eec:	8b 87       	std	Y+11, r24	; 0x0b
     eee:	9c 87       	std	Y+12, r25	; 0x0c
     ef0:	ad 87       	std	Y+13, r26	; 0x0d
     ef2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ef4:	6b 85       	ldd	r22, Y+11	; 0x0b
     ef6:	7c 85       	ldd	r23, Y+12	; 0x0c
     ef8:	8d 85       	ldd	r24, Y+13	; 0x0d
     efa:	9e 85       	ldd	r25, Y+14	; 0x0e
     efc:	20 e0       	ldi	r18, 0x00	; 0
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	4a ef       	ldi	r20, 0xFA	; 250
     f02:	54 e4       	ldi	r21, 0x44	; 68
     f04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f08:	dc 01       	movw	r26, r24
     f0a:	cb 01       	movw	r24, r22
     f0c:	8f 83       	std	Y+7, r24	; 0x07
     f0e:	98 87       	std	Y+8, r25	; 0x08
     f10:	a9 87       	std	Y+9, r26	; 0x09
     f12:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f14:	6f 81       	ldd	r22, Y+7	; 0x07
     f16:	78 85       	ldd	r23, Y+8	; 0x08
     f18:	89 85       	ldd	r24, Y+9	; 0x09
     f1a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f1c:	20 e0       	ldi	r18, 0x00	; 0
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	40 e8       	ldi	r20, 0x80	; 128
     f22:	5f e3       	ldi	r21, 0x3F	; 63
     f24:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f28:	88 23       	and	r24, r24
     f2a:	2c f4       	brge	.+10     	; 0xf36 <SavePasswordeEeprom+0x1bc>
		__ticks = 1;
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	9e 83       	std	Y+6, r25	; 0x06
     f32:	8d 83       	std	Y+5, r24	; 0x05
     f34:	3f c0       	rjmp	.+126    	; 0xfb4 <SavePasswordeEeprom+0x23a>
	else if (__tmp > 65535)
     f36:	6f 81       	ldd	r22, Y+7	; 0x07
     f38:	78 85       	ldd	r23, Y+8	; 0x08
     f3a:	89 85       	ldd	r24, Y+9	; 0x09
     f3c:	9a 85       	ldd	r25, Y+10	; 0x0a
     f3e:	20 e0       	ldi	r18, 0x00	; 0
     f40:	3f ef       	ldi	r19, 0xFF	; 255
     f42:	4f e7       	ldi	r20, 0x7F	; 127
     f44:	57 e4       	ldi	r21, 0x47	; 71
     f46:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f4a:	18 16       	cp	r1, r24
     f4c:	4c f5       	brge	.+82     	; 0xfa0 <SavePasswordeEeprom+0x226>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f4e:	6b 85       	ldd	r22, Y+11	; 0x0b
     f50:	7c 85       	ldd	r23, Y+12	; 0x0c
     f52:	8d 85       	ldd	r24, Y+13	; 0x0d
     f54:	9e 85       	ldd	r25, Y+14	; 0x0e
     f56:	20 e0       	ldi	r18, 0x00	; 0
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	40 e2       	ldi	r20, 0x20	; 32
     f5c:	51 e4       	ldi	r21, 0x41	; 65
     f5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f62:	dc 01       	movw	r26, r24
     f64:	cb 01       	movw	r24, r22
     f66:	bc 01       	movw	r22, r24
     f68:	cd 01       	movw	r24, r26
     f6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f6e:	dc 01       	movw	r26, r24
     f70:	cb 01       	movw	r24, r22
     f72:	9e 83       	std	Y+6, r25	; 0x06
     f74:	8d 83       	std	Y+5, r24	; 0x05
     f76:	0f c0       	rjmp	.+30     	; 0xf96 <SavePasswordeEeprom+0x21c>
     f78:	88 ec       	ldi	r24, 0xC8	; 200
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	9c 83       	std	Y+4, r25	; 0x04
     f7e:	8b 83       	std	Y+3, r24	; 0x03
     f80:	8b 81       	ldd	r24, Y+3	; 0x03
     f82:	9c 81       	ldd	r25, Y+4	; 0x04
     f84:	01 97       	sbiw	r24, 0x01	; 1
     f86:	f1 f7       	brne	.-4      	; 0xf84 <SavePasswordeEeprom+0x20a>
     f88:	9c 83       	std	Y+4, r25	; 0x04
     f8a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f8c:	8d 81       	ldd	r24, Y+5	; 0x05
     f8e:	9e 81       	ldd	r25, Y+6	; 0x06
     f90:	01 97       	sbiw	r24, 0x01	; 1
     f92:	9e 83       	std	Y+6, r25	; 0x06
     f94:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f96:	8d 81       	ldd	r24, Y+5	; 0x05
     f98:	9e 81       	ldd	r25, Y+6	; 0x06
     f9a:	00 97       	sbiw	r24, 0x00	; 0
     f9c:	69 f7       	brne	.-38     	; 0xf78 <SavePasswordeEeprom+0x1fe>
     f9e:	14 c0       	rjmp	.+40     	; 0xfc8 <SavePasswordeEeprom+0x24e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fa0:	6f 81       	ldd	r22, Y+7	; 0x07
     fa2:	78 85       	ldd	r23, Y+8	; 0x08
     fa4:	89 85       	ldd	r24, Y+9	; 0x09
     fa6:	9a 85       	ldd	r25, Y+10	; 0x0a
     fa8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fac:	dc 01       	movw	r26, r24
     fae:	cb 01       	movw	r24, r22
     fb0:	9e 83       	std	Y+6, r25	; 0x06
     fb2:	8d 83       	std	Y+5, r24	; 0x05
     fb4:	8d 81       	ldd	r24, Y+5	; 0x05
     fb6:	9e 81       	ldd	r25, Y+6	; 0x06
     fb8:	9a 83       	std	Y+2, r25	; 0x02
     fba:	89 83       	std	Y+1, r24	; 0x01
     fbc:	89 81       	ldd	r24, Y+1	; 0x01
     fbe:	9a 81       	ldd	r25, Y+2	; 0x02
     fc0:	01 97       	sbiw	r24, 0x01	; 1
     fc2:	f1 f7       	brne	.-4      	; 0xfc0 <SavePasswordeEeprom+0x246>
     fc4:	9a 83       	std	Y+2, r25	; 0x02
     fc6:	89 83       	std	Y+1, r24	; 0x01
	UART_sendByte(ECU2_READY);
	for (uint8 i = 0; i < passwordSize; i++) {
		g_password[i] = UART_recieveByte();
	}
	/*save new password in eeprom*/
	for (uint8 i = 0; i < passwordSize; i++) {
     fc8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fca:	8f 5f       	subi	r24, 0xFF	; 255
     fcc:	8d 8f       	std	Y+29, r24	; 0x1d
     fce:	90 91 76 00 	lds	r25, 0x0076
     fd2:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fd4:	89 17       	cp	r24, r25
     fd6:	08 f4       	brcc	.+2      	; 0xfda <SavePasswordeEeprom+0x260>
     fd8:	74 cf       	rjmp	.-280    	; 0xec2 <SavePasswordeEeprom+0x148>
		EEPROM_writeByte(0x0311 + i, g_password[i]); /* Write password in the external EEPROM */
		_delay_ms(10);
	}
}
     fda:	6e 96       	adiw	r28, 0x1e	; 30
     fdc:	0f b6       	in	r0, 0x3f	; 63
     fde:	f8 94       	cli
     fe0:	de bf       	out	0x3e, r29	; 62
     fe2:	0f be       	out	0x3f, r0	; 63
     fe4:	cd bf       	out	0x3d, r28	; 61
     fe6:	cf 91       	pop	r28
     fe8:	df 91       	pop	r29
     fea:	1f 91       	pop	r17
     fec:	0f 91       	pop	r16
     fee:	08 95       	ret

00000ff0 <matchPassword>:
 * Description: Function to recieve password form HMI-ECU to open door or change password
 * Recieve password
 * match it with system password and return success or error
 */

uint8 matchPassword() {
     ff0:	0f 93       	push	r16
     ff2:	1f 93       	push	r17
     ff4:	df 93       	push	r29
     ff6:	cf 93       	push	r28
     ff8:	cd b7       	in	r28, 0x3d	; 61
     ffa:	de b7       	in	r29, 0x3e	; 62
     ffc:	6c 97       	sbiw	r28, 0x1c	; 28
     ffe:	0f b6       	in	r0, 0x3f	; 63
    1000:	f8 94       	cli
    1002:	de bf       	out	0x3e, r29	; 62
    1004:	0f be       	out	0x3f, r0	; 63
    1006:	cd bf       	out	0x3d, r28	; 61
	uint8 passwordEntered[MAXNUMBERS] = { 0xff };
    1008:	85 e0       	ldi	r24, 0x05	; 5
    100a:	fe 01       	movw	r30, r28
    100c:	72 96       	adiw	r30, 0x12	; 18
    100e:	df 01       	movw	r26, r30
    1010:	98 2f       	mov	r25, r24
    1012:	1d 92       	st	X+, r1
    1014:	9a 95       	dec	r25
    1016:	e9 f7       	brne	.-6      	; 0x1012 <matchPassword+0x22>
    1018:	8f ef       	ldi	r24, 0xFF	; 255
    101a:	8a 8b       	std	Y+18, r24	; 0x12
	uint8 l_password[MAXNUMBERS] = { 0 };
    101c:	85 e0       	ldi	r24, 0x05	; 5
    101e:	fe 01       	movw	r30, r28
    1020:	77 96       	adiw	r30, 0x17	; 23
    1022:	df 01       	movw	r26, r30
    1024:	98 2f       	mov	r25, r24
    1026:	1d 92       	st	X+, r1
    1028:	9a 95       	dec	r25
    102a:	e9 f7       	brne	.-6      	; 0x1026 <matchPassword+0x36>
	/*read size the password from eeprom*/
	EEPROM_readByte(0X0310, &passwordSize);
    102c:	26 e7       	ldi	r18, 0x76	; 118
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	80 e1       	ldi	r24, 0x10	; 16
    1032:	93 e0       	ldi	r25, 0x03	; 3
    1034:	b9 01       	movw	r22, r18
    1036:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <EEPROM_readByte>
    103a:	80 e0       	ldi	r24, 0x00	; 0
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	a0 e2       	ldi	r26, 0x20	; 32
    1040:	b1 e4       	ldi	r27, 0x41	; 65
    1042:	8b 87       	std	Y+11, r24	; 0x0b
    1044:	9c 87       	std	Y+12, r25	; 0x0c
    1046:	ad 87       	std	Y+13, r26	; 0x0d
    1048:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    104a:	6b 85       	ldd	r22, Y+11	; 0x0b
    104c:	7c 85       	ldd	r23, Y+12	; 0x0c
    104e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1050:	9e 85       	ldd	r25, Y+14	; 0x0e
    1052:	20 e0       	ldi	r18, 0x00	; 0
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	4a ef       	ldi	r20, 0xFA	; 250
    1058:	54 e4       	ldi	r21, 0x44	; 68
    105a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    105e:	dc 01       	movw	r26, r24
    1060:	cb 01       	movw	r24, r22
    1062:	8f 83       	std	Y+7, r24	; 0x07
    1064:	98 87       	std	Y+8, r25	; 0x08
    1066:	a9 87       	std	Y+9, r26	; 0x09
    1068:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    106a:	6f 81       	ldd	r22, Y+7	; 0x07
    106c:	78 85       	ldd	r23, Y+8	; 0x08
    106e:	89 85       	ldd	r24, Y+9	; 0x09
    1070:	9a 85       	ldd	r25, Y+10	; 0x0a
    1072:	20 e0       	ldi	r18, 0x00	; 0
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	40 e8       	ldi	r20, 0x80	; 128
    1078:	5f e3       	ldi	r21, 0x3F	; 63
    107a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    107e:	88 23       	and	r24, r24
    1080:	2c f4       	brge	.+10     	; 0x108c <matchPassword+0x9c>
		__ticks = 1;
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	9e 83       	std	Y+6, r25	; 0x06
    1088:	8d 83       	std	Y+5, r24	; 0x05
    108a:	3f c0       	rjmp	.+126    	; 0x110a <matchPassword+0x11a>
	else if (__tmp > 65535)
    108c:	6f 81       	ldd	r22, Y+7	; 0x07
    108e:	78 85       	ldd	r23, Y+8	; 0x08
    1090:	89 85       	ldd	r24, Y+9	; 0x09
    1092:	9a 85       	ldd	r25, Y+10	; 0x0a
    1094:	20 e0       	ldi	r18, 0x00	; 0
    1096:	3f ef       	ldi	r19, 0xFF	; 255
    1098:	4f e7       	ldi	r20, 0x7F	; 127
    109a:	57 e4       	ldi	r21, 0x47	; 71
    109c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10a0:	18 16       	cp	r1, r24
    10a2:	4c f5       	brge	.+82     	; 0x10f6 <matchPassword+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    10a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    10a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    10aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    10ac:	20 e0       	ldi	r18, 0x00	; 0
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	40 e2       	ldi	r20, 0x20	; 32
    10b2:	51 e4       	ldi	r21, 0x41	; 65
    10b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10b8:	dc 01       	movw	r26, r24
    10ba:	cb 01       	movw	r24, r22
    10bc:	bc 01       	movw	r22, r24
    10be:	cd 01       	movw	r24, r26
    10c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10c4:	dc 01       	movw	r26, r24
    10c6:	cb 01       	movw	r24, r22
    10c8:	9e 83       	std	Y+6, r25	; 0x06
    10ca:	8d 83       	std	Y+5, r24	; 0x05
    10cc:	0f c0       	rjmp	.+30     	; 0x10ec <matchPassword+0xfc>
    10ce:	88 ec       	ldi	r24, 0xC8	; 200
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	9c 83       	std	Y+4, r25	; 0x04
    10d4:	8b 83       	std	Y+3, r24	; 0x03
    10d6:	8b 81       	ldd	r24, Y+3	; 0x03
    10d8:	9c 81       	ldd	r25, Y+4	; 0x04
    10da:	01 97       	sbiw	r24, 0x01	; 1
    10dc:	f1 f7       	brne	.-4      	; 0x10da <matchPassword+0xea>
    10de:	9c 83       	std	Y+4, r25	; 0x04
    10e0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10e2:	8d 81       	ldd	r24, Y+5	; 0x05
    10e4:	9e 81       	ldd	r25, Y+6	; 0x06
    10e6:	01 97       	sbiw	r24, 0x01	; 1
    10e8:	9e 83       	std	Y+6, r25	; 0x06
    10ea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10ec:	8d 81       	ldd	r24, Y+5	; 0x05
    10ee:	9e 81       	ldd	r25, Y+6	; 0x06
    10f0:	00 97       	sbiw	r24, 0x00	; 0
    10f2:	69 f7       	brne	.-38     	; 0x10ce <matchPassword+0xde>
    10f4:	14 c0       	rjmp	.+40     	; 0x111e <matchPassword+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10f6:	6f 81       	ldd	r22, Y+7	; 0x07
    10f8:	78 85       	ldd	r23, Y+8	; 0x08
    10fa:	89 85       	ldd	r24, Y+9	; 0x09
    10fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    10fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1102:	dc 01       	movw	r26, r24
    1104:	cb 01       	movw	r24, r22
    1106:	9e 83       	std	Y+6, r25	; 0x06
    1108:	8d 83       	std	Y+5, r24	; 0x05
    110a:	8d 81       	ldd	r24, Y+5	; 0x05
    110c:	9e 81       	ldd	r25, Y+6	; 0x06
    110e:	9a 83       	std	Y+2, r25	; 0x02
    1110:	89 83       	std	Y+1, r24	; 0x01
    1112:	89 81       	ldd	r24, Y+1	; 0x01
    1114:	9a 81       	ldd	r25, Y+2	; 0x02
    1116:	01 97       	sbiw	r24, 0x01	; 1
    1118:	f1 f7       	brne	.-4      	; 0x1116 <matchPassword+0x126>
    111a:	9a 83       	std	Y+2, r25	; 0x02
    111c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	/*recieve enterd password from HMI_ECU*/
	if (passwordSize != 0) {
    111e:	80 91 76 00 	lds	r24, 0x0076
    1122:	88 23       	and	r24, r24
    1124:	b9 f0       	breq	.+46     	; 0x1154 <matchPassword+0x164>
		UART_sendByte(ECU2_READY);
    1126:	8f ef       	ldi	r24, 0xFF	; 255
    1128:	0e 94 72 12 	call	0x24e4	; 0x24e4 <UART_sendByte>
		for (uint8 i = 0; i < MAXNUMBERS; i++) {
    112c:	19 8a       	std	Y+17, r1	; 0x11
    112e:	0f c0       	rjmp	.+30     	; 0x114e <matchPassword+0x15e>
			passwordEntered[i] = UART_recieveByte();
    1130:	89 89       	ldd	r24, Y+17	; 0x11
    1132:	08 2f       	mov	r16, r24
    1134:	10 e0       	ldi	r17, 0x00	; 0
    1136:	0e 94 89 12 	call	0x2512	; 0x2512 <UART_recieveByte>
    113a:	28 2f       	mov	r18, r24
    113c:	ce 01       	movw	r24, r28
    113e:	42 96       	adiw	r24, 0x12	; 18
    1140:	fc 01       	movw	r30, r24
    1142:	e0 0f       	add	r30, r16
    1144:	f1 1f       	adc	r31, r17
    1146:	20 83       	st	Z, r18
	EEPROM_readByte(0X0310, &passwordSize);
	_delay_ms(10);
	/*recieve enterd password from HMI_ECU*/
	if (passwordSize != 0) {
		UART_sendByte(ECU2_READY);
		for (uint8 i = 0; i < MAXNUMBERS; i++) {
    1148:	89 89       	ldd	r24, Y+17	; 0x11
    114a:	8f 5f       	subi	r24, 0xFF	; 255
    114c:	89 8b       	std	Y+17, r24	; 0x11
    114e:	89 89       	ldd	r24, Y+17	; 0x11
    1150:	85 30       	cpi	r24, 0x05	; 5
    1152:	70 f3       	brcs	.-36     	; 0x1130 <matchPassword+0x140>
			passwordEntered[i] = UART_recieveByte();
		}
	}
	/*Read system password which saved in eeprom*/

	for (uint8 i = 0; i < passwordSize; i++) {
    1154:	18 8a       	std	Y+16, r1	; 0x10
    1156:	15 c0       	rjmp	.+42     	; 0x1182 <matchPassword+0x192>
		EEPROM_readByte(0x0311 + i, &l_password[i]); /* Write password in the external EEPROM */
    1158:	88 89       	ldd	r24, Y+16	; 0x10
    115a:	88 2f       	mov	r24, r24
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	8f 5e       	subi	r24, 0xEF	; 239
    1160:	9c 4f       	sbci	r25, 0xFC	; 252
    1162:	ac 01       	movw	r20, r24
    1164:	88 89       	ldd	r24, Y+16	; 0x10
    1166:	88 2f       	mov	r24, r24
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	9e 01       	movw	r18, r28
    116c:	29 5e       	subi	r18, 0xE9	; 233
    116e:	3f 4f       	sbci	r19, 0xFF	; 255
    1170:	28 0f       	add	r18, r24
    1172:	39 1f       	adc	r19, r25
    1174:	ca 01       	movw	r24, r20
    1176:	b9 01       	movw	r22, r18
    1178:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <EEPROM_readByte>
			passwordEntered[i] = UART_recieveByte();
		}
	}
	/*Read system password which saved in eeprom*/

	for (uint8 i = 0; i < passwordSize; i++) {
    117c:	88 89       	ldd	r24, Y+16	; 0x10
    117e:	8f 5f       	subi	r24, 0xFF	; 255
    1180:	88 8b       	std	Y+16, r24	; 0x10
    1182:	90 91 76 00 	lds	r25, 0x0076
    1186:	88 89       	ldd	r24, Y+16	; 0x10
    1188:	89 17       	cp	r24, r25
    118a:	30 f3       	brcs	.-52     	; 0x1158 <matchPassword+0x168>
		EEPROM_readByte(0x0311 + i, &l_password[i]); /* Write password in the external EEPROM */
	}
	/*compare between two password*/
	for (uint8 i = 0; i < passwordSize; i++) {
    118c:	1f 86       	std	Y+15, r1	; 0x0f
    118e:	19 c0       	rjmp	.+50     	; 0x11c2 <matchPassword+0x1d2>
		if (passwordEntered[i] != l_password[i]) {
    1190:	8f 85       	ldd	r24, Y+15	; 0x0f
    1192:	28 2f       	mov	r18, r24
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	ce 01       	movw	r24, r28
    1198:	42 96       	adiw	r24, 0x12	; 18
    119a:	fc 01       	movw	r30, r24
    119c:	e2 0f       	add	r30, r18
    119e:	f3 1f       	adc	r31, r19
    11a0:	40 81       	ld	r20, Z
    11a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    11a4:	28 2f       	mov	r18, r24
    11a6:	30 e0       	ldi	r19, 0x00	; 0
    11a8:	ce 01       	movw	r24, r28
    11aa:	47 96       	adiw	r24, 0x17	; 23
    11ac:	fc 01       	movw	r30, r24
    11ae:	e2 0f       	add	r30, r18
    11b0:	f3 1f       	adc	r31, r19
    11b2:	80 81       	ld	r24, Z
    11b4:	48 17       	cp	r20, r24
    11b6:	11 f0       	breq	.+4      	; 0x11bc <matchPassword+0x1cc>
			return ERROR;
    11b8:	1c 8e       	std	Y+28, r1	; 0x1c
    11ba:	0a c0       	rjmp	.+20     	; 0x11d0 <matchPassword+0x1e0>

	for (uint8 i = 0; i < passwordSize; i++) {
		EEPROM_readByte(0x0311 + i, &l_password[i]); /* Write password in the external EEPROM */
	}
	/*compare between two password*/
	for (uint8 i = 0; i < passwordSize; i++) {
    11bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    11be:	8f 5f       	subi	r24, 0xFF	; 255
    11c0:	8f 87       	std	Y+15, r24	; 0x0f
    11c2:	90 91 76 00 	lds	r25, 0x0076
    11c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    11c8:	89 17       	cp	r24, r25
    11ca:	10 f3       	brcs	.-60     	; 0x1190 <matchPassword+0x1a0>
		if (passwordEntered[i] != l_password[i]) {
			return ERROR;
		}
	}
	return SUCCESS;
    11cc:	a1 e0       	ldi	r26, 0x01	; 1
    11ce:	ac 8f       	std	Y+28, r26	; 0x1c
    11d0:	8c 8d       	ldd	r24, Y+28	; 0x1c
}
    11d2:	6c 96       	adiw	r28, 0x1c	; 28
    11d4:	0f b6       	in	r0, 0x3f	; 63
    11d6:	f8 94       	cli
    11d8:	de bf       	out	0x3e, r29	; 62
    11da:	0f be       	out	0x3f, r0	; 63
    11dc:	cd bf       	out	0x3d, r28	; 61
    11de:	cf 91       	pop	r28
    11e0:	df 91       	pop	r29
    11e2:	1f 91       	pop	r17
    11e4:	0f 91       	pop	r16
    11e6:	08 95       	ret

000011e8 <main>:

/*******************************************************************************
 *                             Main Function                                   *
 *******************************************************************************/

int main() {
    11e8:	df 93       	push	r29
    11ea:	cf 93       	push	r28
    11ec:	cd b7       	in	r28, 0x3d	; 61
    11ee:	de b7       	in	r29, 0x3e	; 62
    11f0:	aa 97       	sbiw	r28, 0x2a	; 42
    11f2:	0f b6       	in	r0, 0x3f	; 63
    11f4:	f8 94       	cli
    11f6:	de bf       	out	0x3e, r29	; 62
    11f8:	0f be       	out	0x3f, r0	; 63
    11fa:	cd bf       	out	0x3d, r28	; 61
	 * key: to save value from keypad
	 * check_match : to check matching
	 * missing_count : count number of enter wrong password
	 * */

	uint8 key = 0, check_match = 0, new_password_flag = 0;
    11fc:	19 8a       	std	Y+17, r1	; 0x11
    11fe:	18 8a       	std	Y+16, r1	; 0x10
    1200:	1a 8a       	std	Y+18, r1	; 0x12
	uint8 missing_count = 0
			;
    1202:	1f 86       	std	Y+15, r1	; 0x0f
	/* Initialize the Motor Driver */

	DcMotor_init();
    1204:	0e 94 3c 0a 	call	0x1478	; 0x1478 <DcMotor_init>
	/* Initialize the buzzer Driver */

	Buzzer_init();
    1208:	0e 94 13 0a 	call	0x1426	; 0x1426 <Buzzer_init>
	/*enable global interrpt*/
	SREG |= (1 << 7);
    120c:	af e5       	ldi	r26, 0x5F	; 95
    120e:	b0 e0       	ldi	r27, 0x00	; 0
    1210:	ef e5       	ldi	r30, 0x5F	; 95
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	80 81       	ld	r24, Z
    1216:	80 68       	ori	r24, 0x80	; 128
    1218:	8c 93       	st	X, r24
	/*Timer Driver configrations */
	Timer_ConfigType Timer_Config = { TIMER_0, COMPARE_MATCH_MODE, 0, 250,
			F_CPU_1024 };
    121a:	ce 01       	movw	r24, r28
    121c:	43 96       	adiw	r24, 0x13	; 19
    121e:	9a a3       	std	Y+34, r25	; 0x22
    1220:	89 a3       	std	Y+33, r24	; 0x21
    1222:	ef e6       	ldi	r30, 0x6F	; 111
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	fc a3       	std	Y+36, r31	; 0x24
    1228:	eb a3       	std	Y+35, r30	; 0x23
    122a:	f7 e0       	ldi	r31, 0x07	; 7
    122c:	fd a3       	std	Y+37, r31	; 0x25
    122e:	eb a1       	ldd	r30, Y+35	; 0x23
    1230:	fc a1       	ldd	r31, Y+36	; 0x24
    1232:	00 80       	ld	r0, Z
    1234:	8b a1       	ldd	r24, Y+35	; 0x23
    1236:	9c a1       	ldd	r25, Y+36	; 0x24
    1238:	01 96       	adiw	r24, 0x01	; 1
    123a:	9c a3       	std	Y+36, r25	; 0x24
    123c:	8b a3       	std	Y+35, r24	; 0x23
    123e:	e9 a1       	ldd	r30, Y+33	; 0x21
    1240:	fa a1       	ldd	r31, Y+34	; 0x22
    1242:	00 82       	st	Z, r0
    1244:	89 a1       	ldd	r24, Y+33	; 0x21
    1246:	9a a1       	ldd	r25, Y+34	; 0x22
    1248:	01 96       	adiw	r24, 0x01	; 1
    124a:	9a a3       	std	Y+34, r25	; 0x22
    124c:	89 a3       	std	Y+33, r24	; 0x21
    124e:	9d a1       	ldd	r25, Y+37	; 0x25
    1250:	91 50       	subi	r25, 0x01	; 1
    1252:	9d a3       	std	Y+37, r25	; 0x25
    1254:	ed a1       	ldd	r30, Y+37	; 0x25
    1256:	ee 23       	and	r30, r30
    1258:	51 f7       	brne	.-44     	; 0x122e <main+0x46>
	/* Initialize the TWI/I2C Driver with its configrations */
	TWI_init(TWI_BAUDRATE, TWI_SLAVEADDRESS);
    125a:	80 e8       	ldi	r24, 0x80	; 128
    125c:	9a e1       	ldi	r25, 0x1A	; 26
    125e:	61 e0       	ldi	r22, 0x01	; 1
    1260:	0e 94 30 11 	call	0x2260	; 0x2260 <TWI_init>
	/* Initialize the UART Driver with its configrations */
	UART_ConfigType UART_Config = { DATA_BIT_8, ODD_PARITY, STOP_BIT_1,
	UART_BAUDRATE };
    1264:	ce 01       	movw	r24, r28
    1266:	4a 96       	adiw	r24, 0x1a	; 26
    1268:	9f a3       	std	Y+39, r25	; 0x27
    126a:	8e a3       	std	Y+38, r24	; 0x26
    126c:	e8 e6       	ldi	r30, 0x68	; 104
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	f9 a7       	std	Y+41, r31	; 0x29
    1272:	e8 a7       	std	Y+40, r30	; 0x28
    1274:	f7 e0       	ldi	r31, 0x07	; 7
    1276:	fa a7       	std	Y+42, r31	; 0x2a
    1278:	e8 a5       	ldd	r30, Y+40	; 0x28
    127a:	f9 a5       	ldd	r31, Y+41	; 0x29
    127c:	00 80       	ld	r0, Z
    127e:	88 a5       	ldd	r24, Y+40	; 0x28
    1280:	99 a5       	ldd	r25, Y+41	; 0x29
    1282:	01 96       	adiw	r24, 0x01	; 1
    1284:	99 a7       	std	Y+41, r25	; 0x29
    1286:	88 a7       	std	Y+40, r24	; 0x28
    1288:	ee a1       	ldd	r30, Y+38	; 0x26
    128a:	ff a1       	ldd	r31, Y+39	; 0x27
    128c:	00 82       	st	Z, r0
    128e:	8e a1       	ldd	r24, Y+38	; 0x26
    1290:	9f a1       	ldd	r25, Y+39	; 0x27
    1292:	01 96       	adiw	r24, 0x01	; 1
    1294:	9f a3       	std	Y+39, r25	; 0x27
    1296:	8e a3       	std	Y+38, r24	; 0x26
    1298:	9a a5       	ldd	r25, Y+42	; 0x2a
    129a:	91 50       	subi	r25, 0x01	; 1
    129c:	9a a7       	std	Y+42, r25	; 0x2a
    129e:	ea a5       	ldd	r30, Y+42	; 0x2a
    12a0:	ee 23       	and	r30, r30
    12a2:	51 f7       	brne	.-44     	; 0x1278 <main+0x90>
	UART_init(&UART_Config);
    12a4:	ce 01       	movw	r24, r28
    12a6:	4a 96       	adiw	r24, 0x1a	; 26
    12a8:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <UART_init>

	checkIfFirstUse(&new_password_flag);
    12ac:	ce 01       	movw	r24, r28
    12ae:	42 96       	adiw	r24, 0x12	; 18
    12b0:	0e 94 98 06 	call	0xd30	; 0xd30 <checkIfFirstUse>

	/***************************** Super Loop *********************************/

	while (1) {
		if (new_password_flag == 1) {
    12b4:	8a 89       	ldd	r24, Y+18	; 0x12
    12b6:	81 30       	cpi	r24, 0x01	; 1
    12b8:	09 f0       	breq	.+2      	; 0x12bc <main+0xd4>
    12ba:	75 c0       	rjmp	.+234    	; 0x13a6 <main+0x1be>
			SavePasswordeEeprom();
    12bc:	0e 94 bd 06 	call	0xd7a	; 0xd7a <SavePasswordeEeprom>
    12c0:	80 e0       	ldi	r24, 0x00	; 0
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	a0 e2       	ldi	r26, 0x20	; 32
    12c6:	b1 e4       	ldi	r27, 0x41	; 65
    12c8:	8b 87       	std	Y+11, r24	; 0x0b
    12ca:	9c 87       	std	Y+12, r25	; 0x0c
    12cc:	ad 87       	std	Y+13, r26	; 0x0d
    12ce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    12d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    12d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    12d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    12d8:	20 e0       	ldi	r18, 0x00	; 0
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	4a ef       	ldi	r20, 0xFA	; 250
    12de:	54 e4       	ldi	r21, 0x44	; 68
    12e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12e4:	dc 01       	movw	r26, r24
    12e6:	cb 01       	movw	r24, r22
    12e8:	8f 83       	std	Y+7, r24	; 0x07
    12ea:	98 87       	std	Y+8, r25	; 0x08
    12ec:	a9 87       	std	Y+9, r26	; 0x09
    12ee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12f0:	6f 81       	ldd	r22, Y+7	; 0x07
    12f2:	78 85       	ldd	r23, Y+8	; 0x08
    12f4:	89 85       	ldd	r24, Y+9	; 0x09
    12f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    12f8:	20 e0       	ldi	r18, 0x00	; 0
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	40 e8       	ldi	r20, 0x80	; 128
    12fe:	5f e3       	ldi	r21, 0x3F	; 63
    1300:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1304:	88 23       	and	r24, r24
    1306:	2c f4       	brge	.+10     	; 0x1312 <main+0x12a>
		__ticks = 1;
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	9e 83       	std	Y+6, r25	; 0x06
    130e:	8d 83       	std	Y+5, r24	; 0x05
    1310:	3f c0       	rjmp	.+126    	; 0x1390 <main+0x1a8>
	else if (__tmp > 65535)
    1312:	6f 81       	ldd	r22, Y+7	; 0x07
    1314:	78 85       	ldd	r23, Y+8	; 0x08
    1316:	89 85       	ldd	r24, Y+9	; 0x09
    1318:	9a 85       	ldd	r25, Y+10	; 0x0a
    131a:	20 e0       	ldi	r18, 0x00	; 0
    131c:	3f ef       	ldi	r19, 0xFF	; 255
    131e:	4f e7       	ldi	r20, 0x7F	; 127
    1320:	57 e4       	ldi	r21, 0x47	; 71
    1322:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1326:	18 16       	cp	r1, r24
    1328:	4c f5       	brge	.+82     	; 0x137c <main+0x194>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    132a:	6b 85       	ldd	r22, Y+11	; 0x0b
    132c:	7c 85       	ldd	r23, Y+12	; 0x0c
    132e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1330:	9e 85       	ldd	r25, Y+14	; 0x0e
    1332:	20 e0       	ldi	r18, 0x00	; 0
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	40 e2       	ldi	r20, 0x20	; 32
    1338:	51 e4       	ldi	r21, 0x41	; 65
    133a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    133e:	dc 01       	movw	r26, r24
    1340:	cb 01       	movw	r24, r22
    1342:	bc 01       	movw	r22, r24
    1344:	cd 01       	movw	r24, r26
    1346:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    134a:	dc 01       	movw	r26, r24
    134c:	cb 01       	movw	r24, r22
    134e:	9e 83       	std	Y+6, r25	; 0x06
    1350:	8d 83       	std	Y+5, r24	; 0x05
    1352:	0f c0       	rjmp	.+30     	; 0x1372 <main+0x18a>
    1354:	88 ec       	ldi	r24, 0xC8	; 200
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	9c 83       	std	Y+4, r25	; 0x04
    135a:	8b 83       	std	Y+3, r24	; 0x03
    135c:	8b 81       	ldd	r24, Y+3	; 0x03
    135e:	9c 81       	ldd	r25, Y+4	; 0x04
    1360:	01 97       	sbiw	r24, 0x01	; 1
    1362:	f1 f7       	brne	.-4      	; 0x1360 <main+0x178>
    1364:	9c 83       	std	Y+4, r25	; 0x04
    1366:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1368:	8d 81       	ldd	r24, Y+5	; 0x05
    136a:	9e 81       	ldd	r25, Y+6	; 0x06
    136c:	01 97       	sbiw	r24, 0x01	; 1
    136e:	9e 83       	std	Y+6, r25	; 0x06
    1370:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1372:	8d 81       	ldd	r24, Y+5	; 0x05
    1374:	9e 81       	ldd	r25, Y+6	; 0x06
    1376:	00 97       	sbiw	r24, 0x00	; 0
    1378:	69 f7       	brne	.-38     	; 0x1354 <main+0x16c>
    137a:	14 c0       	rjmp	.+40     	; 0x13a4 <main+0x1bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    137c:	6f 81       	ldd	r22, Y+7	; 0x07
    137e:	78 85       	ldd	r23, Y+8	; 0x08
    1380:	89 85       	ldd	r24, Y+9	; 0x09
    1382:	9a 85       	ldd	r25, Y+10	; 0x0a
    1384:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1388:	dc 01       	movw	r26, r24
    138a:	cb 01       	movw	r24, r22
    138c:	9e 83       	std	Y+6, r25	; 0x06
    138e:	8d 83       	std	Y+5, r24	; 0x05
    1390:	8d 81       	ldd	r24, Y+5	; 0x05
    1392:	9e 81       	ldd	r25, Y+6	; 0x06
    1394:	9a 83       	std	Y+2, r25	; 0x02
    1396:	89 83       	std	Y+1, r24	; 0x01
    1398:	89 81       	ldd	r24, Y+1	; 0x01
    139a:	9a 81       	ldd	r25, Y+2	; 0x02
    139c:	01 97       	sbiw	r24, 0x01	; 1
    139e:	f1 f7       	brne	.-4      	; 0x139c <main+0x1b4>
    13a0:	9a 83       	std	Y+2, r25	; 0x02
    13a2:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(10);
			new_password_flag = 0;
    13a4:	1a 8a       	std	Y+18, r1	; 0x12
		}
		key = UART_recieveByte();
    13a6:	0e 94 89 12 	call	0x2512	; 0x2512 <UART_recieveByte>
    13aa:	89 8b       	std	Y+17, r24	; 0x11
		/*user can choose
		 * + : open door
		 * - : change password
		 *  */

		if (key == '-' || key == '+') {
    13ac:	89 89       	ldd	r24, Y+17	; 0x11
    13ae:	8d 32       	cpi	r24, 0x2D	; 45
    13b0:	19 f0       	breq	.+6      	; 0x13b8 <main+0x1d0>
    13b2:	89 89       	ldd	r24, Y+17	; 0x11
    13b4:	8b 32       	cpi	r24, 0x2B	; 43
    13b6:	e1 f4       	brne	.+56     	; 0x13f0 <main+0x208>
			do {
				check_match = matchPassword();
    13b8:	0e 94 f8 07 	call	0xff0	; 0xff0 <matchPassword>
    13bc:	88 8b       	std	Y+16, r24	; 0x10
				UART_sendByte(check_match);
    13be:	88 89       	ldd	r24, Y+16	; 0x10
    13c0:	0e 94 72 12 	call	0x24e4	; 0x24e4 <UART_sendByte>
				missing_count++;
    13c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    13c6:	8f 5f       	subi	r24, 0xFF	; 255
    13c8:	8f 87       	std	Y+15, r24	; 0x0f
				if (missing_count == MAXMISSING) {
    13ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    13cc:	83 30       	cpi	r24, 0x03	; 3
    13ce:	51 f4       	brne	.+20     	; 0x13e4 <main+0x1fc>
					Timer0_setCallBack(&turnOnBuzzerticks);
    13d0:	8a e3       	ldi	r24, 0x3A	; 58
    13d2:	96 e0       	ldi	r25, 0x06	; 6
    13d4:	0e 94 a3 10 	call	0x2146	; 0x2146 <Timer0_setCallBack>
					Timer_init(&Timer_Config);
    13d8:	ce 01       	movw	r24, r28
    13da:	43 96       	adiw	r24, 0x13	; 19
    13dc:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <Timer_init>
					turnOnBuzzer();
    13e0:	0e 94 6e 06 	call	0xcdc	; 0xcdc <turnOnBuzzer>
				}
			} while (check_match == ERROR && missing_count != MAXMISSING);
    13e4:	88 89       	ldd	r24, Y+16	; 0x10
    13e6:	88 23       	and	r24, r24
    13e8:	19 f4       	brne	.+6      	; 0x13f0 <main+0x208>
    13ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    13ec:	83 30       	cpi	r24, 0x03	; 3
    13ee:	21 f7       	brne	.-56     	; 0x13b8 <main+0x1d0>
		}
		/*
		 * if user enter wright password
		 * - : user can change system password
		 * */
		if (key == '-') {
    13f0:	89 89       	ldd	r24, Y+17	; 0x11
    13f2:	8d 32       	cpi	r24, 0x2D	; 45
    13f4:	31 f4       	brne	.+12     	; 0x1402 <main+0x21a>
			if (check_match == SUCCESS) {
    13f6:	88 89       	ldd	r24, Y+16	; 0x10
    13f8:	81 30       	cpi	r24, 0x01	; 1
    13fa:	99 f4       	brne	.+38     	; 0x1422 <main+0x23a>
				SavePasswordeEeprom();
    13fc:	0e 94 bd 06 	call	0xd7a	; 0xd7a <SavePasswordeEeprom>
    1400:	10 c0       	rjmp	.+32     	; 0x1422 <main+0x23a>
		}
		/*if user enter wright password
		 * + : door will open
		 *  */

		else if (key == '+') {
    1402:	89 89       	ldd	r24, Y+17	; 0x11
    1404:	8b 32       	cpi	r24, 0x2B	; 43
    1406:	69 f4       	brne	.+26     	; 0x1422 <main+0x23a>
			if (check_match == SUCCESS) {
    1408:	88 89       	ldd	r24, Y+16	; 0x10
    140a:	81 30       	cpi	r24, 0x01	; 1
    140c:	51 f4       	brne	.+20     	; 0x1422 <main+0x23a>
				Timer0_setCallBack(&OpenDoorticks);
    140e:	83 ea       	ldi	r24, 0xA3	; 163
    1410:	95 e0       	ldi	r25, 0x05	; 5
    1412:	0e 94 a3 10 	call	0x2146	; 0x2146 <Timer0_setCallBack>
				Timer_init(&Timer_Config);
    1416:	ce 01       	movw	r24, r28
    1418:	43 96       	adiw	r24, 0x13	; 19
    141a:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <Timer_init>
				OpenDoor();
    141e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <OpenDoor>
			}
		}
		/*re intialize missing counter by zero*/
		missing_count = 0;
    1422:	1f 86       	std	Y+15, r1	; 0x0f
    1424:	47 cf       	rjmp	.-370    	; 0x12b4 <main+0xcc>

00001426 <Buzzer_init>:

/*Description
 *The Function responsible for setup the direction for the buzzer pin.
 *turn off the buzzer at the beginning
 */
void Buzzer_init() {
    1426:	df 93       	push	r29
    1428:	cf 93       	push	r28
    142a:	cd b7       	in	r28, 0x3d	; 61
    142c:	de b7       	in	r29, 0x3e	; 62
	/*Make pin of buzzer output pins*/
	GPIO_setupPinDirection(BUZZER_PORT, BUZZER_PIN, PIN_OUTPUT);
    142e:	83 e0       	ldi	r24, 0x03	; 3
    1430:	64 e0       	ldi	r22, 0x04	; 4
    1432:	41 e0       	ldi	r20, 0x01	; 1
    1434:	0e 94 38 0b 	call	0x1670	; 0x1670 <GPIO_setupPinDirection>
	/*turn off the buzzer at the beginning*/
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_LOW);
    1438:	83 e0       	ldi	r24, 0x03	; 3
    143a:	64 e0       	ldi	r22, 0x04	; 4
    143c:	40 e0       	ldi	r20, 0x00	; 0
    143e:	0e 94 23 0c 	call	0x1846	; 0x1846 <GPIO_writePin>
}
    1442:	cf 91       	pop	r28
    1444:	df 91       	pop	r29
    1446:	08 95       	ret

00001448 <Buzzer_ON>:

/*Description
 *The Function to turn on the buzzer
 */
void Buzzer_ON(){
    1448:	df 93       	push	r29
    144a:	cf 93       	push	r28
    144c:	cd b7       	in	r28, 0x3d	; 61
    144e:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_HIGH);
    1450:	83 e0       	ldi	r24, 0x03	; 3
    1452:	64 e0       	ldi	r22, 0x04	; 4
    1454:	41 e0       	ldi	r20, 0x01	; 1
    1456:	0e 94 23 0c 	call	0x1846	; 0x1846 <GPIO_writePin>
}
    145a:	cf 91       	pop	r28
    145c:	df 91       	pop	r29
    145e:	08 95       	ret

00001460 <Buzzer_OFF>:

/*Description
 *The Function to turn on the buzzer
 */
void Buzzer_OFF(){
    1460:	df 93       	push	r29
    1462:	cf 93       	push	r28
    1464:	cd b7       	in	r28, 0x3d	; 61
    1466:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_LOW);
    1468:	83 e0       	ldi	r24, 0x03	; 3
    146a:	64 e0       	ldi	r22, 0x04	; 4
    146c:	40 e0       	ldi	r20, 0x00	; 0
    146e:	0e 94 23 0c 	call	0x1846	; 0x1846 <GPIO_writePin>
}
    1472:	cf 91       	pop	r28
    1474:	df 91       	pop	r29
    1476:	08 95       	ret

00001478 <DcMotor_init>:

/*Description
 *The Function responsible for setup the direction for the two motor pins.
 *Stop at the DC-Motor at the beginning
 */
void DcMotor_init() {
    1478:	df 93       	push	r29
    147a:	cf 93       	push	r28
    147c:	cd b7       	in	r28, 0x3d	; 61
    147e:	de b7       	in	r29, 0x3e	; 62
	/*Make two pin of motors output pins*/
	GPIO_setupPinDirection(DCMOTOR_OUT1_PORT, DCMOTOR_OUT1_PIN, PIN_OUTPUT);
    1480:	82 e0       	ldi	r24, 0x02	; 2
    1482:	62 e0       	ldi	r22, 0x02	; 2
    1484:	41 e0       	ldi	r20, 0x01	; 1
    1486:	0e 94 38 0b 	call	0x1670	; 0x1670 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DCMOTOR_OUT2_PORT, DCMOTOR_OUT2_PIN, PIN_OUTPUT);
    148a:	82 e0       	ldi	r24, 0x02	; 2
    148c:	63 e0       	ldi	r22, 0x03	; 3
    148e:	41 e0       	ldi	r20, 0x01	; 1
    1490:	0e 94 38 0b 	call	0x1670	; 0x1670 <GPIO_setupPinDirection>
	/*STOP motor at the beginning*/
	GPIO_writePin(DCMOTOR_OUT1_PORT, DCMOTOR_OUT1_PIN, LOGIC_LOW);
    1494:	82 e0       	ldi	r24, 0x02	; 2
    1496:	62 e0       	ldi	r22, 0x02	; 2
    1498:	40 e0       	ldi	r20, 0x00	; 0
    149a:	0e 94 23 0c 	call	0x1846	; 0x1846 <GPIO_writePin>
	GPIO_writePin(DCMOTOR_OUT2_PORT, DCMOTOR_OUT2_PIN, LOGIC_LOW);
    149e:	82 e0       	ldi	r24, 0x02	; 2
    14a0:	63 e0       	ldi	r22, 0x03	; 3
    14a2:	40 e0       	ldi	r20, 0x00	; 0
    14a4:	0e 94 23 0c 	call	0x1846	; 0x1846 <GPIO_writePin>
}
    14a8:	cf 91       	pop	r28
    14aa:	df 91       	pop	r29
    14ac:	08 95       	ret

000014ae <DcMotor_Rotate>:
/*Description:
 *The function responsible for rotate the DC Motor CW/ or A-CW or
 stop the motor based on the state input state value.
 */

void DcMotor_Rotate(DcMotor_State state) {
    14ae:	df 93       	push	r29
    14b0:	cf 93       	push	r28
    14b2:	00 d0       	rcall	.+0      	; 0x14b4 <DcMotor_Rotate+0x6>
    14b4:	0f 92       	push	r0
    14b6:	cd b7       	in	r28, 0x3d	; 61
    14b8:	de b7       	in	r29, 0x3e	; 62
    14ba:	89 83       	std	Y+1, r24	; 0x01
	switch (state) {
    14bc:	89 81       	ldd	r24, Y+1	; 0x01
    14be:	28 2f       	mov	r18, r24
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	3b 83       	std	Y+3, r19	; 0x03
    14c4:	2a 83       	std	Y+2, r18	; 0x02
    14c6:	8a 81       	ldd	r24, Y+2	; 0x02
    14c8:	9b 81       	ldd	r25, Y+3	; 0x03
    14ca:	81 30       	cpi	r24, 0x01	; 1
    14cc:	91 05       	cpc	r25, r1
    14ce:	a1 f0       	breq	.+40     	; 0x14f8 <DcMotor_Rotate+0x4a>
    14d0:	2a 81       	ldd	r18, Y+2	; 0x02
    14d2:	3b 81       	ldd	r19, Y+3	; 0x03
    14d4:	22 30       	cpi	r18, 0x02	; 2
    14d6:	31 05       	cpc	r19, r1
    14d8:	d1 f0       	breq	.+52     	; 0x150e <DcMotor_Rotate+0x60>
    14da:	8a 81       	ldd	r24, Y+2	; 0x02
    14dc:	9b 81       	ldd	r25, Y+3	; 0x03
    14de:	00 97       	sbiw	r24, 0x00	; 0
    14e0:	01 f5       	brne	.+64     	; 0x1522 <DcMotor_Rotate+0x74>
	case OFF:
		GPIO_writePin(DCMOTOR_OUT1_PORT, DCMOTOR_OUT1_PIN, LOGIC_LOW);
    14e2:	82 e0       	ldi	r24, 0x02	; 2
    14e4:	62 e0       	ldi	r22, 0x02	; 2
    14e6:	40 e0       	ldi	r20, 0x00	; 0
    14e8:	0e 94 23 0c 	call	0x1846	; 0x1846 <GPIO_writePin>
		GPIO_writePin(DCMOTOR_OUT2_PORT, DCMOTOR_OUT2_PIN, LOGIC_LOW);
    14ec:	82 e0       	ldi	r24, 0x02	; 2
    14ee:	63 e0       	ldi	r22, 0x03	; 3
    14f0:	40 e0       	ldi	r20, 0x00	; 0
    14f2:	0e 94 23 0c 	call	0x1846	; 0x1846 <GPIO_writePin>
    14f6:	15 c0       	rjmp	.+42     	; 0x1522 <DcMotor_Rotate+0x74>
		break;
	case ON_CW:
		GPIO_writePin(DCMOTOR_OUT1_PORT, DCMOTOR_OUT1_PIN, LOGIC_LOW);
    14f8:	82 e0       	ldi	r24, 0x02	; 2
    14fa:	62 e0       	ldi	r22, 0x02	; 2
    14fc:	40 e0       	ldi	r20, 0x00	; 0
    14fe:	0e 94 23 0c 	call	0x1846	; 0x1846 <GPIO_writePin>
		GPIO_writePin(DCMOTOR_OUT2_PORT, DCMOTOR_OUT2_PIN, LOGIC_HIGH);
    1502:	82 e0       	ldi	r24, 0x02	; 2
    1504:	63 e0       	ldi	r22, 0x03	; 3
    1506:	41 e0       	ldi	r20, 0x01	; 1
    1508:	0e 94 23 0c 	call	0x1846	; 0x1846 <GPIO_writePin>
    150c:	0a c0       	rjmp	.+20     	; 0x1522 <DcMotor_Rotate+0x74>
		break;
	case ON_ACW:
		GPIO_writePin(DCMOTOR_OUT1_PORT, DCMOTOR_OUT1_PIN, LOGIC_HIGH);
    150e:	82 e0       	ldi	r24, 0x02	; 2
    1510:	62 e0       	ldi	r22, 0x02	; 2
    1512:	41 e0       	ldi	r20, 0x01	; 1
    1514:	0e 94 23 0c 	call	0x1846	; 0x1846 <GPIO_writePin>
		GPIO_writePin(DCMOTOR_OUT2_PORT, DCMOTOR_OUT2_PIN, LOGIC_LOW);
    1518:	82 e0       	ldi	r24, 0x02	; 2
    151a:	63 e0       	ldi	r22, 0x03	; 3
    151c:	40 e0       	ldi	r20, 0x00	; 0
    151e:	0e 94 23 0c 	call	0x1846	; 0x1846 <GPIO_writePin>
		break;
	}
}
    1522:	0f 90       	pop	r0
    1524:	0f 90       	pop	r0
    1526:	0f 90       	pop	r0
    1528:	cf 91       	pop	r28
    152a:	df 91       	pop	r29
    152c:	08 95       	ret

0000152e <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    152e:	df 93       	push	r29
    1530:	cf 93       	push	r28
    1532:	00 d0       	rcall	.+0      	; 0x1534 <EEPROM_writeByte+0x6>
    1534:	00 d0       	rcall	.+0      	; 0x1536 <EEPROM_writeByte+0x8>
    1536:	cd b7       	in	r28, 0x3d	; 61
    1538:	de b7       	in	r29, 0x3e	; 62
    153a:	9a 83       	std	Y+2, r25	; 0x02
    153c:	89 83       	std	Y+1, r24	; 0x01
    153e:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1540:	0e 94 82 11 	call	0x2304	; 0x2304 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1544:	0e 94 da 11 	call	0x23b4	; 0x23b4 <TWI_getStatus>
    1548:	88 30       	cpi	r24, 0x08	; 8
    154a:	11 f0       	breq	.+4      	; 0x1550 <EEPROM_writeByte+0x22>
        return ERROR;
    154c:	1c 82       	std	Y+4, r1	; 0x04
    154e:	28 c0       	rjmp	.+80     	; 0x15a0 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1550:	89 81       	ldd	r24, Y+1	; 0x01
    1552:	9a 81       	ldd	r25, Y+2	; 0x02
    1554:	80 70       	andi	r24, 0x00	; 0
    1556:	97 70       	andi	r25, 0x07	; 7
    1558:	88 0f       	add	r24, r24
    155a:	89 2f       	mov	r24, r25
    155c:	88 1f       	adc	r24, r24
    155e:	99 0b       	sbc	r25, r25
    1560:	91 95       	neg	r25
    1562:	80 6a       	ori	r24, 0xA0	; 160
    1564:	0e 94 9d 11 	call	0x233a	; 0x233a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1568:	0e 94 da 11 	call	0x23b4	; 0x23b4 <TWI_getStatus>
    156c:	88 31       	cpi	r24, 0x18	; 24
    156e:	11 f0       	breq	.+4      	; 0x1574 <EEPROM_writeByte+0x46>
        return ERROR; 
    1570:	1c 82       	std	Y+4, r1	; 0x04
    1572:	16 c0       	rjmp	.+44     	; 0x15a0 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1574:	89 81       	ldd	r24, Y+1	; 0x01
    1576:	0e 94 9d 11 	call	0x233a	; 0x233a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    157a:	0e 94 da 11 	call	0x23b4	; 0x23b4 <TWI_getStatus>
    157e:	88 32       	cpi	r24, 0x28	; 40
    1580:	11 f0       	breq	.+4      	; 0x1586 <EEPROM_writeByte+0x58>
        return ERROR;
    1582:	1c 82       	std	Y+4, r1	; 0x04
    1584:	0d c0       	rjmp	.+26     	; 0x15a0 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    1586:	8b 81       	ldd	r24, Y+3	; 0x03
    1588:	0e 94 9d 11 	call	0x233a	; 0x233a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    158c:	0e 94 da 11 	call	0x23b4	; 0x23b4 <TWI_getStatus>
    1590:	88 32       	cpi	r24, 0x28	; 40
    1592:	11 f0       	breq	.+4      	; 0x1598 <EEPROM_writeByte+0x6a>
        return ERROR;
    1594:	1c 82       	std	Y+4, r1	; 0x04
    1596:	04 c0       	rjmp	.+8      	; 0x15a0 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1598:	0e 94 92 11 	call	0x2324	; 0x2324 <TWI_stop>
	
    return SUCCESS;
    159c:	81 e0       	ldi	r24, 0x01	; 1
    159e:	8c 83       	std	Y+4, r24	; 0x04
    15a0:	8c 81       	ldd	r24, Y+4	; 0x04
}
    15a2:	0f 90       	pop	r0
    15a4:	0f 90       	pop	r0
    15a6:	0f 90       	pop	r0
    15a8:	0f 90       	pop	r0
    15aa:	cf 91       	pop	r28
    15ac:	df 91       	pop	r29
    15ae:	08 95       	ret

000015b0 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    15b0:	df 93       	push	r29
    15b2:	cf 93       	push	r28
    15b4:	00 d0       	rcall	.+0      	; 0x15b6 <EEPROM_readByte+0x6>
    15b6:	00 d0       	rcall	.+0      	; 0x15b8 <EEPROM_readByte+0x8>
    15b8:	0f 92       	push	r0
    15ba:	cd b7       	in	r28, 0x3d	; 61
    15bc:	de b7       	in	r29, 0x3e	; 62
    15be:	9a 83       	std	Y+2, r25	; 0x02
    15c0:	89 83       	std	Y+1, r24	; 0x01
    15c2:	7c 83       	std	Y+4, r23	; 0x04
    15c4:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    15c6:	0e 94 82 11 	call	0x2304	; 0x2304 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    15ca:	0e 94 da 11 	call	0x23b4	; 0x23b4 <TWI_getStatus>
    15ce:	88 30       	cpi	r24, 0x08	; 8
    15d0:	11 f0       	breq	.+4      	; 0x15d6 <EEPROM_readByte+0x26>
        return ERROR;
    15d2:	1d 82       	std	Y+5, r1	; 0x05
    15d4:	44 c0       	rjmp	.+136    	; 0x165e <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    15d6:	89 81       	ldd	r24, Y+1	; 0x01
    15d8:	9a 81       	ldd	r25, Y+2	; 0x02
    15da:	80 70       	andi	r24, 0x00	; 0
    15dc:	97 70       	andi	r25, 0x07	; 7
    15de:	88 0f       	add	r24, r24
    15e0:	89 2f       	mov	r24, r25
    15e2:	88 1f       	adc	r24, r24
    15e4:	99 0b       	sbc	r25, r25
    15e6:	91 95       	neg	r25
    15e8:	80 6a       	ori	r24, 0xA0	; 160
    15ea:	0e 94 9d 11 	call	0x233a	; 0x233a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    15ee:	0e 94 da 11 	call	0x23b4	; 0x23b4 <TWI_getStatus>
    15f2:	88 31       	cpi	r24, 0x18	; 24
    15f4:	11 f0       	breq	.+4      	; 0x15fa <EEPROM_readByte+0x4a>
        return ERROR;
    15f6:	1d 82       	std	Y+5, r1	; 0x05
    15f8:	32 c0       	rjmp	.+100    	; 0x165e <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    15fa:	89 81       	ldd	r24, Y+1	; 0x01
    15fc:	0e 94 9d 11 	call	0x233a	; 0x233a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1600:	0e 94 da 11 	call	0x23b4	; 0x23b4 <TWI_getStatus>
    1604:	88 32       	cpi	r24, 0x28	; 40
    1606:	11 f0       	breq	.+4      	; 0x160c <EEPROM_readByte+0x5c>
        return ERROR;
    1608:	1d 82       	std	Y+5, r1	; 0x05
    160a:	29 c0       	rjmp	.+82     	; 0x165e <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    160c:	0e 94 82 11 	call	0x2304	; 0x2304 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    1610:	0e 94 da 11 	call	0x23b4	; 0x23b4 <TWI_getStatus>
    1614:	80 31       	cpi	r24, 0x10	; 16
    1616:	11 f0       	breq	.+4      	; 0x161c <EEPROM_readByte+0x6c>
        return ERROR;
    1618:	1d 82       	std	Y+5, r1	; 0x05
    161a:	21 c0       	rjmp	.+66     	; 0x165e <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    161c:	89 81       	ldd	r24, Y+1	; 0x01
    161e:	9a 81       	ldd	r25, Y+2	; 0x02
    1620:	80 70       	andi	r24, 0x00	; 0
    1622:	97 70       	andi	r25, 0x07	; 7
    1624:	88 0f       	add	r24, r24
    1626:	89 2f       	mov	r24, r25
    1628:	88 1f       	adc	r24, r24
    162a:	99 0b       	sbc	r25, r25
    162c:	91 95       	neg	r25
    162e:	81 6a       	ori	r24, 0xA1	; 161
    1630:	0e 94 9d 11 	call	0x233a	; 0x233a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1634:	0e 94 da 11 	call	0x23b4	; 0x23b4 <TWI_getStatus>
    1638:	80 34       	cpi	r24, 0x40	; 64
    163a:	11 f0       	breq	.+4      	; 0x1640 <EEPROM_readByte+0x90>
        return ERROR;
    163c:	1d 82       	std	Y+5, r1	; 0x05
    163e:	0f c0       	rjmp	.+30     	; 0x165e <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1640:	0e 94 c7 11 	call	0x238e	; 0x238e <TWI_readByteWithNACK>
    1644:	eb 81       	ldd	r30, Y+3	; 0x03
    1646:	fc 81       	ldd	r31, Y+4	; 0x04
    1648:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    164a:	0e 94 da 11 	call	0x23b4	; 0x23b4 <TWI_getStatus>
    164e:	88 35       	cpi	r24, 0x58	; 88
    1650:	11 f0       	breq	.+4      	; 0x1656 <EEPROM_readByte+0xa6>
        return ERROR;
    1652:	1d 82       	std	Y+5, r1	; 0x05
    1654:	04 c0       	rjmp	.+8      	; 0x165e <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1656:	0e 94 92 11 	call	0x2324	; 0x2324 <TWI_stop>

    return SUCCESS;
    165a:	81 e0       	ldi	r24, 0x01	; 1
    165c:	8d 83       	std	Y+5, r24	; 0x05
    165e:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1660:	0f 90       	pop	r0
    1662:	0f 90       	pop	r0
    1664:	0f 90       	pop	r0
    1666:	0f 90       	pop	r0
    1668:	0f 90       	pop	r0
    166a:	cf 91       	pop	r28
    166c:	df 91       	pop	r29
    166e:	08 95       	ret

00001670 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1670:	df 93       	push	r29
    1672:	cf 93       	push	r28
    1674:	00 d0       	rcall	.+0      	; 0x1676 <GPIO_setupPinDirection+0x6>
    1676:	00 d0       	rcall	.+0      	; 0x1678 <GPIO_setupPinDirection+0x8>
    1678:	0f 92       	push	r0
    167a:	cd b7       	in	r28, 0x3d	; 61
    167c:	de b7       	in	r29, 0x3e	; 62
    167e:	89 83       	std	Y+1, r24	; 0x01
    1680:	6a 83       	std	Y+2, r22	; 0x02
    1682:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1684:	8a 81       	ldd	r24, Y+2	; 0x02
    1686:	88 30       	cpi	r24, 0x08	; 8
    1688:	08 f0       	brcs	.+2      	; 0x168c <GPIO_setupPinDirection+0x1c>
    168a:	d5 c0       	rjmp	.+426    	; 0x1836 <GPIO_setupPinDirection+0x1c6>
    168c:	89 81       	ldd	r24, Y+1	; 0x01
    168e:	84 30       	cpi	r24, 0x04	; 4
    1690:	08 f0       	brcs	.+2      	; 0x1694 <GPIO_setupPinDirection+0x24>
    1692:	d1 c0       	rjmp	.+418    	; 0x1836 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1694:	89 81       	ldd	r24, Y+1	; 0x01
    1696:	28 2f       	mov	r18, r24
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	3d 83       	std	Y+5, r19	; 0x05
    169c:	2c 83       	std	Y+4, r18	; 0x04
    169e:	8c 81       	ldd	r24, Y+4	; 0x04
    16a0:	9d 81       	ldd	r25, Y+5	; 0x05
    16a2:	81 30       	cpi	r24, 0x01	; 1
    16a4:	91 05       	cpc	r25, r1
    16a6:	09 f4       	brne	.+2      	; 0x16aa <GPIO_setupPinDirection+0x3a>
    16a8:	43 c0       	rjmp	.+134    	; 0x1730 <GPIO_setupPinDirection+0xc0>
    16aa:	2c 81       	ldd	r18, Y+4	; 0x04
    16ac:	3d 81       	ldd	r19, Y+5	; 0x05
    16ae:	22 30       	cpi	r18, 0x02	; 2
    16b0:	31 05       	cpc	r19, r1
    16b2:	2c f4       	brge	.+10     	; 0x16be <GPIO_setupPinDirection+0x4e>
    16b4:	8c 81       	ldd	r24, Y+4	; 0x04
    16b6:	9d 81       	ldd	r25, Y+5	; 0x05
    16b8:	00 97       	sbiw	r24, 0x00	; 0
    16ba:	71 f0       	breq	.+28     	; 0x16d8 <GPIO_setupPinDirection+0x68>
    16bc:	bc c0       	rjmp	.+376    	; 0x1836 <GPIO_setupPinDirection+0x1c6>
    16be:	2c 81       	ldd	r18, Y+4	; 0x04
    16c0:	3d 81       	ldd	r19, Y+5	; 0x05
    16c2:	22 30       	cpi	r18, 0x02	; 2
    16c4:	31 05       	cpc	r19, r1
    16c6:	09 f4       	brne	.+2      	; 0x16ca <GPIO_setupPinDirection+0x5a>
    16c8:	5f c0       	rjmp	.+190    	; 0x1788 <GPIO_setupPinDirection+0x118>
    16ca:	8c 81       	ldd	r24, Y+4	; 0x04
    16cc:	9d 81       	ldd	r25, Y+5	; 0x05
    16ce:	83 30       	cpi	r24, 0x03	; 3
    16d0:	91 05       	cpc	r25, r1
    16d2:	09 f4       	brne	.+2      	; 0x16d6 <GPIO_setupPinDirection+0x66>
    16d4:	85 c0       	rjmp	.+266    	; 0x17e0 <GPIO_setupPinDirection+0x170>
    16d6:	af c0       	rjmp	.+350    	; 0x1836 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    16d8:	8b 81       	ldd	r24, Y+3	; 0x03
    16da:	81 30       	cpi	r24, 0x01	; 1
    16dc:	a1 f4       	brne	.+40     	; 0x1706 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    16de:	aa e3       	ldi	r26, 0x3A	; 58
    16e0:	b0 e0       	ldi	r27, 0x00	; 0
    16e2:	ea e3       	ldi	r30, 0x3A	; 58
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	80 81       	ld	r24, Z
    16e8:	48 2f       	mov	r20, r24
    16ea:	8a 81       	ldd	r24, Y+2	; 0x02
    16ec:	28 2f       	mov	r18, r24
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	81 e0       	ldi	r24, 0x01	; 1
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	02 2e       	mov	r0, r18
    16f6:	02 c0       	rjmp	.+4      	; 0x16fc <GPIO_setupPinDirection+0x8c>
    16f8:	88 0f       	add	r24, r24
    16fa:	99 1f       	adc	r25, r25
    16fc:	0a 94       	dec	r0
    16fe:	e2 f7       	brpl	.-8      	; 0x16f8 <GPIO_setupPinDirection+0x88>
    1700:	84 2b       	or	r24, r20
    1702:	8c 93       	st	X, r24
    1704:	98 c0       	rjmp	.+304    	; 0x1836 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1706:	aa e3       	ldi	r26, 0x3A	; 58
    1708:	b0 e0       	ldi	r27, 0x00	; 0
    170a:	ea e3       	ldi	r30, 0x3A	; 58
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	80 81       	ld	r24, Z
    1710:	48 2f       	mov	r20, r24
    1712:	8a 81       	ldd	r24, Y+2	; 0x02
    1714:	28 2f       	mov	r18, r24
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	81 e0       	ldi	r24, 0x01	; 1
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	02 2e       	mov	r0, r18
    171e:	02 c0       	rjmp	.+4      	; 0x1724 <GPIO_setupPinDirection+0xb4>
    1720:	88 0f       	add	r24, r24
    1722:	99 1f       	adc	r25, r25
    1724:	0a 94       	dec	r0
    1726:	e2 f7       	brpl	.-8      	; 0x1720 <GPIO_setupPinDirection+0xb0>
    1728:	80 95       	com	r24
    172a:	84 23       	and	r24, r20
    172c:	8c 93       	st	X, r24
    172e:	83 c0       	rjmp	.+262    	; 0x1836 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1730:	8b 81       	ldd	r24, Y+3	; 0x03
    1732:	81 30       	cpi	r24, 0x01	; 1
    1734:	a1 f4       	brne	.+40     	; 0x175e <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1736:	a7 e3       	ldi	r26, 0x37	; 55
    1738:	b0 e0       	ldi	r27, 0x00	; 0
    173a:	e7 e3       	ldi	r30, 0x37	; 55
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	80 81       	ld	r24, Z
    1740:	48 2f       	mov	r20, r24
    1742:	8a 81       	ldd	r24, Y+2	; 0x02
    1744:	28 2f       	mov	r18, r24
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	81 e0       	ldi	r24, 0x01	; 1
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	02 2e       	mov	r0, r18
    174e:	02 c0       	rjmp	.+4      	; 0x1754 <GPIO_setupPinDirection+0xe4>
    1750:	88 0f       	add	r24, r24
    1752:	99 1f       	adc	r25, r25
    1754:	0a 94       	dec	r0
    1756:	e2 f7       	brpl	.-8      	; 0x1750 <GPIO_setupPinDirection+0xe0>
    1758:	84 2b       	or	r24, r20
    175a:	8c 93       	st	X, r24
    175c:	6c c0       	rjmp	.+216    	; 0x1836 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    175e:	a7 e3       	ldi	r26, 0x37	; 55
    1760:	b0 e0       	ldi	r27, 0x00	; 0
    1762:	e7 e3       	ldi	r30, 0x37	; 55
    1764:	f0 e0       	ldi	r31, 0x00	; 0
    1766:	80 81       	ld	r24, Z
    1768:	48 2f       	mov	r20, r24
    176a:	8a 81       	ldd	r24, Y+2	; 0x02
    176c:	28 2f       	mov	r18, r24
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	81 e0       	ldi	r24, 0x01	; 1
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	02 2e       	mov	r0, r18
    1776:	02 c0       	rjmp	.+4      	; 0x177c <GPIO_setupPinDirection+0x10c>
    1778:	88 0f       	add	r24, r24
    177a:	99 1f       	adc	r25, r25
    177c:	0a 94       	dec	r0
    177e:	e2 f7       	brpl	.-8      	; 0x1778 <GPIO_setupPinDirection+0x108>
    1780:	80 95       	com	r24
    1782:	84 23       	and	r24, r20
    1784:	8c 93       	st	X, r24
    1786:	57 c0       	rjmp	.+174    	; 0x1836 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1788:	8b 81       	ldd	r24, Y+3	; 0x03
    178a:	81 30       	cpi	r24, 0x01	; 1
    178c:	a1 f4       	brne	.+40     	; 0x17b6 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    178e:	a4 e3       	ldi	r26, 0x34	; 52
    1790:	b0 e0       	ldi	r27, 0x00	; 0
    1792:	e4 e3       	ldi	r30, 0x34	; 52
    1794:	f0 e0       	ldi	r31, 0x00	; 0
    1796:	80 81       	ld	r24, Z
    1798:	48 2f       	mov	r20, r24
    179a:	8a 81       	ldd	r24, Y+2	; 0x02
    179c:	28 2f       	mov	r18, r24
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	81 e0       	ldi	r24, 0x01	; 1
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	02 2e       	mov	r0, r18
    17a6:	02 c0       	rjmp	.+4      	; 0x17ac <GPIO_setupPinDirection+0x13c>
    17a8:	88 0f       	add	r24, r24
    17aa:	99 1f       	adc	r25, r25
    17ac:	0a 94       	dec	r0
    17ae:	e2 f7       	brpl	.-8      	; 0x17a8 <GPIO_setupPinDirection+0x138>
    17b0:	84 2b       	or	r24, r20
    17b2:	8c 93       	st	X, r24
    17b4:	40 c0       	rjmp	.+128    	; 0x1836 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    17b6:	a4 e3       	ldi	r26, 0x34	; 52
    17b8:	b0 e0       	ldi	r27, 0x00	; 0
    17ba:	e4 e3       	ldi	r30, 0x34	; 52
    17bc:	f0 e0       	ldi	r31, 0x00	; 0
    17be:	80 81       	ld	r24, Z
    17c0:	48 2f       	mov	r20, r24
    17c2:	8a 81       	ldd	r24, Y+2	; 0x02
    17c4:	28 2f       	mov	r18, r24
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	81 e0       	ldi	r24, 0x01	; 1
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	02 2e       	mov	r0, r18
    17ce:	02 c0       	rjmp	.+4      	; 0x17d4 <GPIO_setupPinDirection+0x164>
    17d0:	88 0f       	add	r24, r24
    17d2:	99 1f       	adc	r25, r25
    17d4:	0a 94       	dec	r0
    17d6:	e2 f7       	brpl	.-8      	; 0x17d0 <GPIO_setupPinDirection+0x160>
    17d8:	80 95       	com	r24
    17da:	84 23       	and	r24, r20
    17dc:	8c 93       	st	X, r24
    17de:	2b c0       	rjmp	.+86     	; 0x1836 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    17e0:	8b 81       	ldd	r24, Y+3	; 0x03
    17e2:	81 30       	cpi	r24, 0x01	; 1
    17e4:	a1 f4       	brne	.+40     	; 0x180e <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    17e6:	a1 e3       	ldi	r26, 0x31	; 49
    17e8:	b0 e0       	ldi	r27, 0x00	; 0
    17ea:	e1 e3       	ldi	r30, 0x31	; 49
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	80 81       	ld	r24, Z
    17f0:	48 2f       	mov	r20, r24
    17f2:	8a 81       	ldd	r24, Y+2	; 0x02
    17f4:	28 2f       	mov	r18, r24
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	81 e0       	ldi	r24, 0x01	; 1
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	02 2e       	mov	r0, r18
    17fe:	02 c0       	rjmp	.+4      	; 0x1804 <GPIO_setupPinDirection+0x194>
    1800:	88 0f       	add	r24, r24
    1802:	99 1f       	adc	r25, r25
    1804:	0a 94       	dec	r0
    1806:	e2 f7       	brpl	.-8      	; 0x1800 <GPIO_setupPinDirection+0x190>
    1808:	84 2b       	or	r24, r20
    180a:	8c 93       	st	X, r24
    180c:	14 c0       	rjmp	.+40     	; 0x1836 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    180e:	a1 e3       	ldi	r26, 0x31	; 49
    1810:	b0 e0       	ldi	r27, 0x00	; 0
    1812:	e1 e3       	ldi	r30, 0x31	; 49
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	80 81       	ld	r24, Z
    1818:	48 2f       	mov	r20, r24
    181a:	8a 81       	ldd	r24, Y+2	; 0x02
    181c:	28 2f       	mov	r18, r24
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	02 2e       	mov	r0, r18
    1826:	02 c0       	rjmp	.+4      	; 0x182c <GPIO_setupPinDirection+0x1bc>
    1828:	88 0f       	add	r24, r24
    182a:	99 1f       	adc	r25, r25
    182c:	0a 94       	dec	r0
    182e:	e2 f7       	brpl	.-8      	; 0x1828 <GPIO_setupPinDirection+0x1b8>
    1830:	80 95       	com	r24
    1832:	84 23       	and	r24, r20
    1834:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1836:	0f 90       	pop	r0
    1838:	0f 90       	pop	r0
    183a:	0f 90       	pop	r0
    183c:	0f 90       	pop	r0
    183e:	0f 90       	pop	r0
    1840:	cf 91       	pop	r28
    1842:	df 91       	pop	r29
    1844:	08 95       	ret

00001846 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1846:	df 93       	push	r29
    1848:	cf 93       	push	r28
    184a:	00 d0       	rcall	.+0      	; 0x184c <GPIO_writePin+0x6>
    184c:	00 d0       	rcall	.+0      	; 0x184e <GPIO_writePin+0x8>
    184e:	0f 92       	push	r0
    1850:	cd b7       	in	r28, 0x3d	; 61
    1852:	de b7       	in	r29, 0x3e	; 62
    1854:	89 83       	std	Y+1, r24	; 0x01
    1856:	6a 83       	std	Y+2, r22	; 0x02
    1858:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    185a:	8a 81       	ldd	r24, Y+2	; 0x02
    185c:	88 30       	cpi	r24, 0x08	; 8
    185e:	08 f0       	brcs	.+2      	; 0x1862 <GPIO_writePin+0x1c>
    1860:	d5 c0       	rjmp	.+426    	; 0x1a0c <GPIO_writePin+0x1c6>
    1862:	89 81       	ldd	r24, Y+1	; 0x01
    1864:	84 30       	cpi	r24, 0x04	; 4
    1866:	08 f0       	brcs	.+2      	; 0x186a <GPIO_writePin+0x24>
    1868:	d1 c0       	rjmp	.+418    	; 0x1a0c <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    186a:	89 81       	ldd	r24, Y+1	; 0x01
    186c:	28 2f       	mov	r18, r24
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	3d 83       	std	Y+5, r19	; 0x05
    1872:	2c 83       	std	Y+4, r18	; 0x04
    1874:	8c 81       	ldd	r24, Y+4	; 0x04
    1876:	9d 81       	ldd	r25, Y+5	; 0x05
    1878:	81 30       	cpi	r24, 0x01	; 1
    187a:	91 05       	cpc	r25, r1
    187c:	09 f4       	brne	.+2      	; 0x1880 <GPIO_writePin+0x3a>
    187e:	43 c0       	rjmp	.+134    	; 0x1906 <GPIO_writePin+0xc0>
    1880:	2c 81       	ldd	r18, Y+4	; 0x04
    1882:	3d 81       	ldd	r19, Y+5	; 0x05
    1884:	22 30       	cpi	r18, 0x02	; 2
    1886:	31 05       	cpc	r19, r1
    1888:	2c f4       	brge	.+10     	; 0x1894 <GPIO_writePin+0x4e>
    188a:	8c 81       	ldd	r24, Y+4	; 0x04
    188c:	9d 81       	ldd	r25, Y+5	; 0x05
    188e:	00 97       	sbiw	r24, 0x00	; 0
    1890:	71 f0       	breq	.+28     	; 0x18ae <GPIO_writePin+0x68>
    1892:	bc c0       	rjmp	.+376    	; 0x1a0c <GPIO_writePin+0x1c6>
    1894:	2c 81       	ldd	r18, Y+4	; 0x04
    1896:	3d 81       	ldd	r19, Y+5	; 0x05
    1898:	22 30       	cpi	r18, 0x02	; 2
    189a:	31 05       	cpc	r19, r1
    189c:	09 f4       	brne	.+2      	; 0x18a0 <GPIO_writePin+0x5a>
    189e:	5f c0       	rjmp	.+190    	; 0x195e <GPIO_writePin+0x118>
    18a0:	8c 81       	ldd	r24, Y+4	; 0x04
    18a2:	9d 81       	ldd	r25, Y+5	; 0x05
    18a4:	83 30       	cpi	r24, 0x03	; 3
    18a6:	91 05       	cpc	r25, r1
    18a8:	09 f4       	brne	.+2      	; 0x18ac <GPIO_writePin+0x66>
    18aa:	85 c0       	rjmp	.+266    	; 0x19b6 <GPIO_writePin+0x170>
    18ac:	af c0       	rjmp	.+350    	; 0x1a0c <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    18ae:	8b 81       	ldd	r24, Y+3	; 0x03
    18b0:	81 30       	cpi	r24, 0x01	; 1
    18b2:	a1 f4       	brne	.+40     	; 0x18dc <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    18b4:	ab e3       	ldi	r26, 0x3B	; 59
    18b6:	b0 e0       	ldi	r27, 0x00	; 0
    18b8:	eb e3       	ldi	r30, 0x3B	; 59
    18ba:	f0 e0       	ldi	r31, 0x00	; 0
    18bc:	80 81       	ld	r24, Z
    18be:	48 2f       	mov	r20, r24
    18c0:	8a 81       	ldd	r24, Y+2	; 0x02
    18c2:	28 2f       	mov	r18, r24
    18c4:	30 e0       	ldi	r19, 0x00	; 0
    18c6:	81 e0       	ldi	r24, 0x01	; 1
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	02 2e       	mov	r0, r18
    18cc:	02 c0       	rjmp	.+4      	; 0x18d2 <GPIO_writePin+0x8c>
    18ce:	88 0f       	add	r24, r24
    18d0:	99 1f       	adc	r25, r25
    18d2:	0a 94       	dec	r0
    18d4:	e2 f7       	brpl	.-8      	; 0x18ce <GPIO_writePin+0x88>
    18d6:	84 2b       	or	r24, r20
    18d8:	8c 93       	st	X, r24
    18da:	98 c0       	rjmp	.+304    	; 0x1a0c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    18dc:	ab e3       	ldi	r26, 0x3B	; 59
    18de:	b0 e0       	ldi	r27, 0x00	; 0
    18e0:	eb e3       	ldi	r30, 0x3B	; 59
    18e2:	f0 e0       	ldi	r31, 0x00	; 0
    18e4:	80 81       	ld	r24, Z
    18e6:	48 2f       	mov	r20, r24
    18e8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ea:	28 2f       	mov	r18, r24
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	81 e0       	ldi	r24, 0x01	; 1
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	02 2e       	mov	r0, r18
    18f4:	02 c0       	rjmp	.+4      	; 0x18fa <GPIO_writePin+0xb4>
    18f6:	88 0f       	add	r24, r24
    18f8:	99 1f       	adc	r25, r25
    18fa:	0a 94       	dec	r0
    18fc:	e2 f7       	brpl	.-8      	; 0x18f6 <GPIO_writePin+0xb0>
    18fe:	80 95       	com	r24
    1900:	84 23       	and	r24, r20
    1902:	8c 93       	st	X, r24
    1904:	83 c0       	rjmp	.+262    	; 0x1a0c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1906:	8b 81       	ldd	r24, Y+3	; 0x03
    1908:	81 30       	cpi	r24, 0x01	; 1
    190a:	a1 f4       	brne	.+40     	; 0x1934 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    190c:	a8 e3       	ldi	r26, 0x38	; 56
    190e:	b0 e0       	ldi	r27, 0x00	; 0
    1910:	e8 e3       	ldi	r30, 0x38	; 56
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	80 81       	ld	r24, Z
    1916:	48 2f       	mov	r20, r24
    1918:	8a 81       	ldd	r24, Y+2	; 0x02
    191a:	28 2f       	mov	r18, r24
    191c:	30 e0       	ldi	r19, 0x00	; 0
    191e:	81 e0       	ldi	r24, 0x01	; 1
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	02 2e       	mov	r0, r18
    1924:	02 c0       	rjmp	.+4      	; 0x192a <GPIO_writePin+0xe4>
    1926:	88 0f       	add	r24, r24
    1928:	99 1f       	adc	r25, r25
    192a:	0a 94       	dec	r0
    192c:	e2 f7       	brpl	.-8      	; 0x1926 <GPIO_writePin+0xe0>
    192e:	84 2b       	or	r24, r20
    1930:	8c 93       	st	X, r24
    1932:	6c c0       	rjmp	.+216    	; 0x1a0c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1934:	a8 e3       	ldi	r26, 0x38	; 56
    1936:	b0 e0       	ldi	r27, 0x00	; 0
    1938:	e8 e3       	ldi	r30, 0x38	; 56
    193a:	f0 e0       	ldi	r31, 0x00	; 0
    193c:	80 81       	ld	r24, Z
    193e:	48 2f       	mov	r20, r24
    1940:	8a 81       	ldd	r24, Y+2	; 0x02
    1942:	28 2f       	mov	r18, r24
    1944:	30 e0       	ldi	r19, 0x00	; 0
    1946:	81 e0       	ldi	r24, 0x01	; 1
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	02 2e       	mov	r0, r18
    194c:	02 c0       	rjmp	.+4      	; 0x1952 <GPIO_writePin+0x10c>
    194e:	88 0f       	add	r24, r24
    1950:	99 1f       	adc	r25, r25
    1952:	0a 94       	dec	r0
    1954:	e2 f7       	brpl	.-8      	; 0x194e <GPIO_writePin+0x108>
    1956:	80 95       	com	r24
    1958:	84 23       	and	r24, r20
    195a:	8c 93       	st	X, r24
    195c:	57 c0       	rjmp	.+174    	; 0x1a0c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    195e:	8b 81       	ldd	r24, Y+3	; 0x03
    1960:	81 30       	cpi	r24, 0x01	; 1
    1962:	a1 f4       	brne	.+40     	; 0x198c <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1964:	a5 e3       	ldi	r26, 0x35	; 53
    1966:	b0 e0       	ldi	r27, 0x00	; 0
    1968:	e5 e3       	ldi	r30, 0x35	; 53
    196a:	f0 e0       	ldi	r31, 0x00	; 0
    196c:	80 81       	ld	r24, Z
    196e:	48 2f       	mov	r20, r24
    1970:	8a 81       	ldd	r24, Y+2	; 0x02
    1972:	28 2f       	mov	r18, r24
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	81 e0       	ldi	r24, 0x01	; 1
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	02 2e       	mov	r0, r18
    197c:	02 c0       	rjmp	.+4      	; 0x1982 <GPIO_writePin+0x13c>
    197e:	88 0f       	add	r24, r24
    1980:	99 1f       	adc	r25, r25
    1982:	0a 94       	dec	r0
    1984:	e2 f7       	brpl	.-8      	; 0x197e <GPIO_writePin+0x138>
    1986:	84 2b       	or	r24, r20
    1988:	8c 93       	st	X, r24
    198a:	40 c0       	rjmp	.+128    	; 0x1a0c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    198c:	a5 e3       	ldi	r26, 0x35	; 53
    198e:	b0 e0       	ldi	r27, 0x00	; 0
    1990:	e5 e3       	ldi	r30, 0x35	; 53
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	80 81       	ld	r24, Z
    1996:	48 2f       	mov	r20, r24
    1998:	8a 81       	ldd	r24, Y+2	; 0x02
    199a:	28 2f       	mov	r18, r24
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	81 e0       	ldi	r24, 0x01	; 1
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	02 2e       	mov	r0, r18
    19a4:	02 c0       	rjmp	.+4      	; 0x19aa <GPIO_writePin+0x164>
    19a6:	88 0f       	add	r24, r24
    19a8:	99 1f       	adc	r25, r25
    19aa:	0a 94       	dec	r0
    19ac:	e2 f7       	brpl	.-8      	; 0x19a6 <GPIO_writePin+0x160>
    19ae:	80 95       	com	r24
    19b0:	84 23       	and	r24, r20
    19b2:	8c 93       	st	X, r24
    19b4:	2b c0       	rjmp	.+86     	; 0x1a0c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    19b6:	8b 81       	ldd	r24, Y+3	; 0x03
    19b8:	81 30       	cpi	r24, 0x01	; 1
    19ba:	a1 f4       	brne	.+40     	; 0x19e4 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    19bc:	a2 e3       	ldi	r26, 0x32	; 50
    19be:	b0 e0       	ldi	r27, 0x00	; 0
    19c0:	e2 e3       	ldi	r30, 0x32	; 50
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	80 81       	ld	r24, Z
    19c6:	48 2f       	mov	r20, r24
    19c8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ca:	28 2f       	mov	r18, r24
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	81 e0       	ldi	r24, 0x01	; 1
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	02 2e       	mov	r0, r18
    19d4:	02 c0       	rjmp	.+4      	; 0x19da <GPIO_writePin+0x194>
    19d6:	88 0f       	add	r24, r24
    19d8:	99 1f       	adc	r25, r25
    19da:	0a 94       	dec	r0
    19dc:	e2 f7       	brpl	.-8      	; 0x19d6 <GPIO_writePin+0x190>
    19de:	84 2b       	or	r24, r20
    19e0:	8c 93       	st	X, r24
    19e2:	14 c0       	rjmp	.+40     	; 0x1a0c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    19e4:	a2 e3       	ldi	r26, 0x32	; 50
    19e6:	b0 e0       	ldi	r27, 0x00	; 0
    19e8:	e2 e3       	ldi	r30, 0x32	; 50
    19ea:	f0 e0       	ldi	r31, 0x00	; 0
    19ec:	80 81       	ld	r24, Z
    19ee:	48 2f       	mov	r20, r24
    19f0:	8a 81       	ldd	r24, Y+2	; 0x02
    19f2:	28 2f       	mov	r18, r24
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	81 e0       	ldi	r24, 0x01	; 1
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	02 2e       	mov	r0, r18
    19fc:	02 c0       	rjmp	.+4      	; 0x1a02 <GPIO_writePin+0x1bc>
    19fe:	88 0f       	add	r24, r24
    1a00:	99 1f       	adc	r25, r25
    1a02:	0a 94       	dec	r0
    1a04:	e2 f7       	brpl	.-8      	; 0x19fe <GPIO_writePin+0x1b8>
    1a06:	80 95       	com	r24
    1a08:	84 23       	and	r24, r20
    1a0a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1a0c:	0f 90       	pop	r0
    1a0e:	0f 90       	pop	r0
    1a10:	0f 90       	pop	r0
    1a12:	0f 90       	pop	r0
    1a14:	0f 90       	pop	r0
    1a16:	cf 91       	pop	r28
    1a18:	df 91       	pop	r29
    1a1a:	08 95       	ret

00001a1c <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1a1c:	df 93       	push	r29
    1a1e:	cf 93       	push	r28
    1a20:	00 d0       	rcall	.+0      	; 0x1a22 <GPIO_readPin+0x6>
    1a22:	00 d0       	rcall	.+0      	; 0x1a24 <GPIO_readPin+0x8>
    1a24:	0f 92       	push	r0
    1a26:	cd b7       	in	r28, 0x3d	; 61
    1a28:	de b7       	in	r29, 0x3e	; 62
    1a2a:	8a 83       	std	Y+2, r24	; 0x02
    1a2c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1a2e:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1a30:	8b 81       	ldd	r24, Y+3	; 0x03
    1a32:	88 30       	cpi	r24, 0x08	; 8
    1a34:	08 f0       	brcs	.+2      	; 0x1a38 <GPIO_readPin+0x1c>
    1a36:	84 c0       	rjmp	.+264    	; 0x1b40 <GPIO_readPin+0x124>
    1a38:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3a:	84 30       	cpi	r24, 0x04	; 4
    1a3c:	08 f0       	brcs	.+2      	; 0x1a40 <GPIO_readPin+0x24>
    1a3e:	80 c0       	rjmp	.+256    	; 0x1b40 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1a40:	8a 81       	ldd	r24, Y+2	; 0x02
    1a42:	28 2f       	mov	r18, r24
    1a44:	30 e0       	ldi	r19, 0x00	; 0
    1a46:	3d 83       	std	Y+5, r19	; 0x05
    1a48:	2c 83       	std	Y+4, r18	; 0x04
    1a4a:	4c 81       	ldd	r20, Y+4	; 0x04
    1a4c:	5d 81       	ldd	r21, Y+5	; 0x05
    1a4e:	41 30       	cpi	r20, 0x01	; 1
    1a50:	51 05       	cpc	r21, r1
    1a52:	79 f1       	breq	.+94     	; 0x1ab2 <GPIO_readPin+0x96>
    1a54:	8c 81       	ldd	r24, Y+4	; 0x04
    1a56:	9d 81       	ldd	r25, Y+5	; 0x05
    1a58:	82 30       	cpi	r24, 0x02	; 2
    1a5a:	91 05       	cpc	r25, r1
    1a5c:	34 f4       	brge	.+12     	; 0x1a6a <GPIO_readPin+0x4e>
    1a5e:	2c 81       	ldd	r18, Y+4	; 0x04
    1a60:	3d 81       	ldd	r19, Y+5	; 0x05
    1a62:	21 15       	cp	r18, r1
    1a64:	31 05       	cpc	r19, r1
    1a66:	69 f0       	breq	.+26     	; 0x1a82 <GPIO_readPin+0x66>
    1a68:	6b c0       	rjmp	.+214    	; 0x1b40 <GPIO_readPin+0x124>
    1a6a:	4c 81       	ldd	r20, Y+4	; 0x04
    1a6c:	5d 81       	ldd	r21, Y+5	; 0x05
    1a6e:	42 30       	cpi	r20, 0x02	; 2
    1a70:	51 05       	cpc	r21, r1
    1a72:	b9 f1       	breq	.+110    	; 0x1ae2 <GPIO_readPin+0xc6>
    1a74:	8c 81       	ldd	r24, Y+4	; 0x04
    1a76:	9d 81       	ldd	r25, Y+5	; 0x05
    1a78:	83 30       	cpi	r24, 0x03	; 3
    1a7a:	91 05       	cpc	r25, r1
    1a7c:	09 f4       	brne	.+2      	; 0x1a80 <GPIO_readPin+0x64>
    1a7e:	49 c0       	rjmp	.+146    	; 0x1b12 <GPIO_readPin+0xf6>
    1a80:	5f c0       	rjmp	.+190    	; 0x1b40 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1a82:	e9 e3       	ldi	r30, 0x39	; 57
    1a84:	f0 e0       	ldi	r31, 0x00	; 0
    1a86:	80 81       	ld	r24, Z
    1a88:	28 2f       	mov	r18, r24
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8e:	88 2f       	mov	r24, r24
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	a9 01       	movw	r20, r18
    1a94:	02 c0       	rjmp	.+4      	; 0x1a9a <GPIO_readPin+0x7e>
    1a96:	55 95       	asr	r21
    1a98:	47 95       	ror	r20
    1a9a:	8a 95       	dec	r24
    1a9c:	e2 f7       	brpl	.-8      	; 0x1a96 <GPIO_readPin+0x7a>
    1a9e:	ca 01       	movw	r24, r20
    1aa0:	81 70       	andi	r24, 0x01	; 1
    1aa2:	90 70       	andi	r25, 0x00	; 0
    1aa4:	88 23       	and	r24, r24
    1aa6:	19 f0       	breq	.+6      	; 0x1aae <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1aa8:	81 e0       	ldi	r24, 0x01	; 1
    1aaa:	89 83       	std	Y+1, r24	; 0x01
    1aac:	49 c0       	rjmp	.+146    	; 0x1b40 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1aae:	19 82       	std	Y+1, r1	; 0x01
    1ab0:	47 c0       	rjmp	.+142    	; 0x1b40 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1ab2:	e6 e3       	ldi	r30, 0x36	; 54
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	80 81       	ld	r24, Z
    1ab8:	28 2f       	mov	r18, r24
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	8b 81       	ldd	r24, Y+3	; 0x03
    1abe:	88 2f       	mov	r24, r24
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	a9 01       	movw	r20, r18
    1ac4:	02 c0       	rjmp	.+4      	; 0x1aca <GPIO_readPin+0xae>
    1ac6:	55 95       	asr	r21
    1ac8:	47 95       	ror	r20
    1aca:	8a 95       	dec	r24
    1acc:	e2 f7       	brpl	.-8      	; 0x1ac6 <GPIO_readPin+0xaa>
    1ace:	ca 01       	movw	r24, r20
    1ad0:	81 70       	andi	r24, 0x01	; 1
    1ad2:	90 70       	andi	r25, 0x00	; 0
    1ad4:	88 23       	and	r24, r24
    1ad6:	19 f0       	breq	.+6      	; 0x1ade <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1ad8:	81 e0       	ldi	r24, 0x01	; 1
    1ada:	89 83       	std	Y+1, r24	; 0x01
    1adc:	31 c0       	rjmp	.+98     	; 0x1b40 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1ade:	19 82       	std	Y+1, r1	; 0x01
    1ae0:	2f c0       	rjmp	.+94     	; 0x1b40 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1ae2:	e3 e3       	ldi	r30, 0x33	; 51
    1ae4:	f0 e0       	ldi	r31, 0x00	; 0
    1ae6:	80 81       	ld	r24, Z
    1ae8:	28 2f       	mov	r18, r24
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	8b 81       	ldd	r24, Y+3	; 0x03
    1aee:	88 2f       	mov	r24, r24
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	a9 01       	movw	r20, r18
    1af4:	02 c0       	rjmp	.+4      	; 0x1afa <GPIO_readPin+0xde>
    1af6:	55 95       	asr	r21
    1af8:	47 95       	ror	r20
    1afa:	8a 95       	dec	r24
    1afc:	e2 f7       	brpl	.-8      	; 0x1af6 <GPIO_readPin+0xda>
    1afe:	ca 01       	movw	r24, r20
    1b00:	81 70       	andi	r24, 0x01	; 1
    1b02:	90 70       	andi	r25, 0x00	; 0
    1b04:	88 23       	and	r24, r24
    1b06:	19 f0       	breq	.+6      	; 0x1b0e <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1b08:	81 e0       	ldi	r24, 0x01	; 1
    1b0a:	89 83       	std	Y+1, r24	; 0x01
    1b0c:	19 c0       	rjmp	.+50     	; 0x1b40 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1b0e:	19 82       	std	Y+1, r1	; 0x01
    1b10:	17 c0       	rjmp	.+46     	; 0x1b40 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1b12:	e0 e3       	ldi	r30, 0x30	; 48
    1b14:	f0 e0       	ldi	r31, 0x00	; 0
    1b16:	80 81       	ld	r24, Z
    1b18:	28 2f       	mov	r18, r24
    1b1a:	30 e0       	ldi	r19, 0x00	; 0
    1b1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1e:	88 2f       	mov	r24, r24
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	a9 01       	movw	r20, r18
    1b24:	02 c0       	rjmp	.+4      	; 0x1b2a <GPIO_readPin+0x10e>
    1b26:	55 95       	asr	r21
    1b28:	47 95       	ror	r20
    1b2a:	8a 95       	dec	r24
    1b2c:	e2 f7       	brpl	.-8      	; 0x1b26 <GPIO_readPin+0x10a>
    1b2e:	ca 01       	movw	r24, r20
    1b30:	81 70       	andi	r24, 0x01	; 1
    1b32:	90 70       	andi	r25, 0x00	; 0
    1b34:	88 23       	and	r24, r24
    1b36:	19 f0       	breq	.+6      	; 0x1b3e <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1b38:	81 e0       	ldi	r24, 0x01	; 1
    1b3a:	89 83       	std	Y+1, r24	; 0x01
    1b3c:	01 c0       	rjmp	.+2      	; 0x1b40 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1b3e:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1b40:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b42:	0f 90       	pop	r0
    1b44:	0f 90       	pop	r0
    1b46:	0f 90       	pop	r0
    1b48:	0f 90       	pop	r0
    1b4a:	0f 90       	pop	r0
    1b4c:	cf 91       	pop	r28
    1b4e:	df 91       	pop	r29
    1b50:	08 95       	ret

00001b52 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1b52:	df 93       	push	r29
    1b54:	cf 93       	push	r28
    1b56:	00 d0       	rcall	.+0      	; 0x1b58 <GPIO_setupPortDirection+0x6>
    1b58:	00 d0       	rcall	.+0      	; 0x1b5a <GPIO_setupPortDirection+0x8>
    1b5a:	cd b7       	in	r28, 0x3d	; 61
    1b5c:	de b7       	in	r29, 0x3e	; 62
    1b5e:	89 83       	std	Y+1, r24	; 0x01
    1b60:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1b62:	89 81       	ldd	r24, Y+1	; 0x01
    1b64:	84 30       	cpi	r24, 0x04	; 4
    1b66:	90 f5       	brcc	.+100    	; 0x1bcc <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1b68:	89 81       	ldd	r24, Y+1	; 0x01
    1b6a:	28 2f       	mov	r18, r24
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	3c 83       	std	Y+4, r19	; 0x04
    1b70:	2b 83       	std	Y+3, r18	; 0x03
    1b72:	8b 81       	ldd	r24, Y+3	; 0x03
    1b74:	9c 81       	ldd	r25, Y+4	; 0x04
    1b76:	81 30       	cpi	r24, 0x01	; 1
    1b78:	91 05       	cpc	r25, r1
    1b7a:	d1 f0       	breq	.+52     	; 0x1bb0 <GPIO_setupPortDirection+0x5e>
    1b7c:	2b 81       	ldd	r18, Y+3	; 0x03
    1b7e:	3c 81       	ldd	r19, Y+4	; 0x04
    1b80:	22 30       	cpi	r18, 0x02	; 2
    1b82:	31 05       	cpc	r19, r1
    1b84:	2c f4       	brge	.+10     	; 0x1b90 <GPIO_setupPortDirection+0x3e>
    1b86:	8b 81       	ldd	r24, Y+3	; 0x03
    1b88:	9c 81       	ldd	r25, Y+4	; 0x04
    1b8a:	00 97       	sbiw	r24, 0x00	; 0
    1b8c:	61 f0       	breq	.+24     	; 0x1ba6 <GPIO_setupPortDirection+0x54>
    1b8e:	1e c0       	rjmp	.+60     	; 0x1bcc <GPIO_setupPortDirection+0x7a>
    1b90:	2b 81       	ldd	r18, Y+3	; 0x03
    1b92:	3c 81       	ldd	r19, Y+4	; 0x04
    1b94:	22 30       	cpi	r18, 0x02	; 2
    1b96:	31 05       	cpc	r19, r1
    1b98:	81 f0       	breq	.+32     	; 0x1bba <GPIO_setupPortDirection+0x68>
    1b9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b9e:	83 30       	cpi	r24, 0x03	; 3
    1ba0:	91 05       	cpc	r25, r1
    1ba2:	81 f0       	breq	.+32     	; 0x1bc4 <GPIO_setupPortDirection+0x72>
    1ba4:	13 c0       	rjmp	.+38     	; 0x1bcc <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1ba6:	ea e3       	ldi	r30, 0x3A	; 58
    1ba8:	f0 e0       	ldi	r31, 0x00	; 0
    1baa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bac:	80 83       	st	Z, r24
    1bae:	0e c0       	rjmp	.+28     	; 0x1bcc <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1bb0:	e7 e3       	ldi	r30, 0x37	; 55
    1bb2:	f0 e0       	ldi	r31, 0x00	; 0
    1bb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb6:	80 83       	st	Z, r24
    1bb8:	09 c0       	rjmp	.+18     	; 0x1bcc <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1bba:	e4 e3       	ldi	r30, 0x34	; 52
    1bbc:	f0 e0       	ldi	r31, 0x00	; 0
    1bbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc0:	80 83       	st	Z, r24
    1bc2:	04 c0       	rjmp	.+8      	; 0x1bcc <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1bc4:	e1 e3       	ldi	r30, 0x31	; 49
    1bc6:	f0 e0       	ldi	r31, 0x00	; 0
    1bc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bca:	80 83       	st	Z, r24
			break;
		}
	}
}
    1bcc:	0f 90       	pop	r0
    1bce:	0f 90       	pop	r0
    1bd0:	0f 90       	pop	r0
    1bd2:	0f 90       	pop	r0
    1bd4:	cf 91       	pop	r28
    1bd6:	df 91       	pop	r29
    1bd8:	08 95       	ret

00001bda <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1bda:	df 93       	push	r29
    1bdc:	cf 93       	push	r28
    1bde:	00 d0       	rcall	.+0      	; 0x1be0 <GPIO_writePort+0x6>
    1be0:	00 d0       	rcall	.+0      	; 0x1be2 <GPIO_writePort+0x8>
    1be2:	cd b7       	in	r28, 0x3d	; 61
    1be4:	de b7       	in	r29, 0x3e	; 62
    1be6:	89 83       	std	Y+1, r24	; 0x01
    1be8:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1bea:	89 81       	ldd	r24, Y+1	; 0x01
    1bec:	84 30       	cpi	r24, 0x04	; 4
    1bee:	90 f5       	brcc	.+100    	; 0x1c54 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1bf0:	89 81       	ldd	r24, Y+1	; 0x01
    1bf2:	28 2f       	mov	r18, r24
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	3c 83       	std	Y+4, r19	; 0x04
    1bf8:	2b 83       	std	Y+3, r18	; 0x03
    1bfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfc:	9c 81       	ldd	r25, Y+4	; 0x04
    1bfe:	81 30       	cpi	r24, 0x01	; 1
    1c00:	91 05       	cpc	r25, r1
    1c02:	d1 f0       	breq	.+52     	; 0x1c38 <GPIO_writePort+0x5e>
    1c04:	2b 81       	ldd	r18, Y+3	; 0x03
    1c06:	3c 81       	ldd	r19, Y+4	; 0x04
    1c08:	22 30       	cpi	r18, 0x02	; 2
    1c0a:	31 05       	cpc	r19, r1
    1c0c:	2c f4       	brge	.+10     	; 0x1c18 <GPIO_writePort+0x3e>
    1c0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c10:	9c 81       	ldd	r25, Y+4	; 0x04
    1c12:	00 97       	sbiw	r24, 0x00	; 0
    1c14:	61 f0       	breq	.+24     	; 0x1c2e <GPIO_writePort+0x54>
    1c16:	1e c0       	rjmp	.+60     	; 0x1c54 <GPIO_writePort+0x7a>
    1c18:	2b 81       	ldd	r18, Y+3	; 0x03
    1c1a:	3c 81       	ldd	r19, Y+4	; 0x04
    1c1c:	22 30       	cpi	r18, 0x02	; 2
    1c1e:	31 05       	cpc	r19, r1
    1c20:	81 f0       	breq	.+32     	; 0x1c42 <GPIO_writePort+0x68>
    1c22:	8b 81       	ldd	r24, Y+3	; 0x03
    1c24:	9c 81       	ldd	r25, Y+4	; 0x04
    1c26:	83 30       	cpi	r24, 0x03	; 3
    1c28:	91 05       	cpc	r25, r1
    1c2a:	81 f0       	breq	.+32     	; 0x1c4c <GPIO_writePort+0x72>
    1c2c:	13 c0       	rjmp	.+38     	; 0x1c54 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1c2e:	eb e3       	ldi	r30, 0x3B	; 59
    1c30:	f0 e0       	ldi	r31, 0x00	; 0
    1c32:	8a 81       	ldd	r24, Y+2	; 0x02
    1c34:	80 83       	st	Z, r24
    1c36:	0e c0       	rjmp	.+28     	; 0x1c54 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1c38:	e8 e3       	ldi	r30, 0x38	; 56
    1c3a:	f0 e0       	ldi	r31, 0x00	; 0
    1c3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3e:	80 83       	st	Z, r24
    1c40:	09 c0       	rjmp	.+18     	; 0x1c54 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1c42:	e5 e3       	ldi	r30, 0x35	; 53
    1c44:	f0 e0       	ldi	r31, 0x00	; 0
    1c46:	8a 81       	ldd	r24, Y+2	; 0x02
    1c48:	80 83       	st	Z, r24
    1c4a:	04 c0       	rjmp	.+8      	; 0x1c54 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1c4c:	e2 e3       	ldi	r30, 0x32	; 50
    1c4e:	f0 e0       	ldi	r31, 0x00	; 0
    1c50:	8a 81       	ldd	r24, Y+2	; 0x02
    1c52:	80 83       	st	Z, r24
			break;
		}
	}
}
    1c54:	0f 90       	pop	r0
    1c56:	0f 90       	pop	r0
    1c58:	0f 90       	pop	r0
    1c5a:	0f 90       	pop	r0
    1c5c:	cf 91       	pop	r28
    1c5e:	df 91       	pop	r29
    1c60:	08 95       	ret

00001c62 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1c62:	df 93       	push	r29
    1c64:	cf 93       	push	r28
    1c66:	00 d0       	rcall	.+0      	; 0x1c68 <GPIO_readPort+0x6>
    1c68:	00 d0       	rcall	.+0      	; 0x1c6a <GPIO_readPort+0x8>
    1c6a:	cd b7       	in	r28, 0x3d	; 61
    1c6c:	de b7       	in	r29, 0x3e	; 62
    1c6e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1c70:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1c72:	8a 81       	ldd	r24, Y+2	; 0x02
    1c74:	84 30       	cpi	r24, 0x04	; 4
    1c76:	90 f5       	brcc	.+100    	; 0x1cdc <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1c78:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7a:	28 2f       	mov	r18, r24
    1c7c:	30 e0       	ldi	r19, 0x00	; 0
    1c7e:	3c 83       	std	Y+4, r19	; 0x04
    1c80:	2b 83       	std	Y+3, r18	; 0x03
    1c82:	8b 81       	ldd	r24, Y+3	; 0x03
    1c84:	9c 81       	ldd	r25, Y+4	; 0x04
    1c86:	81 30       	cpi	r24, 0x01	; 1
    1c88:	91 05       	cpc	r25, r1
    1c8a:	d1 f0       	breq	.+52     	; 0x1cc0 <GPIO_readPort+0x5e>
    1c8c:	2b 81       	ldd	r18, Y+3	; 0x03
    1c8e:	3c 81       	ldd	r19, Y+4	; 0x04
    1c90:	22 30       	cpi	r18, 0x02	; 2
    1c92:	31 05       	cpc	r19, r1
    1c94:	2c f4       	brge	.+10     	; 0x1ca0 <GPIO_readPort+0x3e>
    1c96:	8b 81       	ldd	r24, Y+3	; 0x03
    1c98:	9c 81       	ldd	r25, Y+4	; 0x04
    1c9a:	00 97       	sbiw	r24, 0x00	; 0
    1c9c:	61 f0       	breq	.+24     	; 0x1cb6 <GPIO_readPort+0x54>
    1c9e:	1e c0       	rjmp	.+60     	; 0x1cdc <GPIO_readPort+0x7a>
    1ca0:	2b 81       	ldd	r18, Y+3	; 0x03
    1ca2:	3c 81       	ldd	r19, Y+4	; 0x04
    1ca4:	22 30       	cpi	r18, 0x02	; 2
    1ca6:	31 05       	cpc	r19, r1
    1ca8:	81 f0       	breq	.+32     	; 0x1cca <GPIO_readPort+0x68>
    1caa:	8b 81       	ldd	r24, Y+3	; 0x03
    1cac:	9c 81       	ldd	r25, Y+4	; 0x04
    1cae:	83 30       	cpi	r24, 0x03	; 3
    1cb0:	91 05       	cpc	r25, r1
    1cb2:	81 f0       	breq	.+32     	; 0x1cd4 <GPIO_readPort+0x72>
    1cb4:	13 c0       	rjmp	.+38     	; 0x1cdc <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1cb6:	e9 e3       	ldi	r30, 0x39	; 57
    1cb8:	f0 e0       	ldi	r31, 0x00	; 0
    1cba:	80 81       	ld	r24, Z
    1cbc:	89 83       	std	Y+1, r24	; 0x01
    1cbe:	0e c0       	rjmp	.+28     	; 0x1cdc <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1cc0:	e6 e3       	ldi	r30, 0x36	; 54
    1cc2:	f0 e0       	ldi	r31, 0x00	; 0
    1cc4:	80 81       	ld	r24, Z
    1cc6:	89 83       	std	Y+1, r24	; 0x01
    1cc8:	09 c0       	rjmp	.+18     	; 0x1cdc <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1cca:	e3 e3       	ldi	r30, 0x33	; 51
    1ccc:	f0 e0       	ldi	r31, 0x00	; 0
    1cce:	80 81       	ld	r24, Z
    1cd0:	89 83       	std	Y+1, r24	; 0x01
    1cd2:	04 c0       	rjmp	.+8      	; 0x1cdc <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1cd4:	e0 e3       	ldi	r30, 0x30	; 48
    1cd6:	f0 e0       	ldi	r31, 0x00	; 0
    1cd8:	80 81       	ld	r24, Z
    1cda:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1cdc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cde:	0f 90       	pop	r0
    1ce0:	0f 90       	pop	r0
    1ce2:	0f 90       	pop	r0
    1ce4:	0f 90       	pop	r0
    1ce6:	cf 91       	pop	r28
    1ce8:	df 91       	pop	r29
    1cea:	08 95       	ret

00001cec <__vector_19>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

/******************************************* Timer0 ISR ***************************************/
ISR(TIMER0_COMP_vect) {
    1cec:	1f 92       	push	r1
    1cee:	0f 92       	push	r0
    1cf0:	0f b6       	in	r0, 0x3f	; 63
    1cf2:	0f 92       	push	r0
    1cf4:	11 24       	eor	r1, r1
    1cf6:	2f 93       	push	r18
    1cf8:	3f 93       	push	r19
    1cfa:	4f 93       	push	r20
    1cfc:	5f 93       	push	r21
    1cfe:	6f 93       	push	r22
    1d00:	7f 93       	push	r23
    1d02:	8f 93       	push	r24
    1d04:	9f 93       	push	r25
    1d06:	af 93       	push	r26
    1d08:	bf 93       	push	r27
    1d0a:	ef 93       	push	r30
    1d0c:	ff 93       	push	r31
    1d0e:	df 93       	push	r29
    1d10:	cf 93       	push	r28
    1d12:	cd b7       	in	r28, 0x3d	; 61
    1d14:	de b7       	in	r29, 0x3e	; 62
	if (g_timer0_callBackPtr != NULL_PTR) {
    1d16:	80 91 80 00 	lds	r24, 0x0080
    1d1a:	90 91 81 00 	lds	r25, 0x0081
    1d1e:	00 97       	sbiw	r24, 0x00	; 0
    1d20:	29 f0       	breq	.+10     	; 0x1d2c <__vector_19+0x40>
		/* Call the Call Back function in the application after the edge is detected */
		(*g_timer0_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1d22:	e0 91 80 00 	lds	r30, 0x0080
    1d26:	f0 91 81 00 	lds	r31, 0x0081
    1d2a:	09 95       	icall
	}
}
    1d2c:	cf 91       	pop	r28
    1d2e:	df 91       	pop	r29
    1d30:	ff 91       	pop	r31
    1d32:	ef 91       	pop	r30
    1d34:	bf 91       	pop	r27
    1d36:	af 91       	pop	r26
    1d38:	9f 91       	pop	r25
    1d3a:	8f 91       	pop	r24
    1d3c:	7f 91       	pop	r23
    1d3e:	6f 91       	pop	r22
    1d40:	5f 91       	pop	r21
    1d42:	4f 91       	pop	r20
    1d44:	3f 91       	pop	r19
    1d46:	2f 91       	pop	r18
    1d48:	0f 90       	pop	r0
    1d4a:	0f be       	out	0x3f, r0	; 63
    1d4c:	0f 90       	pop	r0
    1d4e:	1f 90       	pop	r1
    1d50:	18 95       	reti

00001d52 <__vector_9>:
ISR(TIMER0_OVF_vect) {
    1d52:	1f 92       	push	r1
    1d54:	0f 92       	push	r0
    1d56:	0f b6       	in	r0, 0x3f	; 63
    1d58:	0f 92       	push	r0
    1d5a:	11 24       	eor	r1, r1
    1d5c:	2f 93       	push	r18
    1d5e:	3f 93       	push	r19
    1d60:	4f 93       	push	r20
    1d62:	5f 93       	push	r21
    1d64:	6f 93       	push	r22
    1d66:	7f 93       	push	r23
    1d68:	8f 93       	push	r24
    1d6a:	9f 93       	push	r25
    1d6c:	af 93       	push	r26
    1d6e:	bf 93       	push	r27
    1d70:	ef 93       	push	r30
    1d72:	ff 93       	push	r31
    1d74:	df 93       	push	r29
    1d76:	cf 93       	push	r28
    1d78:	cd b7       	in	r28, 0x3d	; 61
    1d7a:	de b7       	in	r29, 0x3e	; 62
	if (g_timer0_callBackPtr != NULL_PTR) {
    1d7c:	80 91 80 00 	lds	r24, 0x0080
    1d80:	90 91 81 00 	lds	r25, 0x0081
    1d84:	00 97       	sbiw	r24, 0x00	; 0
    1d86:	29 f0       	breq	.+10     	; 0x1d92 <__vector_9+0x40>
		/* Call the Call Back function in the application after the edge is detected */
		(*g_timer0_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1d88:	e0 91 80 00 	lds	r30, 0x0080
    1d8c:	f0 91 81 00 	lds	r31, 0x0081
    1d90:	09 95       	icall
	}
}
    1d92:	cf 91       	pop	r28
    1d94:	df 91       	pop	r29
    1d96:	ff 91       	pop	r31
    1d98:	ef 91       	pop	r30
    1d9a:	bf 91       	pop	r27
    1d9c:	af 91       	pop	r26
    1d9e:	9f 91       	pop	r25
    1da0:	8f 91       	pop	r24
    1da2:	7f 91       	pop	r23
    1da4:	6f 91       	pop	r22
    1da6:	5f 91       	pop	r21
    1da8:	4f 91       	pop	r20
    1daa:	3f 91       	pop	r19
    1dac:	2f 91       	pop	r18
    1dae:	0f 90       	pop	r0
    1db0:	0f be       	out	0x3f, r0	; 63
    1db2:	0f 90       	pop	r0
    1db4:	1f 90       	pop	r1
    1db6:	18 95       	reti

00001db8 <__vector_6>:

/******************************************* Timer1 ISR ***************************************/

ISR(TIMER1_COMPA_vect) {
    1db8:	1f 92       	push	r1
    1dba:	0f 92       	push	r0
    1dbc:	0f b6       	in	r0, 0x3f	; 63
    1dbe:	0f 92       	push	r0
    1dc0:	11 24       	eor	r1, r1
    1dc2:	2f 93       	push	r18
    1dc4:	3f 93       	push	r19
    1dc6:	4f 93       	push	r20
    1dc8:	5f 93       	push	r21
    1dca:	6f 93       	push	r22
    1dcc:	7f 93       	push	r23
    1dce:	8f 93       	push	r24
    1dd0:	9f 93       	push	r25
    1dd2:	af 93       	push	r26
    1dd4:	bf 93       	push	r27
    1dd6:	ef 93       	push	r30
    1dd8:	ff 93       	push	r31
    1dda:	df 93       	push	r29
    1ddc:	cf 93       	push	r28
    1dde:	cd b7       	in	r28, 0x3d	; 61
    1de0:	de b7       	in	r29, 0x3e	; 62
	if (g_timer1_callBackPtr != NULL_PTR) {
    1de2:	80 91 82 00 	lds	r24, 0x0082
    1de6:	90 91 83 00 	lds	r25, 0x0083
    1dea:	00 97       	sbiw	r24, 0x00	; 0
    1dec:	29 f0       	breq	.+10     	; 0x1df8 <__vector_6+0x40>
		/* Call the Call Back function in the application after the edge is detected */
		(*g_timer1_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1dee:	e0 91 82 00 	lds	r30, 0x0082
    1df2:	f0 91 83 00 	lds	r31, 0x0083
    1df6:	09 95       	icall
	}
}
    1df8:	cf 91       	pop	r28
    1dfa:	df 91       	pop	r29
    1dfc:	ff 91       	pop	r31
    1dfe:	ef 91       	pop	r30
    1e00:	bf 91       	pop	r27
    1e02:	af 91       	pop	r26
    1e04:	9f 91       	pop	r25
    1e06:	8f 91       	pop	r24
    1e08:	7f 91       	pop	r23
    1e0a:	6f 91       	pop	r22
    1e0c:	5f 91       	pop	r21
    1e0e:	4f 91       	pop	r20
    1e10:	3f 91       	pop	r19
    1e12:	2f 91       	pop	r18
    1e14:	0f 90       	pop	r0
    1e16:	0f be       	out	0x3f, r0	; 63
    1e18:	0f 90       	pop	r0
    1e1a:	1f 90       	pop	r1
    1e1c:	18 95       	reti

00001e1e <__vector_8>:
ISR(TIMER1_OVF_vect) {
    1e1e:	1f 92       	push	r1
    1e20:	0f 92       	push	r0
    1e22:	0f b6       	in	r0, 0x3f	; 63
    1e24:	0f 92       	push	r0
    1e26:	11 24       	eor	r1, r1
    1e28:	2f 93       	push	r18
    1e2a:	3f 93       	push	r19
    1e2c:	4f 93       	push	r20
    1e2e:	5f 93       	push	r21
    1e30:	6f 93       	push	r22
    1e32:	7f 93       	push	r23
    1e34:	8f 93       	push	r24
    1e36:	9f 93       	push	r25
    1e38:	af 93       	push	r26
    1e3a:	bf 93       	push	r27
    1e3c:	ef 93       	push	r30
    1e3e:	ff 93       	push	r31
    1e40:	df 93       	push	r29
    1e42:	cf 93       	push	r28
    1e44:	cd b7       	in	r28, 0x3d	; 61
    1e46:	de b7       	in	r29, 0x3e	; 62
	if (g_timer1_callBackPtr != NULL_PTR) {
    1e48:	80 91 82 00 	lds	r24, 0x0082
    1e4c:	90 91 83 00 	lds	r25, 0x0083
    1e50:	00 97       	sbiw	r24, 0x00	; 0
    1e52:	29 f0       	breq	.+10     	; 0x1e5e <__vector_8+0x40>
		/* Call the Call Back function in the application after the edge is detected */
		(*g_timer1_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1e54:	e0 91 82 00 	lds	r30, 0x0082
    1e58:	f0 91 83 00 	lds	r31, 0x0083
    1e5c:	09 95       	icall
	}
}
    1e5e:	cf 91       	pop	r28
    1e60:	df 91       	pop	r29
    1e62:	ff 91       	pop	r31
    1e64:	ef 91       	pop	r30
    1e66:	bf 91       	pop	r27
    1e68:	af 91       	pop	r26
    1e6a:	9f 91       	pop	r25
    1e6c:	8f 91       	pop	r24
    1e6e:	7f 91       	pop	r23
    1e70:	6f 91       	pop	r22
    1e72:	5f 91       	pop	r21
    1e74:	4f 91       	pop	r20
    1e76:	3f 91       	pop	r19
    1e78:	2f 91       	pop	r18
    1e7a:	0f 90       	pop	r0
    1e7c:	0f be       	out	0x3f, r0	; 63
    1e7e:	0f 90       	pop	r0
    1e80:	1f 90       	pop	r1
    1e82:	18 95       	reti

00001e84 <__vector_3>:

/******************************************* Timer2 ISR ***************************************/

ISR(TIMER2_COMP_vect) {
    1e84:	1f 92       	push	r1
    1e86:	0f 92       	push	r0
    1e88:	0f b6       	in	r0, 0x3f	; 63
    1e8a:	0f 92       	push	r0
    1e8c:	11 24       	eor	r1, r1
    1e8e:	2f 93       	push	r18
    1e90:	3f 93       	push	r19
    1e92:	4f 93       	push	r20
    1e94:	5f 93       	push	r21
    1e96:	6f 93       	push	r22
    1e98:	7f 93       	push	r23
    1e9a:	8f 93       	push	r24
    1e9c:	9f 93       	push	r25
    1e9e:	af 93       	push	r26
    1ea0:	bf 93       	push	r27
    1ea2:	ef 93       	push	r30
    1ea4:	ff 93       	push	r31
    1ea6:	df 93       	push	r29
    1ea8:	cf 93       	push	r28
    1eaa:	cd b7       	in	r28, 0x3d	; 61
    1eac:	de b7       	in	r29, 0x3e	; 62
	if (g_timer2_callBackPtr != NULL_PTR) {
    1eae:	80 91 84 00 	lds	r24, 0x0084
    1eb2:	90 91 85 00 	lds	r25, 0x0085
    1eb6:	00 97       	sbiw	r24, 0x00	; 0
    1eb8:	29 f0       	breq	.+10     	; 0x1ec4 <__vector_3+0x40>
		/* Call the Call Back function in the application after the edge is detected */
		(*g_timer2_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1eba:	e0 91 84 00 	lds	r30, 0x0084
    1ebe:	f0 91 85 00 	lds	r31, 0x0085
    1ec2:	09 95       	icall
	}
}
    1ec4:	cf 91       	pop	r28
    1ec6:	df 91       	pop	r29
    1ec8:	ff 91       	pop	r31
    1eca:	ef 91       	pop	r30
    1ecc:	bf 91       	pop	r27
    1ece:	af 91       	pop	r26
    1ed0:	9f 91       	pop	r25
    1ed2:	8f 91       	pop	r24
    1ed4:	7f 91       	pop	r23
    1ed6:	6f 91       	pop	r22
    1ed8:	5f 91       	pop	r21
    1eda:	4f 91       	pop	r20
    1edc:	3f 91       	pop	r19
    1ede:	2f 91       	pop	r18
    1ee0:	0f 90       	pop	r0
    1ee2:	0f be       	out	0x3f, r0	; 63
    1ee4:	0f 90       	pop	r0
    1ee6:	1f 90       	pop	r1
    1ee8:	18 95       	reti

00001eea <__vector_4>:
ISR(TIMER2_OVF_vect) {
    1eea:	1f 92       	push	r1
    1eec:	0f 92       	push	r0
    1eee:	0f b6       	in	r0, 0x3f	; 63
    1ef0:	0f 92       	push	r0
    1ef2:	11 24       	eor	r1, r1
    1ef4:	2f 93       	push	r18
    1ef6:	3f 93       	push	r19
    1ef8:	4f 93       	push	r20
    1efa:	5f 93       	push	r21
    1efc:	6f 93       	push	r22
    1efe:	7f 93       	push	r23
    1f00:	8f 93       	push	r24
    1f02:	9f 93       	push	r25
    1f04:	af 93       	push	r26
    1f06:	bf 93       	push	r27
    1f08:	ef 93       	push	r30
    1f0a:	ff 93       	push	r31
    1f0c:	df 93       	push	r29
    1f0e:	cf 93       	push	r28
    1f10:	cd b7       	in	r28, 0x3d	; 61
    1f12:	de b7       	in	r29, 0x3e	; 62
	if (g_timer2_callBackPtr != NULL_PTR) {
    1f14:	80 91 84 00 	lds	r24, 0x0084
    1f18:	90 91 85 00 	lds	r25, 0x0085
    1f1c:	00 97       	sbiw	r24, 0x00	; 0
    1f1e:	29 f0       	breq	.+10     	; 0x1f2a <__vector_4+0x40>
		/* Call the Call Back function in the application after the edge is detected */
		(*g_timer2_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1f20:	e0 91 84 00 	lds	r30, 0x0084
    1f24:	f0 91 85 00 	lds	r31, 0x0085
    1f28:	09 95       	icall
	}
}
    1f2a:	cf 91       	pop	r28
    1f2c:	df 91       	pop	r29
    1f2e:	ff 91       	pop	r31
    1f30:	ef 91       	pop	r30
    1f32:	bf 91       	pop	r27
    1f34:	af 91       	pop	r26
    1f36:	9f 91       	pop	r25
    1f38:	8f 91       	pop	r24
    1f3a:	7f 91       	pop	r23
    1f3c:	6f 91       	pop	r22
    1f3e:	5f 91       	pop	r21
    1f40:	4f 91       	pop	r20
    1f42:	3f 91       	pop	r19
    1f44:	2f 91       	pop	r18
    1f46:	0f 90       	pop	r0
    1f48:	0f be       	out	0x3f, r0	; 63
    1f4a:	0f 90       	pop	r0
    1f4c:	1f 90       	pop	r1
    1f4e:	18 95       	reti

00001f50 <Timer_init>:
 * 	3. Set the required presca le.
 * 	4. Enable the Interrupt.
 * 	5. Set the intial value for timer
 */

void Timer_init(Timer_ConfigType *Config_Ptr) {
    1f50:	df 93       	push	r29
    1f52:	cf 93       	push	r28
    1f54:	00 d0       	rcall	.+0      	; 0x1f56 <Timer_init+0x6>
    1f56:	00 d0       	rcall	.+0      	; 0x1f58 <Timer_init+0x8>
    1f58:	cd b7       	in	r28, 0x3d	; 61
    1f5a:	de b7       	in	r29, 0x3e	; 62
    1f5c:	9a 83       	std	Y+2, r25	; 0x02
    1f5e:	89 83       	std	Y+1, r24	; 0x01
	switch (Config_Ptr->timer_number) {
    1f60:	e9 81       	ldd	r30, Y+1	; 0x01
    1f62:	fa 81       	ldd	r31, Y+2	; 0x02
    1f64:	80 81       	ld	r24, Z
    1f66:	28 2f       	mov	r18, r24
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	3c 83       	std	Y+4, r19	; 0x04
    1f6c:	2b 83       	std	Y+3, r18	; 0x03
    1f6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f70:	9c 81       	ldd	r25, Y+4	; 0x04
    1f72:	81 30       	cpi	r24, 0x01	; 1
    1f74:	91 05       	cpc	r25, r1
    1f76:	09 f4       	brne	.+2      	; 0x1f7a <Timer_init+0x2a>
    1f78:	4b c0       	rjmp	.+150    	; 0x2010 <Timer_init+0xc0>
    1f7a:	2b 81       	ldd	r18, Y+3	; 0x03
    1f7c:	3c 81       	ldd	r19, Y+4	; 0x04
    1f7e:	22 30       	cpi	r18, 0x02	; 2
    1f80:	31 05       	cpc	r19, r1
    1f82:	09 f4       	brne	.+2      	; 0x1f86 <Timer_init+0x36>
    1f84:	86 c0       	rjmp	.+268    	; 0x2092 <Timer_init+0x142>
    1f86:	8b 81       	ldd	r24, Y+3	; 0x03
    1f88:	9c 81       	ldd	r25, Y+4	; 0x04
    1f8a:	00 97       	sbiw	r24, 0x00	; 0
    1f8c:	09 f0       	breq	.+2      	; 0x1f90 <Timer_init+0x40>
    1f8e:	d4 c0       	rjmp	.+424    	; 0x2138 <Timer_init+0x1e8>
	case TIMER_0:
		/*FOC0=1 for non-PWM mode */
		TCCR0 = (1 << FOC0);
    1f90:	e3 e5       	ldi	r30, 0x53	; 83
    1f92:	f0 e0       	ldi	r31, 0x00	; 0
    1f94:	80 e8       	ldi	r24, 0x80	; 128
    1f96:	80 83       	st	Z, r24
		/*set the required mode for timer*/
		/*for normal mode WGM00=0,WGM01=0;
		 *for compare match mode WGM00=0,WGM01=1
		 * */
		if (Config_Ptr->mode == COMPARE_MATCH_MODE) {
    1f98:	e9 81       	ldd	r30, Y+1	; 0x01
    1f9a:	fa 81       	ldd	r31, Y+2	; 0x02
    1f9c:	81 81       	ldd	r24, Z+1	; 0x01
    1f9e:	81 30       	cpi	r24, 0x01	; 1
    1fa0:	b1 f4       	brne	.+44     	; 0x1fce <Timer_init+0x7e>
			SET_BIT(TCCR0, WGM01);
    1fa2:	a3 e5       	ldi	r26, 0x53	; 83
    1fa4:	b0 e0       	ldi	r27, 0x00	; 0
    1fa6:	e3 e5       	ldi	r30, 0x53	; 83
    1fa8:	f0 e0       	ldi	r31, 0x00	; 0
    1faa:	80 81       	ld	r24, Z
    1fac:	88 60       	ori	r24, 0x08	; 8
    1fae:	8c 93       	st	X, r24
			/*
			 * insert the required compare match value in OCR0 Register
			 */
			OCR0 = Config_Ptr->compare_value;
    1fb0:	ac e5       	ldi	r26, 0x5C	; 92
    1fb2:	b0 e0       	ldi	r27, 0x00	; 0
    1fb4:	e9 81       	ldd	r30, Y+1	; 0x01
    1fb6:	fa 81       	ldd	r31, Y+2	; 0x02
    1fb8:	84 81       	ldd	r24, Z+4	; 0x04
    1fba:	95 81       	ldd	r25, Z+5	; 0x05
    1fbc:	8c 93       	st	X, r24
			/* Enable the compare match interrupt to generate an interrupt when compare match occurs*/
			SET_BIT(TIMSK, OCIE0);
    1fbe:	a9 e5       	ldi	r26, 0x59	; 89
    1fc0:	b0 e0       	ldi	r27, 0x00	; 0
    1fc2:	e9 e5       	ldi	r30, 0x59	; 89
    1fc4:	f0 e0       	ldi	r31, 0x00	; 0
    1fc6:	80 81       	ld	r24, Z
    1fc8:	82 60       	ori	r24, 0x02	; 2
    1fca:	8c 93       	st	X, r24
    1fcc:	0c c0       	rjmp	.+24     	; 0x1fe6 <Timer_init+0x96>
		} else if (Config_Ptr->mode == NORMAL_MODE) {
    1fce:	e9 81       	ldd	r30, Y+1	; 0x01
    1fd0:	fa 81       	ldd	r31, Y+2	; 0x02
    1fd2:	81 81       	ldd	r24, Z+1	; 0x01
    1fd4:	88 23       	and	r24, r24
    1fd6:	39 f4       	brne	.+14     	; 0x1fe6 <Timer_init+0x96>
			/* Enable the overflow interrupt to generate an interrupt when overflow occurs*/
			SET_BIT(TIMSK, TOIE0);
    1fd8:	a9 e5       	ldi	r26, 0x59	; 89
    1fda:	b0 e0       	ldi	r27, 0x00	; 0
    1fdc:	e9 e5       	ldi	r30, 0x59	; 89
    1fde:	f0 e0       	ldi	r31, 0x00	; 0
    1fe0:	80 81       	ld	r24, Z
    1fe2:	81 60       	ori	r24, 0x01	; 1
    1fe4:	8c 93       	st	X, r24
		}
		/*
		 * insert the required clock value in the first three bits (CS00, CS01 and CS02)
		 * of TCCR0 Register
		 */
		TCCR0 = (TCCR0 & 0XF8) | (Config_Ptr->prescale & 0x07);
    1fe6:	a3 e5       	ldi	r26, 0x53	; 83
    1fe8:	b0 e0       	ldi	r27, 0x00	; 0
    1fea:	e3 e5       	ldi	r30, 0x53	; 83
    1fec:	f0 e0       	ldi	r31, 0x00	; 0
    1fee:	80 81       	ld	r24, Z
    1ff0:	98 2f       	mov	r25, r24
    1ff2:	98 7f       	andi	r25, 0xF8	; 248
    1ff4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ff6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ff8:	86 81       	ldd	r24, Z+6	; 0x06
    1ffa:	87 70       	andi	r24, 0x07	; 7
    1ffc:	89 2b       	or	r24, r25
    1ffe:	8c 93       	st	X, r24
		/*
		 * insert the required intial value in TCNT0 Register
		 */
		TCNT0 = Config_Ptr->intial_value;
    2000:	a2 e5       	ldi	r26, 0x52	; 82
    2002:	b0 e0       	ldi	r27, 0x00	; 0
    2004:	e9 81       	ldd	r30, Y+1	; 0x01
    2006:	fa 81       	ldd	r31, Y+2	; 0x02
    2008:	82 81       	ldd	r24, Z+2	; 0x02
    200a:	93 81       	ldd	r25, Z+3	; 0x03
    200c:	8c 93       	st	X, r24
    200e:	94 c0       	rjmp	.+296    	; 0x2138 <Timer_init+0x1e8>
		break;
	case TIMER_1:
		/*FOC1A=1 ,FOC1B=1 for non-PWM mode */
		TCCR1A = (1 << FOC1A) | (1 << FOC1B);
    2010:	ef e4       	ldi	r30, 0x4F	; 79
    2012:	f0 e0       	ldi	r31, 0x00	; 0
    2014:	8c e0       	ldi	r24, 0x0C	; 12
    2016:	80 83       	st	Z, r24
		/*set the required mode for timer*/
		/*for normal mode WGM10=0,WGM11=0,WGM12=0,WGM13=0;
		 *for compare match mode WGM10=0,WGM11=0,WGM12=1,WGM13=0
		 * */
		if (Config_Ptr->mode == COMPARE_MATCH_MODE) {
    2018:	e9 81       	ldd	r30, Y+1	; 0x01
    201a:	fa 81       	ldd	r31, Y+2	; 0x02
    201c:	81 81       	ldd	r24, Z+1	; 0x01
    201e:	81 30       	cpi	r24, 0x01	; 1
    2020:	a9 f4       	brne	.+42     	; 0x204c <Timer_init+0xfc>
			TCCR1B = (1 << WGM12);
    2022:	ee e4       	ldi	r30, 0x4E	; 78
    2024:	f0 e0       	ldi	r31, 0x00	; 0
    2026:	88 e0       	ldi	r24, 0x08	; 8
    2028:	80 83       	st	Z, r24
			/*
			 * insert the required compare match value in OCR1A Register
			 */
			OCR1A = Config_Ptr->compare_value;
    202a:	aa e4       	ldi	r26, 0x4A	; 74
    202c:	b0 e0       	ldi	r27, 0x00	; 0
    202e:	e9 81       	ldd	r30, Y+1	; 0x01
    2030:	fa 81       	ldd	r31, Y+2	; 0x02
    2032:	84 81       	ldd	r24, Z+4	; 0x04
    2034:	95 81       	ldd	r25, Z+5	; 0x05
    2036:	11 96       	adiw	r26, 0x01	; 1
    2038:	9c 93       	st	X, r25
    203a:	8e 93       	st	-X, r24
			/* Enable the compare match interrupt to generate an interrupt when compare match occurs*/
			SET_BIT(TIMSK, OCIE1A);
    203c:	a9 e5       	ldi	r26, 0x59	; 89
    203e:	b0 e0       	ldi	r27, 0x00	; 0
    2040:	e9 e5       	ldi	r30, 0x59	; 89
    2042:	f0 e0       	ldi	r31, 0x00	; 0
    2044:	80 81       	ld	r24, Z
    2046:	80 61       	ori	r24, 0x10	; 16
    2048:	8c 93       	st	X, r24
    204a:	0c c0       	rjmp	.+24     	; 0x2064 <Timer_init+0x114>
		} else if (Config_Ptr->mode == NORMAL_MODE) {
    204c:	e9 81       	ldd	r30, Y+1	; 0x01
    204e:	fa 81       	ldd	r31, Y+2	; 0x02
    2050:	81 81       	ldd	r24, Z+1	; 0x01
    2052:	88 23       	and	r24, r24
    2054:	39 f4       	brne	.+14     	; 0x2064 <Timer_init+0x114>
			/* Enable the overflow interrupt to generate an interrupt when overflow occurs*/
			SET_BIT(TIMSK, TOIE1);
    2056:	a9 e5       	ldi	r26, 0x59	; 89
    2058:	b0 e0       	ldi	r27, 0x00	; 0
    205a:	e9 e5       	ldi	r30, 0x59	; 89
    205c:	f0 e0       	ldi	r31, 0x00	; 0
    205e:	80 81       	ld	r24, Z
    2060:	84 60       	ori	r24, 0x04	; 4
    2062:	8c 93       	st	X, r24
		}
		/*
		 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
		 * of TCCR1B Register
		 */
		TCCR1B = (TCCR1B & 0XF8) | (Config_Ptr->prescale & 0x07);
    2064:	ae e4       	ldi	r26, 0x4E	; 78
    2066:	b0 e0       	ldi	r27, 0x00	; 0
    2068:	ee e4       	ldi	r30, 0x4E	; 78
    206a:	f0 e0       	ldi	r31, 0x00	; 0
    206c:	80 81       	ld	r24, Z
    206e:	98 2f       	mov	r25, r24
    2070:	98 7f       	andi	r25, 0xF8	; 248
    2072:	e9 81       	ldd	r30, Y+1	; 0x01
    2074:	fa 81       	ldd	r31, Y+2	; 0x02
    2076:	86 81       	ldd	r24, Z+6	; 0x06
    2078:	87 70       	andi	r24, 0x07	; 7
    207a:	89 2b       	or	r24, r25
    207c:	8c 93       	st	X, r24
		/*
		 * insert the required intial value in TCNT1 Register
		 */
		TCNT1 = Config_Ptr->intial_value;
    207e:	ac e4       	ldi	r26, 0x4C	; 76
    2080:	b0 e0       	ldi	r27, 0x00	; 0
    2082:	e9 81       	ldd	r30, Y+1	; 0x01
    2084:	fa 81       	ldd	r31, Y+2	; 0x02
    2086:	82 81       	ldd	r24, Z+2	; 0x02
    2088:	93 81       	ldd	r25, Z+3	; 0x03
    208a:	11 96       	adiw	r26, 0x01	; 1
    208c:	9c 93       	st	X, r25
    208e:	8e 93       	st	-X, r24
    2090:	53 c0       	rjmp	.+166    	; 0x2138 <Timer_init+0x1e8>
		break;
	case TIMER_2:
		/*FOC2=1 for non-PWM mode */
		TCCR2 = (1 << FOC2);
    2092:	e5 e4       	ldi	r30, 0x45	; 69
    2094:	f0 e0       	ldi	r31, 0x00	; 0
    2096:	80 e8       	ldi	r24, 0x80	; 128
    2098:	80 83       	st	Z, r24
		/*set the required mode for timer*/
		/*for normal mode WGM20=0,WGM21=0;
		 *for compare match mode WGM20=0,WGM21=1
		 * */
		if (Config_Ptr->mode == COMPARE_MATCH_MODE) {
    209a:	e9 81       	ldd	r30, Y+1	; 0x01
    209c:	fa 81       	ldd	r31, Y+2	; 0x02
    209e:	81 81       	ldd	r24, Z+1	; 0x01
    20a0:	81 30       	cpi	r24, 0x01	; 1
    20a2:	b1 f4       	brne	.+44     	; 0x20d0 <Timer_init+0x180>
			SET_BIT(TCCR2, WGM21);
    20a4:	a5 e4       	ldi	r26, 0x45	; 69
    20a6:	b0 e0       	ldi	r27, 0x00	; 0
    20a8:	e5 e4       	ldi	r30, 0x45	; 69
    20aa:	f0 e0       	ldi	r31, 0x00	; 0
    20ac:	80 81       	ld	r24, Z
    20ae:	88 60       	ori	r24, 0x08	; 8
    20b0:	8c 93       	st	X, r24
			/*
			 * insert the required compare match value in OCR2 Register
			 */
			OCR2 = Config_Ptr->compare_value;
    20b2:	a3 e4       	ldi	r26, 0x43	; 67
    20b4:	b0 e0       	ldi	r27, 0x00	; 0
    20b6:	e9 81       	ldd	r30, Y+1	; 0x01
    20b8:	fa 81       	ldd	r31, Y+2	; 0x02
    20ba:	84 81       	ldd	r24, Z+4	; 0x04
    20bc:	95 81       	ldd	r25, Z+5	; 0x05
    20be:	8c 93       	st	X, r24
			/* Enable the compare match interrupt to generate an interrupt when compare match occurs*/
			SET_BIT(TIMSK, OCIE2);
    20c0:	a9 e5       	ldi	r26, 0x59	; 89
    20c2:	b0 e0       	ldi	r27, 0x00	; 0
    20c4:	e9 e5       	ldi	r30, 0x59	; 89
    20c6:	f0 e0       	ldi	r31, 0x00	; 0
    20c8:	80 81       	ld	r24, Z
    20ca:	80 68       	ori	r24, 0x80	; 128
    20cc:	8c 93       	st	X, r24
    20ce:	0c c0       	rjmp	.+24     	; 0x20e8 <Timer_init+0x198>
		} else if (Config_Ptr->mode == NORMAL_MODE) {
    20d0:	e9 81       	ldd	r30, Y+1	; 0x01
    20d2:	fa 81       	ldd	r31, Y+2	; 0x02
    20d4:	81 81       	ldd	r24, Z+1	; 0x01
    20d6:	88 23       	and	r24, r24
    20d8:	39 f4       	brne	.+14     	; 0x20e8 <Timer_init+0x198>
			/* Enable the overflow interrupt to generate an interrupt when overflow occurs*/
			SET_BIT(TIMSK, TOIE2);
    20da:	a9 e5       	ldi	r26, 0x59	; 89
    20dc:	b0 e0       	ldi	r27, 0x00	; 0
    20de:	e9 e5       	ldi	r30, 0x59	; 89
    20e0:	f0 e0       	ldi	r31, 0x00	; 0
    20e2:	80 81       	ld	r24, Z
    20e4:	80 64       	ori	r24, 0x40	; 64
    20e6:	8c 93       	st	X, r24
		}
		/*
		 * insert the required clock value in the first three bits (CS20, CS21 and CS22)
		 * of TCCR2 Register
		 */
		if (Config_Ptr->prescale > F_CPU_8) {
    20e8:	e9 81       	ldd	r30, Y+1	; 0x01
    20ea:	fa 81       	ldd	r31, Y+2	; 0x02
    20ec:	86 81       	ldd	r24, Z+6	; 0x06
    20ee:	83 30       	cpi	r24, 0x03	; 3
    20f0:	78 f0       	brcs	.+30     	; 0x2110 <Timer_init+0x1c0>
			/*Because there is a difference in the order of prescale between timer2 and timer0&timer1 */
			TCCR2 = (TCCR2 & 0XF8) | ((Config_Ptr->prescale + 2) & 0x07);
    20f2:	a5 e4       	ldi	r26, 0x45	; 69
    20f4:	b0 e0       	ldi	r27, 0x00	; 0
    20f6:	e5 e4       	ldi	r30, 0x45	; 69
    20f8:	f0 e0       	ldi	r31, 0x00	; 0
    20fa:	80 81       	ld	r24, Z
    20fc:	98 2f       	mov	r25, r24
    20fe:	98 7f       	andi	r25, 0xF8	; 248
    2100:	e9 81       	ldd	r30, Y+1	; 0x01
    2102:	fa 81       	ldd	r31, Y+2	; 0x02
    2104:	86 81       	ldd	r24, Z+6	; 0x06
    2106:	8e 5f       	subi	r24, 0xFE	; 254
    2108:	87 70       	andi	r24, 0x07	; 7
    210a:	89 2b       	or	r24, r25
    210c:	8c 93       	st	X, r24
    210e:	0d c0       	rjmp	.+26     	; 0x212a <Timer_init+0x1da>
		} else {
			TCCR2 = (TCCR2 & 0XF8) | ((Config_Ptr->prescale) & 0x07);
    2110:	a5 e4       	ldi	r26, 0x45	; 69
    2112:	b0 e0       	ldi	r27, 0x00	; 0
    2114:	e5 e4       	ldi	r30, 0x45	; 69
    2116:	f0 e0       	ldi	r31, 0x00	; 0
    2118:	80 81       	ld	r24, Z
    211a:	98 2f       	mov	r25, r24
    211c:	98 7f       	andi	r25, 0xF8	; 248
    211e:	e9 81       	ldd	r30, Y+1	; 0x01
    2120:	fa 81       	ldd	r31, Y+2	; 0x02
    2122:	86 81       	ldd	r24, Z+6	; 0x06
    2124:	87 70       	andi	r24, 0x07	; 7
    2126:	89 2b       	or	r24, r25
    2128:	8c 93       	st	X, r24
		}
		/*
		 * insert the required intial value in TCNT2 Register
		 */
		TCNT2 = Config_Ptr->intial_value;
    212a:	a4 e4       	ldi	r26, 0x44	; 68
    212c:	b0 e0       	ldi	r27, 0x00	; 0
    212e:	e9 81       	ldd	r30, Y+1	; 0x01
    2130:	fa 81       	ldd	r31, Y+2	; 0x02
    2132:	82 81       	ldd	r24, Z+2	; 0x02
    2134:	93 81       	ldd	r25, Z+3	; 0x03
    2136:	8c 93       	st	X, r24
		break;
	}
}
    2138:	0f 90       	pop	r0
    213a:	0f 90       	pop	r0
    213c:	0f 90       	pop	r0
    213e:	0f 90       	pop	r0
    2140:	cf 91       	pop	r28
    2142:	df 91       	pop	r29
    2144:	08 95       	ret

00002146 <Timer0_setCallBack>:
 * Description: Function to set the Call Back function address.
 */

/******************************************* Timer0 Call back function ***********************************/

void Timer0_setCallBack(void (*a_cb0_ptr)(void)) {
    2146:	df 93       	push	r29
    2148:	cf 93       	push	r28
    214a:	00 d0       	rcall	.+0      	; 0x214c <Timer0_setCallBack+0x6>
    214c:	cd b7       	in	r28, 0x3d	; 61
    214e:	de b7       	in	r29, 0x3e	; 62
    2150:	9a 83       	std	Y+2, r25	; 0x02
    2152:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_timer0_callBackPtr = a_cb0_ptr;
    2154:	89 81       	ldd	r24, Y+1	; 0x01
    2156:	9a 81       	ldd	r25, Y+2	; 0x02
    2158:	90 93 81 00 	sts	0x0081, r25
    215c:	80 93 80 00 	sts	0x0080, r24
}
    2160:	0f 90       	pop	r0
    2162:	0f 90       	pop	r0
    2164:	cf 91       	pop	r28
    2166:	df 91       	pop	r29
    2168:	08 95       	ret

0000216a <Timer1_setCallBack>:

/******************************************* Timer1Call back function ***********************************/

void Timer1_setCallBack(void (*a_cb1_ptr)(void)) {
    216a:	df 93       	push	r29
    216c:	cf 93       	push	r28
    216e:	00 d0       	rcall	.+0      	; 0x2170 <Timer1_setCallBack+0x6>
    2170:	cd b7       	in	r28, 0x3d	; 61
    2172:	de b7       	in	r29, 0x3e	; 62
    2174:	9a 83       	std	Y+2, r25	; 0x02
    2176:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_timer1_callBackPtr = a_cb1_ptr;
    2178:	89 81       	ldd	r24, Y+1	; 0x01
    217a:	9a 81       	ldd	r25, Y+2	; 0x02
    217c:	90 93 83 00 	sts	0x0083, r25
    2180:	80 93 82 00 	sts	0x0082, r24
}
    2184:	0f 90       	pop	r0
    2186:	0f 90       	pop	r0
    2188:	cf 91       	pop	r28
    218a:	df 91       	pop	r29
    218c:	08 95       	ret

0000218e <Timer2_setCallBack>:

/******************************************* Timer2Call back function ***********************************/
void Timer2_setCallBack(void (*a_cb2_ptr)(void)) {
    218e:	df 93       	push	r29
    2190:	cf 93       	push	r28
    2192:	00 d0       	rcall	.+0      	; 0x2194 <Timer2_setCallBack+0x6>
    2194:	cd b7       	in	r28, 0x3d	; 61
    2196:	de b7       	in	r29, 0x3e	; 62
    2198:	9a 83       	std	Y+2, r25	; 0x02
    219a:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_timer2_callBackPtr = a_cb2_ptr;
    219c:	89 81       	ldd	r24, Y+1	; 0x01
    219e:	9a 81       	ldd	r25, Y+2	; 0x02
    21a0:	90 93 85 00 	sts	0x0085, r25
    21a4:	80 93 84 00 	sts	0x0084, r24
}
    21a8:	0f 90       	pop	r0
    21aa:	0f 90       	pop	r0
    21ac:	cf 91       	pop	r28
    21ae:	df 91       	pop	r29
    21b0:	08 95       	ret

000021b2 <Timer_deInit>:

/*
 * Description: Function to disable the Requried Timer (Timer0-Timer1-Timer2)
 */
void Timer_deInit(Timer_TimerNumber timer_number) {
    21b2:	df 93       	push	r29
    21b4:	cf 93       	push	r28
    21b6:	00 d0       	rcall	.+0      	; 0x21b8 <Timer_deInit+0x6>
    21b8:	0f 92       	push	r0
    21ba:	cd b7       	in	r28, 0x3d	; 61
    21bc:	de b7       	in	r29, 0x3e	; 62
    21be:	89 83       	std	Y+1, r24	; 0x01
	switch (timer_number) {
    21c0:	89 81       	ldd	r24, Y+1	; 0x01
    21c2:	28 2f       	mov	r18, r24
    21c4:	30 e0       	ldi	r19, 0x00	; 0
    21c6:	3b 83       	std	Y+3, r19	; 0x03
    21c8:	2a 83       	std	Y+2, r18	; 0x02
    21ca:	8a 81       	ldd	r24, Y+2	; 0x02
    21cc:	9b 81       	ldd	r25, Y+3	; 0x03
    21ce:	81 30       	cpi	r24, 0x01	; 1
    21d0:	91 05       	cpc	r25, r1
    21d2:	d1 f0       	breq	.+52     	; 0x2208 <Timer_deInit+0x56>
    21d4:	2a 81       	ldd	r18, Y+2	; 0x02
    21d6:	3b 81       	ldd	r19, Y+3	; 0x03
    21d8:	22 30       	cpi	r18, 0x02	; 2
    21da:	31 05       	cpc	r19, r1
    21dc:	59 f1       	breq	.+86     	; 0x2234 <Timer_deInit+0x82>
    21de:	8a 81       	ldd	r24, Y+2	; 0x02
    21e0:	9b 81       	ldd	r25, Y+3	; 0x03
    21e2:	00 97       	sbiw	r24, 0x00	; 0
    21e4:	b9 f5       	brne	.+110    	; 0x2254 <Timer_deInit+0xa2>
	case TIMER_0:
		/* Clear All Timer0 Registers */
		TCCR0 = 0;
    21e6:	e3 e5       	ldi	r30, 0x53	; 83
    21e8:	f0 e0       	ldi	r31, 0x00	; 0
    21ea:	10 82       	st	Z, r1
		TCNT0 = 0;
    21ec:	e2 e5       	ldi	r30, 0x52	; 82
    21ee:	f0 e0       	ldi	r31, 0x00	; 0
    21f0:	10 82       	st	Z, r1
		OCR0 = 0;
    21f2:	ec e5       	ldi	r30, 0x5C	; 92
    21f4:	f0 e0       	ldi	r31, 0x00	; 0
    21f6:	10 82       	st	Z, r1
		/* Disable the interrupt */
		TIMSK &= ~(1 << TOIE0) & ~(1 << OCIE0);
    21f8:	a9 e5       	ldi	r26, 0x59	; 89
    21fa:	b0 e0       	ldi	r27, 0x00	; 0
    21fc:	e9 e5       	ldi	r30, 0x59	; 89
    21fe:	f0 e0       	ldi	r31, 0x00	; 0
    2200:	80 81       	ld	r24, Z
    2202:	8c 7f       	andi	r24, 0xFC	; 252
    2204:	8c 93       	st	X, r24
    2206:	26 c0       	rjmp	.+76     	; 0x2254 <Timer_deInit+0xa2>
		break;
	case TIMER_1:
		/* Clear All Timer1 Registers */
		TCCR1A = 0;
    2208:	ef e4       	ldi	r30, 0x4F	; 79
    220a:	f0 e0       	ldi	r31, 0x00	; 0
    220c:	10 82       	st	Z, r1
		TCCR1B = 0;
    220e:	ee e4       	ldi	r30, 0x4E	; 78
    2210:	f0 e0       	ldi	r31, 0x00	; 0
    2212:	10 82       	st	Z, r1
		TCNT1 = 0;
    2214:	ec e4       	ldi	r30, 0x4C	; 76
    2216:	f0 e0       	ldi	r31, 0x00	; 0
    2218:	11 82       	std	Z+1, r1	; 0x01
    221a:	10 82       	st	Z, r1
		OCR1A = 0;
    221c:	ea e4       	ldi	r30, 0x4A	; 74
    221e:	f0 e0       	ldi	r31, 0x00	; 0
    2220:	11 82       	std	Z+1, r1	; 0x01
    2222:	10 82       	st	Z, r1
		/* Disable the interrupt */
		TIMSK &= ~(1 << TOIE1) & ~(1 << OCIE1A);
    2224:	a9 e5       	ldi	r26, 0x59	; 89
    2226:	b0 e0       	ldi	r27, 0x00	; 0
    2228:	e9 e5       	ldi	r30, 0x59	; 89
    222a:	f0 e0       	ldi	r31, 0x00	; 0
    222c:	80 81       	ld	r24, Z
    222e:	8b 7e       	andi	r24, 0xEB	; 235
    2230:	8c 93       	st	X, r24
    2232:	10 c0       	rjmp	.+32     	; 0x2254 <Timer_deInit+0xa2>
		break;
	case TIMER_2:
		/* Clear All Timer2 Registers */
		TCCR2 = 0;
    2234:	e5 e4       	ldi	r30, 0x45	; 69
    2236:	f0 e0       	ldi	r31, 0x00	; 0
    2238:	10 82       	st	Z, r1
		TCNT2 = 0;
    223a:	e4 e4       	ldi	r30, 0x44	; 68
    223c:	f0 e0       	ldi	r31, 0x00	; 0
    223e:	10 82       	st	Z, r1
		OCR2 = 0;
    2240:	e3 e4       	ldi	r30, 0x43	; 67
    2242:	f0 e0       	ldi	r31, 0x00	; 0
    2244:	10 82       	st	Z, r1
		/* Disable the interrupt */
		TIMSK &= ~(1 << TOIE2) & ~(1 << OCIE2);
    2246:	a9 e5       	ldi	r26, 0x59	; 89
    2248:	b0 e0       	ldi	r27, 0x00	; 0
    224a:	e9 e5       	ldi	r30, 0x59	; 89
    224c:	f0 e0       	ldi	r31, 0x00	; 0
    224e:	80 81       	ld	r24, Z
    2250:	8f 73       	andi	r24, 0x3F	; 63
    2252:	8c 93       	st	X, r24
		break;
	}
}
    2254:	0f 90       	pop	r0
    2256:	0f 90       	pop	r0
    2258:	0f 90       	pop	r0
    225a:	cf 91       	pop	r28
    225c:	df 91       	pop	r29
    225e:	08 95       	ret

00002260 <TWI_init>:
#include "common_macros.h"
#include <avr/io.h>
#define F_CPU 8000000UL

void TWI_init(uint16 baudRate_Kb,uint8 slaveAddress)
{
    2260:	cf 92       	push	r12
    2262:	df 92       	push	r13
    2264:	ef 92       	push	r14
    2266:	ff 92       	push	r15
    2268:	0f 93       	push	r16
    226a:	1f 93       	push	r17
    226c:	df 93       	push	r29
    226e:	cf 93       	push	r28
    2270:	00 d0       	rcall	.+0      	; 0x2272 <TWI_init+0x12>
    2272:	0f 92       	push	r0
    2274:	cd b7       	in	r28, 0x3d	; 61
    2276:	de b7       	in	r29, 0x3e	; 62
    2278:	9a 83       	std	Y+2, r25	; 0x02
    227a:	89 83       	std	Y+1, r24	; 0x01
    227c:	6b 83       	std	Y+3, r22	; 0x03
    /* set the requried bit rate using zero pre-scaler TWPS=00 */
    TWBR = (uint8)((F_CPU-(16*baudRate_Kb))/(8*baudRate_Kb));
    227e:	cc 24       	eor	r12, r12
    2280:	dd 24       	eor	r13, r13
    2282:	68 94       	set
    2284:	c5 f8       	bld	r12, 5
    2286:	89 81       	ldd	r24, Y+1	; 0x01
    2288:	9a 81       	ldd	r25, Y+2	; 0x02
    228a:	82 95       	swap	r24
    228c:	92 95       	swap	r25
    228e:	90 7f       	andi	r25, 0xF0	; 240
    2290:	98 27       	eor	r25, r24
    2292:	80 7f       	andi	r24, 0xF0	; 240
    2294:	98 27       	eor	r25, r24
    2296:	9c 01       	movw	r18, r24
    2298:	40 e0       	ldi	r20, 0x00	; 0
    229a:	50 e0       	ldi	r21, 0x00	; 0
    229c:	80 e0       	ldi	r24, 0x00	; 0
    229e:	92 e1       	ldi	r25, 0x12	; 18
    22a0:	aa e7       	ldi	r26, 0x7A	; 122
    22a2:	b0 e0       	ldi	r27, 0x00	; 0
    22a4:	7c 01       	movw	r14, r24
    22a6:	8d 01       	movw	r16, r26
    22a8:	e2 1a       	sub	r14, r18
    22aa:	f3 0a       	sbc	r15, r19
    22ac:	04 0b       	sbc	r16, r20
    22ae:	15 0b       	sbc	r17, r21
    22b0:	89 81       	ldd	r24, Y+1	; 0x01
    22b2:	9a 81       	ldd	r25, Y+2	; 0x02
    22b4:	88 0f       	add	r24, r24
    22b6:	99 1f       	adc	r25, r25
    22b8:	88 0f       	add	r24, r24
    22ba:	99 1f       	adc	r25, r25
    22bc:	88 0f       	add	r24, r24
    22be:	99 1f       	adc	r25, r25
    22c0:	9c 01       	movw	r18, r24
    22c2:	40 e0       	ldi	r20, 0x00	; 0
    22c4:	50 e0       	ldi	r21, 0x00	; 0
    22c6:	c8 01       	movw	r24, r16
    22c8:	b7 01       	movw	r22, r14
    22ca:	0e 94 04 13 	call	0x2608	; 0x2608 <__udivmodsi4>
    22ce:	da 01       	movw	r26, r20
    22d0:	c9 01       	movw	r24, r18
    22d2:	f6 01       	movw	r30, r12
    22d4:	80 83       	st	Z, r24
	TWSR = 0x00;
    22d6:	e1 e2       	ldi	r30, 0x21	; 33
    22d8:	f0 e0       	ldi	r31, 0x00	; 0
    22da:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = slaveAddress; // set the required my slave address  :)
    22dc:	e2 e2       	ldi	r30, 0x22	; 34
    22de:	f0 e0       	ldi	r31, 0x00	; 0
    22e0:	8b 81       	ldd	r24, Y+3	; 0x03
    22e2:	80 83       	st	Z, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    22e4:	e6 e5       	ldi	r30, 0x56	; 86
    22e6:	f0 e0       	ldi	r31, 0x00	; 0
    22e8:	84 e0       	ldi	r24, 0x04	; 4
    22ea:	80 83       	st	Z, r24
}
    22ec:	0f 90       	pop	r0
    22ee:	0f 90       	pop	r0
    22f0:	0f 90       	pop	r0
    22f2:	cf 91       	pop	r28
    22f4:	df 91       	pop	r29
    22f6:	1f 91       	pop	r17
    22f8:	0f 91       	pop	r16
    22fa:	ff 90       	pop	r15
    22fc:	ef 90       	pop	r14
    22fe:	df 90       	pop	r13
    2300:	cf 90       	pop	r12
    2302:	08 95       	ret

00002304 <TWI_start>:

void TWI_start(void)
{
    2304:	df 93       	push	r29
    2306:	cf 93       	push	r28
    2308:	cd b7       	in	r28, 0x3d	; 61
    230a:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    230c:	e6 e5       	ldi	r30, 0x56	; 86
    230e:	f0 e0       	ldi	r31, 0x00	; 0
    2310:	84 ea       	ldi	r24, 0xA4	; 164
    2312:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2314:	e6 e5       	ldi	r30, 0x56	; 86
    2316:	f0 e0       	ldi	r31, 0x00	; 0
    2318:	80 81       	ld	r24, Z
    231a:	88 23       	and	r24, r24
    231c:	dc f7       	brge	.-10     	; 0x2314 <TWI_start+0x10>
}
    231e:	cf 91       	pop	r28
    2320:	df 91       	pop	r29
    2322:	08 95       	ret

00002324 <TWI_stop>:

void TWI_stop(void)
{
    2324:	df 93       	push	r29
    2326:	cf 93       	push	r28
    2328:	cd b7       	in	r28, 0x3d	; 61
    232a:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    232c:	e6 e5       	ldi	r30, 0x56	; 86
    232e:	f0 e0       	ldi	r31, 0x00	; 0
    2330:	84 e9       	ldi	r24, 0x94	; 148
    2332:	80 83       	st	Z, r24
}
    2334:	cf 91       	pop	r28
    2336:	df 91       	pop	r29
    2338:	08 95       	ret

0000233a <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    233a:	df 93       	push	r29
    233c:	cf 93       	push	r28
    233e:	0f 92       	push	r0
    2340:	cd b7       	in	r28, 0x3d	; 61
    2342:	de b7       	in	r29, 0x3e	; 62
    2344:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    2346:	e3 e2       	ldi	r30, 0x23	; 35
    2348:	f0 e0       	ldi	r31, 0x00	; 0
    234a:	89 81       	ldd	r24, Y+1	; 0x01
    234c:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    234e:	e6 e5       	ldi	r30, 0x56	; 86
    2350:	f0 e0       	ldi	r31, 0x00	; 0
    2352:	84 e8       	ldi	r24, 0x84	; 132
    2354:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2356:	e6 e5       	ldi	r30, 0x56	; 86
    2358:	f0 e0       	ldi	r31, 0x00	; 0
    235a:	80 81       	ld	r24, Z
    235c:	88 23       	and	r24, r24
    235e:	dc f7       	brge	.-10     	; 0x2356 <TWI_writeByte+0x1c>
}
    2360:	0f 90       	pop	r0
    2362:	cf 91       	pop	r28
    2364:	df 91       	pop	r29
    2366:	08 95       	ret

00002368 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    2368:	df 93       	push	r29
    236a:	cf 93       	push	r28
    236c:	cd b7       	in	r28, 0x3d	; 61
    236e:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    2370:	e6 e5       	ldi	r30, 0x56	; 86
    2372:	f0 e0       	ldi	r31, 0x00	; 0
    2374:	84 ec       	ldi	r24, 0xC4	; 196
    2376:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2378:	e6 e5       	ldi	r30, 0x56	; 86
    237a:	f0 e0       	ldi	r31, 0x00	; 0
    237c:	80 81       	ld	r24, Z
    237e:	88 23       	and	r24, r24
    2380:	dc f7       	brge	.-10     	; 0x2378 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    2382:	e3 e2       	ldi	r30, 0x23	; 35
    2384:	f0 e0       	ldi	r31, 0x00	; 0
    2386:	80 81       	ld	r24, Z
}
    2388:	cf 91       	pop	r28
    238a:	df 91       	pop	r29
    238c:	08 95       	ret

0000238e <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    238e:	df 93       	push	r29
    2390:	cf 93       	push	r28
    2392:	cd b7       	in	r28, 0x3d	; 61
    2394:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    2396:	e6 e5       	ldi	r30, 0x56	; 86
    2398:	f0 e0       	ldi	r31, 0x00	; 0
    239a:	84 e8       	ldi	r24, 0x84	; 132
    239c:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    239e:	e6 e5       	ldi	r30, 0x56	; 86
    23a0:	f0 e0       	ldi	r31, 0x00	; 0
    23a2:	80 81       	ld	r24, Z
    23a4:	88 23       	and	r24, r24
    23a6:	dc f7       	brge	.-10     	; 0x239e <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    23a8:	e3 e2       	ldi	r30, 0x23	; 35
    23aa:	f0 e0       	ldi	r31, 0x00	; 0
    23ac:	80 81       	ld	r24, Z
}
    23ae:	cf 91       	pop	r28
    23b0:	df 91       	pop	r29
    23b2:	08 95       	ret

000023b4 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    23b4:	df 93       	push	r29
    23b6:	cf 93       	push	r28
    23b8:	0f 92       	push	r0
    23ba:	cd b7       	in	r28, 0x3d	; 61
    23bc:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    23be:	e1 e2       	ldi	r30, 0x21	; 33
    23c0:	f0 e0       	ldi	r31, 0x00	; 0
    23c2:	80 81       	ld	r24, Z
    23c4:	88 7f       	andi	r24, 0xF8	; 248
    23c6:	89 83       	std	Y+1, r24	; 0x01
    return status;
    23c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    23ca:	0f 90       	pop	r0
    23cc:	cf 91       	pop	r28
    23ce:	df 91       	pop	r29
    23d0:	08 95       	ret

000023d2 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    23d2:	df 93       	push	r29
    23d4:	cf 93       	push	r28
    23d6:	00 d0       	rcall	.+0      	; 0x23d8 <UART_init+0x6>
    23d8:	00 d0       	rcall	.+0      	; 0x23da <UART_init+0x8>
    23da:	cd b7       	in	r28, 0x3d	; 61
    23dc:	de b7       	in	r29, 0x3e	; 62
    23de:	9c 83       	std	Y+4, r25	; 0x04
    23e0:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    23e2:	1a 82       	std	Y+2, r1	; 0x02
    23e4:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    23e6:	eb e2       	ldi	r30, 0x2B	; 43
    23e8:	f0 e0       	ldi	r31, 0x00	; 0
    23ea:	82 e0       	ldi	r24, 0x02	; 2
    23ec:	80 83       	st	Z, r24
	 * TXCIE = 0 Disable USART Tx Complete Interrupt Enable
	 * UDRIE = 0 Disable USART Data Register Empty Interrupt Enable
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    23ee:	ea e2       	ldi	r30, 0x2A	; 42
    23f0:	f0 e0       	ldi	r31, 0x00	; 0
    23f2:	88 e1       	ldi	r24, 0x18	; 24
    23f4:	80 83       	st	Z, r24
	/************************** UCSRC Description **************************
	 * URSEL   = 1 The URSEL must be one when writing the UCSRC
	 * UMSEL   = 0 Asynchronous Operation
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL);
    23f6:	e0 e4       	ldi	r30, 0x40	; 64
    23f8:	f0 e0       	ldi	r31, 0x00	; 0
    23fa:	80 e8       	ldi	r24, 0x80	; 128
    23fc:	80 83       	st	Z, r24
	/*
     * insert the required bit data in UCSRC Register
	 */
	UCSRC=(UCSRC&0XF9)|((Config_Ptr->bit_data&0X03)<<1);
    23fe:	a0 e4       	ldi	r26, 0x40	; 64
    2400:	b0 e0       	ldi	r27, 0x00	; 0
    2402:	e0 e4       	ldi	r30, 0x40	; 64
    2404:	f0 e0       	ldi	r31, 0x00	; 0
    2406:	80 81       	ld	r24, Z
    2408:	28 2f       	mov	r18, r24
    240a:	29 7f       	andi	r18, 0xF9	; 249
    240c:	eb 81       	ldd	r30, Y+3	; 0x03
    240e:	fc 81       	ldd	r31, Y+4	; 0x04
    2410:	80 81       	ld	r24, Z
    2412:	88 2f       	mov	r24, r24
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	83 70       	andi	r24, 0x03	; 3
    2418:	90 70       	andi	r25, 0x00	; 0
    241a:	88 0f       	add	r24, r24
    241c:	99 1f       	adc	r25, r25
    241e:	82 2b       	or	r24, r18
    2420:	8c 93       	st	X, r24
	if(Config_Ptr->bit_data==DATA_BIT_9){
    2422:	eb 81       	ldd	r30, Y+3	; 0x03
    2424:	fc 81       	ldd	r31, Y+4	; 0x04
    2426:	80 81       	ld	r24, Z
    2428:	87 30       	cpi	r24, 0x07	; 7
    242a:	39 f4       	brne	.+14     	; 0x243a <UART_init+0x68>
		 * For 9-bit data mode
		 * UCSZ2 = 1
		 * RXB8 & TXB8=1
		 *
		 */
		UCSRB|=0X03;
    242c:	aa e2       	ldi	r26, 0x2A	; 42
    242e:	b0 e0       	ldi	r27, 0x00	; 0
    2430:	ea e2       	ldi	r30, 0x2A	; 42
    2432:	f0 e0       	ldi	r31, 0x00	; 0
    2434:	80 81       	ld	r24, Z
    2436:	83 60       	ori	r24, 0x03	; 3
    2438:	8c 93       	st	X, r24
	}
	/*
     * insert the required stop bit in USBS in UCSRC Register
	 */
	if(Config_Ptr->stop_bit==STOP_BIT_2){
    243a:	eb 81       	ldd	r30, Y+3	; 0x03
    243c:	fc 81       	ldd	r31, Y+4	; 0x04
    243e:	82 81       	ldd	r24, Z+2	; 0x02
    2440:	81 30       	cpi	r24, 0x01	; 1
    2442:	39 f4       	brne	.+14     	; 0x2452 <UART_init+0x80>
		SET_BIT(UCSRC,USBS);
    2444:	a0 e4       	ldi	r26, 0x40	; 64
    2446:	b0 e0       	ldi	r27, 0x00	; 0
    2448:	e0 e4       	ldi	r30, 0x40	; 64
    244a:	f0 e0       	ldi	r31, 0x00	; 0
    244c:	80 81       	ld	r24, Z
    244e:	88 60       	ori	r24, 0x08	; 8
    2450:	8c 93       	st	X, r24
	}
	/*
     * insert the required parity mode in UCSRC Register
	 */
	UCSRC=(UCSRC&0XCF)|((Config_Ptr->parity&0X03)<<4);
    2452:	a0 e4       	ldi	r26, 0x40	; 64
    2454:	b0 e0       	ldi	r27, 0x00	; 0
    2456:	e0 e4       	ldi	r30, 0x40	; 64
    2458:	f0 e0       	ldi	r31, 0x00	; 0
    245a:	80 81       	ld	r24, Z
    245c:	28 2f       	mov	r18, r24
    245e:	2f 7c       	andi	r18, 0xCF	; 207
    2460:	eb 81       	ldd	r30, Y+3	; 0x03
    2462:	fc 81       	ldd	r31, Y+4	; 0x04
    2464:	81 81       	ldd	r24, Z+1	; 0x01
    2466:	88 2f       	mov	r24, r24
    2468:	90 e0       	ldi	r25, 0x00	; 0
    246a:	83 70       	andi	r24, 0x03	; 3
    246c:	90 70       	andi	r25, 0x00	; 0
    246e:	82 95       	swap	r24
    2470:	92 95       	swap	r25
    2472:	90 7f       	andi	r25, 0xF0	; 240
    2474:	98 27       	eor	r25, r24
    2476:	80 7f       	andi	r24, 0xF0	; 240
    2478:	98 27       	eor	r25, r24
    247a:	82 2b       	or	r24, r18
    247c:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->boud_rate * 8UL))) - 1);
    247e:	eb 81       	ldd	r30, Y+3	; 0x03
    2480:	fc 81       	ldd	r31, Y+4	; 0x04
    2482:	83 81       	ldd	r24, Z+3	; 0x03
    2484:	94 81       	ldd	r25, Z+4	; 0x04
    2486:	a5 81       	ldd	r26, Z+5	; 0x05
    2488:	b6 81       	ldd	r27, Z+6	; 0x06
    248a:	88 0f       	add	r24, r24
    248c:	99 1f       	adc	r25, r25
    248e:	aa 1f       	adc	r26, r26
    2490:	bb 1f       	adc	r27, r27
    2492:	88 0f       	add	r24, r24
    2494:	99 1f       	adc	r25, r25
    2496:	aa 1f       	adc	r26, r26
    2498:	bb 1f       	adc	r27, r27
    249a:	88 0f       	add	r24, r24
    249c:	99 1f       	adc	r25, r25
    249e:	aa 1f       	adc	r26, r26
    24a0:	bb 1f       	adc	r27, r27
    24a2:	9c 01       	movw	r18, r24
    24a4:	ad 01       	movw	r20, r26
    24a6:	80 e4       	ldi	r24, 0x40	; 64
    24a8:	92 e4       	ldi	r25, 0x42	; 66
    24aa:	af e0       	ldi	r26, 0x0F	; 15
    24ac:	b0 e0       	ldi	r27, 0x00	; 0
    24ae:	bc 01       	movw	r22, r24
    24b0:	cd 01       	movw	r24, r26
    24b2:	0e 94 04 13 	call	0x2608	; 0x2608 <__udivmodsi4>
    24b6:	da 01       	movw	r26, r20
    24b8:	c9 01       	movw	r24, r18
    24ba:	01 97       	sbiw	r24, 0x01	; 1
    24bc:	9a 83       	std	Y+2, r25	; 0x02
    24be:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    24c0:	e0 e4       	ldi	r30, 0x40	; 64
    24c2:	f0 e0       	ldi	r31, 0x00	; 0
    24c4:	89 81       	ldd	r24, Y+1	; 0x01
    24c6:	9a 81       	ldd	r25, Y+2	; 0x02
    24c8:	89 2f       	mov	r24, r25
    24ca:	99 27       	eor	r25, r25
    24cc:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    24ce:	e9 e2       	ldi	r30, 0x29	; 41
    24d0:	f0 e0       	ldi	r31, 0x00	; 0
    24d2:	89 81       	ldd	r24, Y+1	; 0x01
    24d4:	80 83       	st	Z, r24
}
    24d6:	0f 90       	pop	r0
    24d8:	0f 90       	pop	r0
    24da:	0f 90       	pop	r0
    24dc:	0f 90       	pop	r0
    24de:	cf 91       	pop	r28
    24e0:	df 91       	pop	r29
    24e2:	08 95       	ret

000024e4 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    24e4:	df 93       	push	r29
    24e6:	cf 93       	push	r28
    24e8:	0f 92       	push	r0
    24ea:	cd b7       	in	r28, 0x3d	; 61
    24ec:	de b7       	in	r29, 0x3e	; 62
    24ee:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    24f0:	eb e2       	ldi	r30, 0x2B	; 43
    24f2:	f0 e0       	ldi	r31, 0x00	; 0
    24f4:	80 81       	ld	r24, Z
    24f6:	88 2f       	mov	r24, r24
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	80 72       	andi	r24, 0x20	; 32
    24fc:	90 70       	andi	r25, 0x00	; 0
    24fe:	00 97       	sbiw	r24, 0x00	; 0
    2500:	b9 f3       	breq	.-18     	; 0x24f0 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2502:	ec e2       	ldi	r30, 0x2C	; 44
    2504:	f0 e0       	ldi	r31, 0x00	; 0
    2506:	89 81       	ldd	r24, Y+1	; 0x01
    2508:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    250a:	0f 90       	pop	r0
    250c:	cf 91       	pop	r28
    250e:	df 91       	pop	r29
    2510:	08 95       	ret

00002512 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2512:	df 93       	push	r29
    2514:	cf 93       	push	r28
    2516:	cd b7       	in	r28, 0x3d	; 61
    2518:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    251a:	eb e2       	ldi	r30, 0x2B	; 43
    251c:	f0 e0       	ldi	r31, 0x00	; 0
    251e:	80 81       	ld	r24, Z
    2520:	88 23       	and	r24, r24
    2522:	dc f7       	brge	.-10     	; 0x251a <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    2524:	ec e2       	ldi	r30, 0x2C	; 44
    2526:	f0 e0       	ldi	r31, 0x00	; 0
    2528:	80 81       	ld	r24, Z
}
    252a:	cf 91       	pop	r28
    252c:	df 91       	pop	r29
    252e:	08 95       	ret

00002530 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2530:	df 93       	push	r29
    2532:	cf 93       	push	r28
    2534:	00 d0       	rcall	.+0      	; 0x2536 <UART_sendString+0x6>
    2536:	0f 92       	push	r0
    2538:	cd b7       	in	r28, 0x3d	; 61
    253a:	de b7       	in	r29, 0x3e	; 62
    253c:	9b 83       	std	Y+3, r25	; 0x03
    253e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2540:	19 82       	std	Y+1, r1	; 0x01
    2542:	0e c0       	rjmp	.+28     	; 0x2560 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2544:	89 81       	ldd	r24, Y+1	; 0x01
    2546:	28 2f       	mov	r18, r24
    2548:	30 e0       	ldi	r19, 0x00	; 0
    254a:	8a 81       	ldd	r24, Y+2	; 0x02
    254c:	9b 81       	ldd	r25, Y+3	; 0x03
    254e:	fc 01       	movw	r30, r24
    2550:	e2 0f       	add	r30, r18
    2552:	f3 1f       	adc	r31, r19
    2554:	80 81       	ld	r24, Z
    2556:	0e 94 72 12 	call	0x24e4	; 0x24e4 <UART_sendByte>
		i++;
    255a:	89 81       	ldd	r24, Y+1	; 0x01
    255c:	8f 5f       	subi	r24, 0xFF	; 255
    255e:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2560:	89 81       	ldd	r24, Y+1	; 0x01
    2562:	28 2f       	mov	r18, r24
    2564:	30 e0       	ldi	r19, 0x00	; 0
    2566:	8a 81       	ldd	r24, Y+2	; 0x02
    2568:	9b 81       	ldd	r25, Y+3	; 0x03
    256a:	fc 01       	movw	r30, r24
    256c:	e2 0f       	add	r30, r18
    256e:	f3 1f       	adc	r31, r19
    2570:	80 81       	ld	r24, Z
    2572:	88 23       	and	r24, r24
    2574:	39 f7       	brne	.-50     	; 0x2544 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2576:	0f 90       	pop	r0
    2578:	0f 90       	pop	r0
    257a:	0f 90       	pop	r0
    257c:	cf 91       	pop	r28
    257e:	df 91       	pop	r29
    2580:	08 95       	ret

00002582 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2582:	0f 93       	push	r16
    2584:	1f 93       	push	r17
    2586:	df 93       	push	r29
    2588:	cf 93       	push	r28
    258a:	00 d0       	rcall	.+0      	; 0x258c <UART_receiveString+0xa>
    258c:	0f 92       	push	r0
    258e:	cd b7       	in	r28, 0x3d	; 61
    2590:	de b7       	in	r29, 0x3e	; 62
    2592:	9b 83       	std	Y+3, r25	; 0x03
    2594:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2596:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2598:	89 81       	ldd	r24, Y+1	; 0x01
    259a:	28 2f       	mov	r18, r24
    259c:	30 e0       	ldi	r19, 0x00	; 0
    259e:	8a 81       	ldd	r24, Y+2	; 0x02
    25a0:	9b 81       	ldd	r25, Y+3	; 0x03
    25a2:	8c 01       	movw	r16, r24
    25a4:	02 0f       	add	r16, r18
    25a6:	13 1f       	adc	r17, r19
    25a8:	0e 94 89 12 	call	0x2512	; 0x2512 <UART_recieveByte>
    25ac:	f8 01       	movw	r30, r16
    25ae:	80 83       	st	Z, r24
    25b0:	0f c0       	rjmp	.+30     	; 0x25d0 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    25b2:	89 81       	ldd	r24, Y+1	; 0x01
    25b4:	8f 5f       	subi	r24, 0xFF	; 255
    25b6:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    25b8:	89 81       	ldd	r24, Y+1	; 0x01
    25ba:	28 2f       	mov	r18, r24
    25bc:	30 e0       	ldi	r19, 0x00	; 0
    25be:	8a 81       	ldd	r24, Y+2	; 0x02
    25c0:	9b 81       	ldd	r25, Y+3	; 0x03
    25c2:	8c 01       	movw	r16, r24
    25c4:	02 0f       	add	r16, r18
    25c6:	13 1f       	adc	r17, r19
    25c8:	0e 94 89 12 	call	0x2512	; 0x2512 <UART_recieveByte>
    25cc:	f8 01       	movw	r30, r16
    25ce:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    25d0:	89 81       	ldd	r24, Y+1	; 0x01
    25d2:	28 2f       	mov	r18, r24
    25d4:	30 e0       	ldi	r19, 0x00	; 0
    25d6:	8a 81       	ldd	r24, Y+2	; 0x02
    25d8:	9b 81       	ldd	r25, Y+3	; 0x03
    25da:	fc 01       	movw	r30, r24
    25dc:	e2 0f       	add	r30, r18
    25de:	f3 1f       	adc	r31, r19
    25e0:	80 81       	ld	r24, Z
    25e2:	83 32       	cpi	r24, 0x23	; 35
    25e4:	31 f7       	brne	.-52     	; 0x25b2 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    25e6:	89 81       	ldd	r24, Y+1	; 0x01
    25e8:	28 2f       	mov	r18, r24
    25ea:	30 e0       	ldi	r19, 0x00	; 0
    25ec:	8a 81       	ldd	r24, Y+2	; 0x02
    25ee:	9b 81       	ldd	r25, Y+3	; 0x03
    25f0:	fc 01       	movw	r30, r24
    25f2:	e2 0f       	add	r30, r18
    25f4:	f3 1f       	adc	r31, r19
    25f6:	10 82       	st	Z, r1
}
    25f8:	0f 90       	pop	r0
    25fa:	0f 90       	pop	r0
    25fc:	0f 90       	pop	r0
    25fe:	cf 91       	pop	r28
    2600:	df 91       	pop	r29
    2602:	1f 91       	pop	r17
    2604:	0f 91       	pop	r16
    2606:	08 95       	ret

00002608 <__udivmodsi4>:
    2608:	a1 e2       	ldi	r26, 0x21	; 33
    260a:	1a 2e       	mov	r1, r26
    260c:	aa 1b       	sub	r26, r26
    260e:	bb 1b       	sub	r27, r27
    2610:	fd 01       	movw	r30, r26
    2612:	0d c0       	rjmp	.+26     	; 0x262e <__udivmodsi4_ep>

00002614 <__udivmodsi4_loop>:
    2614:	aa 1f       	adc	r26, r26
    2616:	bb 1f       	adc	r27, r27
    2618:	ee 1f       	adc	r30, r30
    261a:	ff 1f       	adc	r31, r31
    261c:	a2 17       	cp	r26, r18
    261e:	b3 07       	cpc	r27, r19
    2620:	e4 07       	cpc	r30, r20
    2622:	f5 07       	cpc	r31, r21
    2624:	20 f0       	brcs	.+8      	; 0x262e <__udivmodsi4_ep>
    2626:	a2 1b       	sub	r26, r18
    2628:	b3 0b       	sbc	r27, r19
    262a:	e4 0b       	sbc	r30, r20
    262c:	f5 0b       	sbc	r31, r21

0000262e <__udivmodsi4_ep>:
    262e:	66 1f       	adc	r22, r22
    2630:	77 1f       	adc	r23, r23
    2632:	88 1f       	adc	r24, r24
    2634:	99 1f       	adc	r25, r25
    2636:	1a 94       	dec	r1
    2638:	69 f7       	brne	.-38     	; 0x2614 <__udivmodsi4_loop>
    263a:	60 95       	com	r22
    263c:	70 95       	com	r23
    263e:	80 95       	com	r24
    2640:	90 95       	com	r25
    2642:	9b 01       	movw	r18, r22
    2644:	ac 01       	movw	r20, r24
    2646:	bd 01       	movw	r22, r26
    2648:	cf 01       	movw	r24, r30
    264a:	08 95       	ret

0000264c <__prologue_saves__>:
    264c:	2f 92       	push	r2
    264e:	3f 92       	push	r3
    2650:	4f 92       	push	r4
    2652:	5f 92       	push	r5
    2654:	6f 92       	push	r6
    2656:	7f 92       	push	r7
    2658:	8f 92       	push	r8
    265a:	9f 92       	push	r9
    265c:	af 92       	push	r10
    265e:	bf 92       	push	r11
    2660:	cf 92       	push	r12
    2662:	df 92       	push	r13
    2664:	ef 92       	push	r14
    2666:	ff 92       	push	r15
    2668:	0f 93       	push	r16
    266a:	1f 93       	push	r17
    266c:	cf 93       	push	r28
    266e:	df 93       	push	r29
    2670:	cd b7       	in	r28, 0x3d	; 61
    2672:	de b7       	in	r29, 0x3e	; 62
    2674:	ca 1b       	sub	r28, r26
    2676:	db 0b       	sbc	r29, r27
    2678:	0f b6       	in	r0, 0x3f	; 63
    267a:	f8 94       	cli
    267c:	de bf       	out	0x3e, r29	; 62
    267e:	0f be       	out	0x3f, r0	; 63
    2680:	cd bf       	out	0x3d, r28	; 61
    2682:	09 94       	ijmp

00002684 <__epilogue_restores__>:
    2684:	2a 88       	ldd	r2, Y+18	; 0x12
    2686:	39 88       	ldd	r3, Y+17	; 0x11
    2688:	48 88       	ldd	r4, Y+16	; 0x10
    268a:	5f 84       	ldd	r5, Y+15	; 0x0f
    268c:	6e 84       	ldd	r6, Y+14	; 0x0e
    268e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2690:	8c 84       	ldd	r8, Y+12	; 0x0c
    2692:	9b 84       	ldd	r9, Y+11	; 0x0b
    2694:	aa 84       	ldd	r10, Y+10	; 0x0a
    2696:	b9 84       	ldd	r11, Y+9	; 0x09
    2698:	c8 84       	ldd	r12, Y+8	; 0x08
    269a:	df 80       	ldd	r13, Y+7	; 0x07
    269c:	ee 80       	ldd	r14, Y+6	; 0x06
    269e:	fd 80       	ldd	r15, Y+5	; 0x05
    26a0:	0c 81       	ldd	r16, Y+4	; 0x04
    26a2:	1b 81       	ldd	r17, Y+3	; 0x03
    26a4:	aa 81       	ldd	r26, Y+2	; 0x02
    26a6:	b9 81       	ldd	r27, Y+1	; 0x01
    26a8:	ce 0f       	add	r28, r30
    26aa:	d1 1d       	adc	r29, r1
    26ac:	0f b6       	in	r0, 0x3f	; 63
    26ae:	f8 94       	cli
    26b0:	de bf       	out	0x3e, r29	; 62
    26b2:	0f be       	out	0x3f, r0	; 63
    26b4:	cd bf       	out	0x3d, r28	; 61
    26b6:	ed 01       	movw	r28, r26
    26b8:	08 95       	ret

000026ba <_exit>:
    26ba:	f8 94       	cli

000026bc <__stop_program>:
    26bc:	ff cf       	rjmp	.-2      	; 0x26bc <__stop_program>
