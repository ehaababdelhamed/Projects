
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003380  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000009e  00800060  00003380  00003414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  008000fe  008000fe  000034b2  2**0
                  ALLOC
  3 .stab         00002ed4  00000000  00000000  000034b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000133c  00000000  00000000  00006388  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000076c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007804  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007974  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000095bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a4a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b258  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b3b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b645  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000be13  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 17 16 	jmp	0x2c2e	; 0x2c2e <__vector_3>
      10:	0c 94 4a 16 	jmp	0x2c94	; 0x2c94 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 b1 15 	jmp	0x2b62	; 0x2b62 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 e4 15 	jmp	0x2bc8	; 0x2bc8 <__vector_8>
      24:	0c 94 7e 15 	jmp	0x2afc	; 0x2afc <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 4b 15 	jmp	0x2a96	; 0x2a96 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e8       	ldi	r30, 0x80	; 128
      68:	f3 e3       	ldi	r31, 0x33	; 51
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3f       	cpi	r26, 0xFE	; 254
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae ef       	ldi	r26, 0xFE	; 254
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 30       	cpi	r26, 0x0C	; 12
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a9 0b 	call	0x1752	; 0x1752 <main>
      8a:	0c 94 be 19 	jmp	0x337c	; 0x337c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 42 19 	jmp	0x3284	; 0x3284 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 ee       	ldi	r26, 0xE7	; 231
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 5e 19 	jmp	0x32bc	; 0x32bc <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 4e 19 	jmp	0x329c	; 0x329c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 6a 19 	jmp	0x32d4	; 0x32d4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 4e 19 	jmp	0x329c	; 0x329c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 6a 19 	jmp	0x32d4	; 0x32d4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 42 19 	jmp	0x3284	; 0x3284 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	87 ee       	ldi	r24, 0xE7	; 231
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 5e 19 	jmp	0x32bc	; 0x32bc <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 4e 19 	jmp	0x329c	; 0x329c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 6a 19 	jmp	0x32d4	; 0x32d4 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 4e 19 	jmp	0x329c	; 0x329c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 6a 19 	jmp	0x32d4	; 0x32d4 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 4e 19 	jmp	0x329c	; 0x329c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 6a 19 	jmp	0x32d4	; 0x32d4 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 52 19 	jmp	0x32a4	; 0x32a4 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 6e 19 	jmp	0x32dc	; 0x32dc <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <displayMainOption>:

/*
 * Description: Function to display main options on screen
 */

void displayMainOption() {
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	LCD_displayStringRowColumn(0, 0, "+: Open door");
     b4e:	20 e6       	ldi	r18, 0x60	; 96
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	80 e0       	ldi	r24, 0x00	; 0
     b54:	60 e0       	ldi	r22, 0x00	; 0
     b56:	a9 01       	movw	r20, r18
     b58:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "-: Change Pass");
     b5c:	2d e6       	ldi	r18, 0x6D	; 109
     b5e:	30 e0       	ldi	r19, 0x00	; 0
     b60:	81 e0       	ldi	r24, 0x01	; 1
     b62:	60 e0       	ldi	r22, 0x00	; 0
     b64:	a9 01       	movw	r20, r18
     b66:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <LCD_displayStringRowColumn>
}
     b6a:	cf 91       	pop	r28
     b6c:	df 91       	pop	r29
     b6e:	08 95       	ret

00000b70 <displayOpenDoorticks>:
 * Description: call back Function by timer to calcuate time of door open
 * 15 seconds CW
 * 3 seconds
 * 15 seconds ACW
 */
void displayOpenDoorticks(void) {
     b70:	df 93       	push	r29
     b72:	cf 93       	push	r28
     b74:	cd b7       	in	r28, 0x3d	; 61
     b76:	de b7       	in	r29, 0x3e	; 62
	/*ticks to calucate time*/
	g_ticks++;
     b78:	80 91 04 01 	lds	r24, 0x0104
     b7c:	90 91 05 01 	lds	r25, 0x0105
     b80:	01 96       	adiw	r24, 0x01	; 1
     b82:	90 93 05 01 	sts	0x0105, r25
     b86:	80 93 04 01 	sts	0x0104, r24
}
     b8a:	cf 91       	pop	r28
     b8c:	df 91       	pop	r29
     b8e:	08 95       	ret

00000b90 <displayOpenDoor>:
/*
 * Description: Function to display door is open for 33 seconds
 */
void displayOpenDoor(void) {
     b90:	df 93       	push	r29
     b92:	cf 93       	push	r28
     b94:	cd b7       	in	r28, 0x3d	; 61
     b96:	de b7       	in	r29, 0x3e	; 62
	while (1) {
		LCD_displayStringRowColumn(0, 0, "Door is open ");
     b98:	2c e7       	ldi	r18, 0x7C	; 124
     b9a:	30 e0       	ldi	r19, 0x00	; 0
     b9c:	80 e0       	ldi	r24, 0x00	; 0
     b9e:	60 e0       	ldi	r22, 0x00	; 0
     ba0:	a9 01       	movw	r20, r18
     ba2:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <LCD_displayStringRowColumn>
		if (g_ticks > (TIMEOFDOOROPEN * NUMBEROFTICKSPERSECOND)) {
     ba6:	80 91 04 01 	lds	r24, 0x0104
     baa:	90 91 05 01 	lds	r25, 0x0105
     bae:	85 38       	cpi	r24, 0x85	; 133
     bb0:	91 05       	cpc	r25, r1
     bb2:	90 f3       	brcs	.-28     	; 0xb98 <displayOpenDoor+0x8>
			g_ticks = 0;
     bb4:	10 92 05 01 	sts	0x0105, r1
     bb8:	10 92 04 01 	sts	0x0104, r1
			Timer_deInit(TIMER_0);
     bbc:	80 e0       	ldi	r24, 0x00	; 0
     bbe:	0e 94 ae 17 	call	0x2f5c	; 0x2f5c <Timer_deInit>
			LCD_clearScreen();
     bc2:	0e 94 41 15 	call	0x2a82	; 0x2a82 <LCD_clearScreen>
			break;
		}
	}
     bc6:	cf 91       	pop	r28
     bc8:	df 91       	pop	r29
     bca:	08 95       	ret

00000bcc <displayWarningMessageticks>:

/*
 * Description: call back Function by timer to calcuate time of alaram
 */

void displayWarningMessageticks() {
     bcc:	df 93       	push	r29
     bce:	cf 93       	push	r28
     bd0:	cd b7       	in	r28, 0x3d	; 61
     bd2:	de b7       	in	r29, 0x3e	; 62
	/*ticks to calucate time*/
	g_ticks++;
     bd4:	80 91 04 01 	lds	r24, 0x0104
     bd8:	90 91 05 01 	lds	r25, 0x0105
     bdc:	01 96       	adiw	r24, 0x01	; 1
     bde:	90 93 05 01 	sts	0x0105, r25
     be2:	80 93 04 01 	sts	0x0104, r24
}
     be6:	cf 91       	pop	r28
     be8:	df 91       	pop	r29
     bea:	08 95       	ret

00000bec <displayWarningMessage>:
/*
 * Description: Function to display warning message for 1 minuts
 */
void displayWarningMessage() {
     bec:	df 93       	push	r29
     bee:	cf 93       	push	r28
     bf0:	cd b7       	in	r28, 0x3d	; 61
     bf2:	de b7       	in	r29, 0x3e	; 62
	while (1) {
		LCD_displayStringRowColumn(0, 5, "Warning!");
     bf4:	2a e8       	ldi	r18, 0x8A	; 138
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	80 e0       	ldi	r24, 0x00	; 0
     bfa:	65 e0       	ldi	r22, 0x05	; 5
     bfc:	a9 01       	movw	r20, r18
     bfe:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <LCD_displayStringRowColumn>
		if (g_ticks > (TIMEOFBUZZERON * NUMBEROFTICKSPERSECOND)) {
     c02:	80 91 04 01 	lds	r24, 0x0104
     c06:	90 91 05 01 	lds	r25, 0x0105
     c0a:	81 3f       	cpi	r24, 0xF1	; 241
     c0c:	91 05       	cpc	r25, r1
     c0e:	90 f3       	brcs	.-28     	; 0xbf4 <displayWarningMessage+0x8>
			g_ticks = 0;
     c10:	10 92 05 01 	sts	0x0105, r1
     c14:	10 92 04 01 	sts	0x0104, r1
			Timer_deInit(TIMER_0);
     c18:	80 e0       	ldi	r24, 0x00	; 0
     c1a:	0e 94 ae 17 	call	0x2f5c	; 0x2f5c <Timer_deInit>
			LCD_clearScreen();
     c1e:	0e 94 41 15 	call	0x2a82	; 0x2a82 <LCD_clearScreen>
			break;
		}
	}
	LCD_clearScreen();
     c22:	0e 94 41 15 	call	0x2a82	; 0x2a82 <LCD_clearScreen>
			g_ticks = 0;
			Timer_deInit(TIMER_0);
			LCD_clearScreen();
			break;
		}
	}
     c26:	cf 91       	pop	r28
     c28:	df 91       	pop	r29
     c2a:	08 95       	ret

00000c2c <enterNewPassword>:
 * enter new password
 * re enter new password
 * if match send to control ECU to save it in eeprom
 */

void enterNewPassword() {
     c2c:	0f 93       	push	r16
     c2e:	1f 93       	push	r17
     c30:	df 93       	push	r29
     c32:	cf 93       	push	r28
     c34:	cd b7       	in	r28, 0x3d	; 61
     c36:	de b7       	in	r29, 0x3e	; 62
     c38:	cc 55       	subi	r28, 0x5C	; 92
     c3a:	d0 40       	sbci	r29, 0x00	; 0
     c3c:	0f b6       	in	r0, 0x3f	; 63
     c3e:	f8 94       	cli
     c40:	de bf       	out	0x3e, r29	; 62
     c42:	0f be       	out	0x3f, r0	; 63
     c44:	cd bf       	out	0x3d, r28	; 61
	uint8 key = 0, count = 0, check_match = SUCCESS;
     c46:	fe 01       	movw	r30, r28
     c48:	e9 5a       	subi	r30, 0xA9	; 169
     c4a:	ff 4f       	sbci	r31, 0xFF	; 255
     c4c:	10 82       	st	Z, r1
     c4e:	fe 01       	movw	r30, r28
     c50:	ea 5a       	subi	r30, 0xAA	; 170
     c52:	ff 4f       	sbci	r31, 0xFF	; 255
     c54:	10 82       	st	Z, r1
     c56:	fe 01       	movw	r30, r28
     c58:	eb 5a       	subi	r30, 0xAB	; 171
     c5a:	ff 4f       	sbci	r31, 0xFF	; 255
     c5c:	81 e0       	ldi	r24, 0x01	; 1
     c5e:	80 83       	st	Z, r24
	uint8 g_rePassword[MAXNUMBERS] = { 0 };
     c60:	ce 01       	movw	r24, r28
     c62:	88 5a       	subi	r24, 0xA8	; 168
     c64:	9f 4f       	sbci	r25, 0xFF	; 255
     c66:	25 e0       	ldi	r18, 0x05	; 5
     c68:	fc 01       	movw	r30, r24
     c6a:	df 01       	movw	r26, r30
     c6c:	82 2f       	mov	r24, r18
     c6e:	1d 92       	st	X+, r1
     c70:	8a 95       	dec	r24
     c72:	e9 f7       	brne	.-6      	; 0xc6e <enterNewPassword+0x42>
	 * g_passwordSize : for password array ;
	 * count : for re-password array;
	 * check_match : to check match between password and re-password
	 */
	while (1) {
		LCD_clearScreen();
     c74:	0e 94 41 15 	call	0x2a82	; 0x2a82 <LCD_clearScreen>
		LCD_displayString("Enter new Pass:");
     c78:	83 e9       	ldi	r24, 0x93	; 147
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	0e 94 9a 14 	call	0x2934	; 0x2934 <LCD_displayString>
		LCD_moveCursor(1, 0);
     c80:	81 e0       	ldi	r24, 0x01	; 1
     c82:	60 e0       	ldi	r22, 0x00	; 0
     c84:	0e 94 c3 14 	call	0x2986	; 0x2986 <LCD_moveCursor>
		g_passwordSize = 0;
     c88:	10 92 03 01 	sts	0x0103, r1
		/*first loop to enter new password */
		while (1) {
			key = KEYPAD_getPressedKey();
     c8c:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <KEYPAD_getPressedKey>
     c90:	fe 01       	movw	r30, r28
     c92:	e9 5a       	subi	r30, 0xA9	; 169
     c94:	ff 4f       	sbci	r31, 0xFF	; 255
     c96:	80 83       	st	Z, r24
			/*take value from keypad , if it is number save in password
			 * password isn't more than 5 numbers
			 * if user press '=' save password and break loop;
			 * */
			if (key >= 0 && key <= 9 && g_passwordSize < MAXNUMBERS) {
     c98:	fe 01       	movw	r30, r28
     c9a:	e9 5a       	subi	r30, 0xA9	; 169
     c9c:	ff 4f       	sbci	r31, 0xFF	; 255
     c9e:	80 81       	ld	r24, Z
     ca0:	8a 30       	cpi	r24, 0x0A	; 10
     ca2:	c8 f4       	brcc	.+50     	; 0xcd6 <enterNewPassword+0xaa>
     ca4:	80 91 03 01 	lds	r24, 0x0103
     ca8:	85 30       	cpi	r24, 0x05	; 5
     caa:	a8 f4       	brcc	.+42     	; 0xcd6 <enterNewPassword+0xaa>
				g_password[g_passwordSize] = key;
     cac:	80 91 03 01 	lds	r24, 0x0103
     cb0:	88 2f       	mov	r24, r24
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	dc 01       	movw	r26, r24
     cb6:	a2 50       	subi	r26, 0x02	; 2
     cb8:	bf 4f       	sbci	r27, 0xFF	; 255
     cba:	fe 01       	movw	r30, r28
     cbc:	e9 5a       	subi	r30, 0xA9	; 169
     cbe:	ff 4f       	sbci	r31, 0xFF	; 255
     cc0:	80 81       	ld	r24, Z
     cc2:	8c 93       	st	X, r24
				LCD_displayCharacter('*');
     cc4:	8a e2       	ldi	r24, 0x2A	; 42
     cc6:	0e 94 a6 12 	call	0x254c	; 0x254c <LCD_displayCharacter>
				g_passwordSize++;
     cca:	80 91 03 01 	lds	r24, 0x0103
     cce:	8f 5f       	subi	r24, 0xFF	; 255
     cd0:	80 93 03 01 	sts	0x0103, r24
     cd4:	c5 c0       	rjmp	.+394    	; 0xe60 <enterNewPassword+0x234>
			} else if (key == '=') {
     cd6:	fe 01       	movw	r30, r28
     cd8:	e9 5a       	subi	r30, 0xA9	; 169
     cda:	ff 4f       	sbci	r31, 0xFF	; 255
     cdc:	80 81       	ld	r24, Z
     cde:	8d 33       	cpi	r24, 0x3D	; 61
     ce0:	09 f0       	breq	.+2      	; 0xce4 <enterNewPassword+0xb8>
     ce2:	be c0       	rjmp	.+380    	; 0xe60 <enterNewPassword+0x234>
     ce4:	fe 01       	movw	r30, r28
     ce6:	ef 5a       	subi	r30, 0xAF	; 175
     ce8:	ff 4f       	sbci	r31, 0xFF	; 255
     cea:	80 e0       	ldi	r24, 0x00	; 0
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	aa ef       	ldi	r26, 0xFA	; 250
     cf0:	b3 e4       	ldi	r27, 0x43	; 67
     cf2:	80 83       	st	Z, r24
     cf4:	91 83       	std	Z+1, r25	; 0x01
     cf6:	a2 83       	std	Z+2, r26	; 0x02
     cf8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cfa:	8e 01       	movw	r16, r28
     cfc:	03 5b       	subi	r16, 0xB3	; 179
     cfe:	1f 4f       	sbci	r17, 0xFF	; 255
     d00:	fe 01       	movw	r30, r28
     d02:	ef 5a       	subi	r30, 0xAF	; 175
     d04:	ff 4f       	sbci	r31, 0xFF	; 255
     d06:	60 81       	ld	r22, Z
     d08:	71 81       	ldd	r23, Z+1	; 0x01
     d0a:	82 81       	ldd	r24, Z+2	; 0x02
     d0c:	93 81       	ldd	r25, Z+3	; 0x03
     d0e:	20 e0       	ldi	r18, 0x00	; 0
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	4a ef       	ldi	r20, 0xFA	; 250
     d14:	54 e4       	ldi	r21, 0x44	; 68
     d16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d1a:	dc 01       	movw	r26, r24
     d1c:	cb 01       	movw	r24, r22
     d1e:	f8 01       	movw	r30, r16
     d20:	80 83       	st	Z, r24
     d22:	91 83       	std	Z+1, r25	; 0x01
     d24:	a2 83       	std	Z+2, r26	; 0x02
     d26:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d28:	fe 01       	movw	r30, r28
     d2a:	e3 5b       	subi	r30, 0xB3	; 179
     d2c:	ff 4f       	sbci	r31, 0xFF	; 255
     d2e:	60 81       	ld	r22, Z
     d30:	71 81       	ldd	r23, Z+1	; 0x01
     d32:	82 81       	ldd	r24, Z+2	; 0x02
     d34:	93 81       	ldd	r25, Z+3	; 0x03
     d36:	20 e0       	ldi	r18, 0x00	; 0
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	40 e8       	ldi	r20, 0x80	; 128
     d3c:	5f e3       	ldi	r21, 0x3F	; 63
     d3e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d42:	88 23       	and	r24, r24
     d44:	44 f4       	brge	.+16     	; 0xd56 <enterNewPassword+0x12a>
		__ticks = 1;
     d46:	fe 01       	movw	r30, r28
     d48:	e5 5b       	subi	r30, 0xB5	; 181
     d4a:	ff 4f       	sbci	r31, 0xFF	; 255
     d4c:	81 e0       	ldi	r24, 0x01	; 1
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	91 83       	std	Z+1, r25	; 0x01
     d52:	80 83       	st	Z, r24
     d54:	64 c0       	rjmp	.+200    	; 0xe1e <enterNewPassword+0x1f2>
	else if (__tmp > 65535)
     d56:	fe 01       	movw	r30, r28
     d58:	e3 5b       	subi	r30, 0xB3	; 179
     d5a:	ff 4f       	sbci	r31, 0xFF	; 255
     d5c:	60 81       	ld	r22, Z
     d5e:	71 81       	ldd	r23, Z+1	; 0x01
     d60:	82 81       	ldd	r24, Z+2	; 0x02
     d62:	93 81       	ldd	r25, Z+3	; 0x03
     d64:	20 e0       	ldi	r18, 0x00	; 0
     d66:	3f ef       	ldi	r19, 0xFF	; 255
     d68:	4f e7       	ldi	r20, 0x7F	; 127
     d6a:	57 e4       	ldi	r21, 0x47	; 71
     d6c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d70:	18 16       	cp	r1, r24
     d72:	0c f0       	brlt	.+2      	; 0xd76 <enterNewPassword+0x14a>
     d74:	43 c0       	rjmp	.+134    	; 0xdfc <enterNewPassword+0x1d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d76:	fe 01       	movw	r30, r28
     d78:	ef 5a       	subi	r30, 0xAF	; 175
     d7a:	ff 4f       	sbci	r31, 0xFF	; 255
     d7c:	60 81       	ld	r22, Z
     d7e:	71 81       	ldd	r23, Z+1	; 0x01
     d80:	82 81       	ldd	r24, Z+2	; 0x02
     d82:	93 81       	ldd	r25, Z+3	; 0x03
     d84:	20 e0       	ldi	r18, 0x00	; 0
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	40 e2       	ldi	r20, 0x20	; 32
     d8a:	51 e4       	ldi	r21, 0x41	; 65
     d8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d90:	dc 01       	movw	r26, r24
     d92:	cb 01       	movw	r24, r22
     d94:	8e 01       	movw	r16, r28
     d96:	05 5b       	subi	r16, 0xB5	; 181
     d98:	1f 4f       	sbci	r17, 0xFF	; 255
     d9a:	bc 01       	movw	r22, r24
     d9c:	cd 01       	movw	r24, r26
     d9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     da2:	dc 01       	movw	r26, r24
     da4:	cb 01       	movw	r24, r22
     da6:	f8 01       	movw	r30, r16
     da8:	91 83       	std	Z+1, r25	; 0x01
     daa:	80 83       	st	Z, r24
     dac:	1f c0       	rjmp	.+62     	; 0xdec <enterNewPassword+0x1c0>
     dae:	fe 01       	movw	r30, r28
     db0:	e7 5b       	subi	r30, 0xB7	; 183
     db2:	ff 4f       	sbci	r31, 0xFF	; 255
     db4:	88 ec       	ldi	r24, 0xC8	; 200
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	91 83       	std	Z+1, r25	; 0x01
     dba:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     dbc:	fe 01       	movw	r30, r28
     dbe:	e7 5b       	subi	r30, 0xB7	; 183
     dc0:	ff 4f       	sbci	r31, 0xFF	; 255
     dc2:	80 81       	ld	r24, Z
     dc4:	91 81       	ldd	r25, Z+1	; 0x01
     dc6:	01 97       	sbiw	r24, 0x01	; 1
     dc8:	f1 f7       	brne	.-4      	; 0xdc6 <enterNewPassword+0x19a>
     dca:	fe 01       	movw	r30, r28
     dcc:	e7 5b       	subi	r30, 0xB7	; 183
     dce:	ff 4f       	sbci	r31, 0xFF	; 255
     dd0:	91 83       	std	Z+1, r25	; 0x01
     dd2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dd4:	de 01       	movw	r26, r28
     dd6:	a5 5b       	subi	r26, 0xB5	; 181
     dd8:	bf 4f       	sbci	r27, 0xFF	; 255
     dda:	fe 01       	movw	r30, r28
     ddc:	e5 5b       	subi	r30, 0xB5	; 181
     dde:	ff 4f       	sbci	r31, 0xFF	; 255
     de0:	80 81       	ld	r24, Z
     de2:	91 81       	ldd	r25, Z+1	; 0x01
     de4:	01 97       	sbiw	r24, 0x01	; 1
     de6:	11 96       	adiw	r26, 0x01	; 1
     de8:	9c 93       	st	X, r25
     dea:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dec:	fe 01       	movw	r30, r28
     dee:	e5 5b       	subi	r30, 0xB5	; 181
     df0:	ff 4f       	sbci	r31, 0xFF	; 255
     df2:	80 81       	ld	r24, Z
     df4:	91 81       	ldd	r25, Z+1	; 0x01
     df6:	00 97       	sbiw	r24, 0x00	; 0
     df8:	d1 f6       	brne	.-76     	; 0xdae <enterNewPassword+0x182>
     dfa:	27 c0       	rjmp	.+78     	; 0xe4a <enterNewPassword+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dfc:	8e 01       	movw	r16, r28
     dfe:	05 5b       	subi	r16, 0xB5	; 181
     e00:	1f 4f       	sbci	r17, 0xFF	; 255
     e02:	fe 01       	movw	r30, r28
     e04:	e3 5b       	subi	r30, 0xB3	; 179
     e06:	ff 4f       	sbci	r31, 0xFF	; 255
     e08:	60 81       	ld	r22, Z
     e0a:	71 81       	ldd	r23, Z+1	; 0x01
     e0c:	82 81       	ldd	r24, Z+2	; 0x02
     e0e:	93 81       	ldd	r25, Z+3	; 0x03
     e10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e14:	dc 01       	movw	r26, r24
     e16:	cb 01       	movw	r24, r22
     e18:	f8 01       	movw	r30, r16
     e1a:	91 83       	std	Z+1, r25	; 0x01
     e1c:	80 83       	st	Z, r24
     e1e:	de 01       	movw	r26, r28
     e20:	a9 5b       	subi	r26, 0xB9	; 185
     e22:	bf 4f       	sbci	r27, 0xFF	; 255
     e24:	fe 01       	movw	r30, r28
     e26:	e5 5b       	subi	r30, 0xB5	; 181
     e28:	ff 4f       	sbci	r31, 0xFF	; 255
     e2a:	80 81       	ld	r24, Z
     e2c:	91 81       	ldd	r25, Z+1	; 0x01
     e2e:	8d 93       	st	X+, r24
     e30:	9c 93       	st	X, r25
     e32:	fe 01       	movw	r30, r28
     e34:	e9 5b       	subi	r30, 0xB9	; 185
     e36:	ff 4f       	sbci	r31, 0xFF	; 255
     e38:	80 81       	ld	r24, Z
     e3a:	91 81       	ldd	r25, Z+1	; 0x01
     e3c:	01 97       	sbiw	r24, 0x01	; 1
     e3e:	f1 f7       	brne	.-4      	; 0xe3c <enterNewPassword+0x210>
     e40:	fe 01       	movw	r30, r28
     e42:	e9 5b       	subi	r30, 0xB9	; 185
     e44:	ff 4f       	sbci	r31, 0xFF	; 255
     e46:	91 83       	std	Z+1, r25	; 0x01
     e48:	80 83       	st	Z, r24
				_delay_ms(500);
				break;
			}
			_delay_ms(500);
		}
		LCD_clearScreen();
     e4a:	0e 94 41 15 	call	0x2a82	; 0x2a82 <LCD_clearScreen>
		LCD_displayString("Verify Password:");
     e4e:	83 ea       	ldi	r24, 0xA3	; 163
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	0e 94 9a 14 	call	0x2934	; 0x2934 <LCD_displayString>
		LCD_moveCursor(1, 0);
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	60 e0       	ldi	r22, 0x00	; 0
     e5a:	0e 94 c3 14 	call	0x2986	; 0x2986 <LCD_moveCursor>
     e5e:	86 c0       	rjmp	.+268    	; 0xf6c <enterNewPassword+0x340>
     e60:	fe 01       	movw	r30, r28
     e62:	ed 5b       	subi	r30, 0xBD	; 189
     e64:	ff 4f       	sbci	r31, 0xFF	; 255
     e66:	80 e0       	ldi	r24, 0x00	; 0
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	aa ef       	ldi	r26, 0xFA	; 250
     e6c:	b3 e4       	ldi	r27, 0x43	; 67
     e6e:	80 83       	st	Z, r24
     e70:	91 83       	std	Z+1, r25	; 0x01
     e72:	a2 83       	std	Z+2, r26	; 0x02
     e74:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e76:	8e 01       	movw	r16, r28
     e78:	01 5c       	subi	r16, 0xC1	; 193
     e7a:	1f 4f       	sbci	r17, 0xFF	; 255
     e7c:	fe 01       	movw	r30, r28
     e7e:	ed 5b       	subi	r30, 0xBD	; 189
     e80:	ff 4f       	sbci	r31, 0xFF	; 255
     e82:	60 81       	ld	r22, Z
     e84:	71 81       	ldd	r23, Z+1	; 0x01
     e86:	82 81       	ldd	r24, Z+2	; 0x02
     e88:	93 81       	ldd	r25, Z+3	; 0x03
     e8a:	20 e0       	ldi	r18, 0x00	; 0
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	4a ef       	ldi	r20, 0xFA	; 250
     e90:	54 e4       	ldi	r21, 0x44	; 68
     e92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e96:	dc 01       	movw	r26, r24
     e98:	cb 01       	movw	r24, r22
     e9a:	f8 01       	movw	r30, r16
     e9c:	80 83       	st	Z, r24
     e9e:	91 83       	std	Z+1, r25	; 0x01
     ea0:	a2 83       	std	Z+2, r26	; 0x02
     ea2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     ea4:	fe 01       	movw	r30, r28
     ea6:	ff 96       	adiw	r30, 0x3f	; 63
     ea8:	60 81       	ld	r22, Z
     eaa:	71 81       	ldd	r23, Z+1	; 0x01
     eac:	82 81       	ldd	r24, Z+2	; 0x02
     eae:	93 81       	ldd	r25, Z+3	; 0x03
     eb0:	20 e0       	ldi	r18, 0x00	; 0
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	40 e8       	ldi	r20, 0x80	; 128
     eb6:	5f e3       	ldi	r21, 0x3F	; 63
     eb8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ebc:	88 23       	and	r24, r24
     ebe:	2c f4       	brge	.+10     	; 0xeca <enterNewPassword+0x29e>
		__ticks = 1;
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	9e af       	std	Y+62, r25	; 0x3e
     ec6:	8d af       	std	Y+61, r24	; 0x3d
     ec8:	46 c0       	rjmp	.+140    	; 0xf56 <enterNewPassword+0x32a>
	else if (__tmp > 65535)
     eca:	fe 01       	movw	r30, r28
     ecc:	ff 96       	adiw	r30, 0x3f	; 63
     ece:	60 81       	ld	r22, Z
     ed0:	71 81       	ldd	r23, Z+1	; 0x01
     ed2:	82 81       	ldd	r24, Z+2	; 0x02
     ed4:	93 81       	ldd	r25, Z+3	; 0x03
     ed6:	20 e0       	ldi	r18, 0x00	; 0
     ed8:	3f ef       	ldi	r19, 0xFF	; 255
     eda:	4f e7       	ldi	r20, 0x7F	; 127
     edc:	57 e4       	ldi	r21, 0x47	; 71
     ede:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ee2:	18 16       	cp	r1, r24
     ee4:	64 f5       	brge	.+88     	; 0xf3e <enterNewPassword+0x312>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ee6:	fe 01       	movw	r30, r28
     ee8:	ed 5b       	subi	r30, 0xBD	; 189
     eea:	ff 4f       	sbci	r31, 0xFF	; 255
     eec:	60 81       	ld	r22, Z
     eee:	71 81       	ldd	r23, Z+1	; 0x01
     ef0:	82 81       	ldd	r24, Z+2	; 0x02
     ef2:	93 81       	ldd	r25, Z+3	; 0x03
     ef4:	20 e0       	ldi	r18, 0x00	; 0
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	40 e2       	ldi	r20, 0x20	; 32
     efa:	51 e4       	ldi	r21, 0x41	; 65
     efc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f00:	dc 01       	movw	r26, r24
     f02:	cb 01       	movw	r24, r22
     f04:	bc 01       	movw	r22, r24
     f06:	cd 01       	movw	r24, r26
     f08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f0c:	dc 01       	movw	r26, r24
     f0e:	cb 01       	movw	r24, r22
     f10:	9e af       	std	Y+62, r25	; 0x3e
     f12:	8d af       	std	Y+61, r24	; 0x3d
     f14:	0f c0       	rjmp	.+30     	; 0xf34 <enterNewPassword+0x308>
     f16:	88 ec       	ldi	r24, 0xC8	; 200
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	9c af       	std	Y+60, r25	; 0x3c
     f1c:	8b af       	std	Y+59, r24	; 0x3b
     f1e:	8b ad       	ldd	r24, Y+59	; 0x3b
     f20:	9c ad       	ldd	r25, Y+60	; 0x3c
     f22:	01 97       	sbiw	r24, 0x01	; 1
     f24:	f1 f7       	brne	.-4      	; 0xf22 <enterNewPassword+0x2f6>
     f26:	9c af       	std	Y+60, r25	; 0x3c
     f28:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f2a:	8d ad       	ldd	r24, Y+61	; 0x3d
     f2c:	9e ad       	ldd	r25, Y+62	; 0x3e
     f2e:	01 97       	sbiw	r24, 0x01	; 1
     f30:	9e af       	std	Y+62, r25	; 0x3e
     f32:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f34:	8d ad       	ldd	r24, Y+61	; 0x3d
     f36:	9e ad       	ldd	r25, Y+62	; 0x3e
     f38:	00 97       	sbiw	r24, 0x00	; 0
     f3a:	69 f7       	brne	.-38     	; 0xf16 <enterNewPassword+0x2ea>
     f3c:	a7 ce       	rjmp	.-690    	; 0xc8c <enterNewPassword+0x60>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f3e:	fe 01       	movw	r30, r28
     f40:	ff 96       	adiw	r30, 0x3f	; 63
     f42:	60 81       	ld	r22, Z
     f44:	71 81       	ldd	r23, Z+1	; 0x01
     f46:	82 81       	ldd	r24, Z+2	; 0x02
     f48:	93 81       	ldd	r25, Z+3	; 0x03
     f4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f4e:	dc 01       	movw	r26, r24
     f50:	cb 01       	movw	r24, r22
     f52:	9e af       	std	Y+62, r25	; 0x3e
     f54:	8d af       	std	Y+61, r24	; 0x3d
     f56:	8d ad       	ldd	r24, Y+61	; 0x3d
     f58:	9e ad       	ldd	r25, Y+62	; 0x3e
     f5a:	9a af       	std	Y+58, r25	; 0x3a
     f5c:	89 af       	std	Y+57, r24	; 0x39
     f5e:	89 ad       	ldd	r24, Y+57	; 0x39
     f60:	9a ad       	ldd	r25, Y+58	; 0x3a
     f62:	01 97       	sbiw	r24, 0x01	; 1
     f64:	f1 f7       	brne	.-4      	; 0xf62 <enterNewPassword+0x336>
     f66:	9a af       	std	Y+58, r25	; 0x3a
     f68:	89 af       	std	Y+57, r24	; 0x39
     f6a:	90 ce       	rjmp	.-736    	; 0xc8c <enterNewPassword+0x60>
		while (1) {
			/*take value from keypad , if it is number , save in re-password
			 * password isn't more than 5 numbers
			 * if user press '=' save password and break loop;
			 * */
			key = KEYPAD_getPressedKey();
     f6c:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <KEYPAD_getPressedKey>
     f70:	fe 01       	movw	r30, r28
     f72:	e9 5a       	subi	r30, 0xA9	; 169
     f74:	ff 4f       	sbci	r31, 0xFF	; 255
     f76:	80 83       	st	Z, r24
			if (key >= 0 && key <= 9 && count < MAXNUMBERS) {
     f78:	fe 01       	movw	r30, r28
     f7a:	e9 5a       	subi	r30, 0xA9	; 169
     f7c:	ff 4f       	sbci	r31, 0xFF	; 255
     f7e:	80 81       	ld	r24, Z
     f80:	8a 30       	cpi	r24, 0x0A	; 10
     f82:	20 f5       	brcc	.+72     	; 0xfcc <enterNewPassword+0x3a0>
     f84:	fe 01       	movw	r30, r28
     f86:	ea 5a       	subi	r30, 0xAA	; 170
     f88:	ff 4f       	sbci	r31, 0xFF	; 255
     f8a:	80 81       	ld	r24, Z
     f8c:	85 30       	cpi	r24, 0x05	; 5
     f8e:	f0 f4       	brcc	.+60     	; 0xfcc <enterNewPassword+0x3a0>
				g_rePassword[count] = key;
     f90:	fe 01       	movw	r30, r28
     f92:	ea 5a       	subi	r30, 0xAA	; 170
     f94:	ff 4f       	sbci	r31, 0xFF	; 255
     f96:	80 81       	ld	r24, Z
     f98:	28 2f       	mov	r18, r24
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	ce 01       	movw	r24, r28
     f9e:	88 5a       	subi	r24, 0xA8	; 168
     fa0:	9f 4f       	sbci	r25, 0xFF	; 255
     fa2:	dc 01       	movw	r26, r24
     fa4:	a2 0f       	add	r26, r18
     fa6:	b3 1f       	adc	r27, r19
     fa8:	fe 01       	movw	r30, r28
     faa:	e9 5a       	subi	r30, 0xA9	; 169
     fac:	ff 4f       	sbci	r31, 0xFF	; 255
     fae:	80 81       	ld	r24, Z
     fb0:	8c 93       	st	X, r24
				LCD_displayCharacter('*');
     fb2:	8a e2       	ldi	r24, 0x2A	; 42
     fb4:	0e 94 a6 12 	call	0x254c	; 0x254c <LCD_displayCharacter>
				count++;
     fb8:	de 01       	movw	r26, r28
     fba:	aa 5a       	subi	r26, 0xAA	; 170
     fbc:	bf 4f       	sbci	r27, 0xFF	; 255
     fbe:	fe 01       	movw	r30, r28
     fc0:	ea 5a       	subi	r30, 0xAA	; 170
     fc2:	ff 4f       	sbci	r31, 0xFF	; 255
     fc4:	80 81       	ld	r24, Z
     fc6:	8f 5f       	subi	r24, 0xFF	; 255
     fc8:	8c 93       	st	X, r24
     fca:	83 c0       	rjmp	.+262    	; 0x10d2 <enterNewPassword+0x4a6>
			} else if (key == '=') {
     fcc:	fe 01       	movw	r30, r28
     fce:	e9 5a       	subi	r30, 0xA9	; 169
     fd0:	ff 4f       	sbci	r31, 0xFF	; 255
     fd2:	80 81       	ld	r24, Z
     fd4:	8d 33       	cpi	r24, 0x3D	; 61
     fd6:	09 f0       	breq	.+2      	; 0xfda <enterNewPassword+0x3ae>
     fd8:	7c c0       	rjmp	.+248    	; 0x10d2 <enterNewPassword+0x4a6>
     fda:	80 e0       	ldi	r24, 0x00	; 0
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	aa ef       	ldi	r26, 0xFA	; 250
     fe0:	b3 e4       	ldi	r27, 0x43	; 67
     fe2:	8d ab       	std	Y+53, r24	; 0x35
     fe4:	9e ab       	std	Y+54, r25	; 0x36
     fe6:	af ab       	std	Y+55, r26	; 0x37
     fe8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fea:	6d a9       	ldd	r22, Y+53	; 0x35
     fec:	7e a9       	ldd	r23, Y+54	; 0x36
     fee:	8f a9       	ldd	r24, Y+55	; 0x37
     ff0:	98 ad       	ldd	r25, Y+56	; 0x38
     ff2:	20 e0       	ldi	r18, 0x00	; 0
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	4a ef       	ldi	r20, 0xFA	; 250
     ff8:	54 e4       	ldi	r21, 0x44	; 68
     ffa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ffe:	dc 01       	movw	r26, r24
    1000:	cb 01       	movw	r24, r22
    1002:	89 ab       	std	Y+49, r24	; 0x31
    1004:	9a ab       	std	Y+50, r25	; 0x32
    1006:	ab ab       	std	Y+51, r26	; 0x33
    1008:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    100a:	69 a9       	ldd	r22, Y+49	; 0x31
    100c:	7a a9       	ldd	r23, Y+50	; 0x32
    100e:	8b a9       	ldd	r24, Y+51	; 0x33
    1010:	9c a9       	ldd	r25, Y+52	; 0x34
    1012:	20 e0       	ldi	r18, 0x00	; 0
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	40 e8       	ldi	r20, 0x80	; 128
    1018:	5f e3       	ldi	r21, 0x3F	; 63
    101a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    101e:	88 23       	and	r24, r24
    1020:	2c f4       	brge	.+10     	; 0x102c <enterNewPassword+0x400>
		__ticks = 1;
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	98 ab       	std	Y+48, r25	; 0x30
    1028:	8f a7       	std	Y+47, r24	; 0x2f
    102a:	3f c0       	rjmp	.+126    	; 0x10aa <enterNewPassword+0x47e>
	else if (__tmp > 65535)
    102c:	69 a9       	ldd	r22, Y+49	; 0x31
    102e:	7a a9       	ldd	r23, Y+50	; 0x32
    1030:	8b a9       	ldd	r24, Y+51	; 0x33
    1032:	9c a9       	ldd	r25, Y+52	; 0x34
    1034:	20 e0       	ldi	r18, 0x00	; 0
    1036:	3f ef       	ldi	r19, 0xFF	; 255
    1038:	4f e7       	ldi	r20, 0x7F	; 127
    103a:	57 e4       	ldi	r21, 0x47	; 71
    103c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1040:	18 16       	cp	r1, r24
    1042:	4c f5       	brge	.+82     	; 0x1096 <enterNewPassword+0x46a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1044:	6d a9       	ldd	r22, Y+53	; 0x35
    1046:	7e a9       	ldd	r23, Y+54	; 0x36
    1048:	8f a9       	ldd	r24, Y+55	; 0x37
    104a:	98 ad       	ldd	r25, Y+56	; 0x38
    104c:	20 e0       	ldi	r18, 0x00	; 0
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	40 e2       	ldi	r20, 0x20	; 32
    1052:	51 e4       	ldi	r21, 0x41	; 65
    1054:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1058:	dc 01       	movw	r26, r24
    105a:	cb 01       	movw	r24, r22
    105c:	bc 01       	movw	r22, r24
    105e:	cd 01       	movw	r24, r26
    1060:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1064:	dc 01       	movw	r26, r24
    1066:	cb 01       	movw	r24, r22
    1068:	98 ab       	std	Y+48, r25	; 0x30
    106a:	8f a7       	std	Y+47, r24	; 0x2f
    106c:	0f c0       	rjmp	.+30     	; 0x108c <enterNewPassword+0x460>
    106e:	88 ec       	ldi	r24, 0xC8	; 200
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	9e a7       	std	Y+46, r25	; 0x2e
    1074:	8d a7       	std	Y+45, r24	; 0x2d
    1076:	8d a5       	ldd	r24, Y+45	; 0x2d
    1078:	9e a5       	ldd	r25, Y+46	; 0x2e
    107a:	01 97       	sbiw	r24, 0x01	; 1
    107c:	f1 f7       	brne	.-4      	; 0x107a <enterNewPassword+0x44e>
    107e:	9e a7       	std	Y+46, r25	; 0x2e
    1080:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1082:	8f a5       	ldd	r24, Y+47	; 0x2f
    1084:	98 a9       	ldd	r25, Y+48	; 0x30
    1086:	01 97       	sbiw	r24, 0x01	; 1
    1088:	98 ab       	std	Y+48, r25	; 0x30
    108a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    108c:	8f a5       	ldd	r24, Y+47	; 0x2f
    108e:	98 a9       	ldd	r25, Y+48	; 0x30
    1090:	00 97       	sbiw	r24, 0x00	; 0
    1092:	69 f7       	brne	.-38     	; 0x106e <enterNewPassword+0x442>
    1094:	14 c0       	rjmp	.+40     	; 0x10be <enterNewPassword+0x492>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1096:	69 a9       	ldd	r22, Y+49	; 0x31
    1098:	7a a9       	ldd	r23, Y+50	; 0x32
    109a:	8b a9       	ldd	r24, Y+51	; 0x33
    109c:	9c a9       	ldd	r25, Y+52	; 0x34
    109e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10a2:	dc 01       	movw	r26, r24
    10a4:	cb 01       	movw	r24, r22
    10a6:	98 ab       	std	Y+48, r25	; 0x30
    10a8:	8f a7       	std	Y+47, r24	; 0x2f
    10aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    10ac:	98 a9       	ldd	r25, Y+48	; 0x30
    10ae:	9c a7       	std	Y+44, r25	; 0x2c
    10b0:	8b a7       	std	Y+43, r24	; 0x2b
    10b2:	8b a5       	ldd	r24, Y+43	; 0x2b
    10b4:	9c a5       	ldd	r25, Y+44	; 0x2c
    10b6:	01 97       	sbiw	r24, 0x01	; 1
    10b8:	f1 f7       	brne	.-4      	; 0x10b6 <enterNewPassword+0x48a>
    10ba:	9c a7       	std	Y+44, r25	; 0x2c
    10bc:	8b a7       	std	Y+43, r24	; 0x2b
				break;
			}
			_delay_ms(500);
		}
		/*error if not match in size*/
		if (g_passwordSize != count) {
    10be:	80 91 03 01 	lds	r24, 0x0103
    10c2:	fe 01       	movw	r30, r28
    10c4:	ea 5a       	subi	r30, 0xAA	; 170
    10c6:	ff 4f       	sbci	r31, 0xFF	; 255
    10c8:	90 81       	ld	r25, Z
    10ca:	89 17       	cp	r24, r25
    10cc:	09 f0       	breq	.+2      	; 0x10d0 <enterNewPassword+0x4a4>
    10ce:	74 c0       	rjmp	.+232    	; 0x11b8 <enterNewPassword+0x58c>
    10d0:	77 c0       	rjmp	.+238    	; 0x11c0 <enterNewPassword+0x594>
    10d2:	80 e0       	ldi	r24, 0x00	; 0
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	aa ef       	ldi	r26, 0xFA	; 250
    10d8:	b3 e4       	ldi	r27, 0x43	; 67
    10da:	8f a3       	std	Y+39, r24	; 0x27
    10dc:	98 a7       	std	Y+40, r25	; 0x28
    10de:	a9 a7       	std	Y+41, r26	; 0x29
    10e0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10e2:	6f a1       	ldd	r22, Y+39	; 0x27
    10e4:	78 a5       	ldd	r23, Y+40	; 0x28
    10e6:	89 a5       	ldd	r24, Y+41	; 0x29
    10e8:	9a a5       	ldd	r25, Y+42	; 0x2a
    10ea:	20 e0       	ldi	r18, 0x00	; 0
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	4a ef       	ldi	r20, 0xFA	; 250
    10f0:	54 e4       	ldi	r21, 0x44	; 68
    10f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10f6:	dc 01       	movw	r26, r24
    10f8:	cb 01       	movw	r24, r22
    10fa:	8b a3       	std	Y+35, r24	; 0x23
    10fc:	9c a3       	std	Y+36, r25	; 0x24
    10fe:	ad a3       	std	Y+37, r26	; 0x25
    1100:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1102:	6b a1       	ldd	r22, Y+35	; 0x23
    1104:	7c a1       	ldd	r23, Y+36	; 0x24
    1106:	8d a1       	ldd	r24, Y+37	; 0x25
    1108:	9e a1       	ldd	r25, Y+38	; 0x26
    110a:	20 e0       	ldi	r18, 0x00	; 0
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	40 e8       	ldi	r20, 0x80	; 128
    1110:	5f e3       	ldi	r21, 0x3F	; 63
    1112:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1116:	88 23       	and	r24, r24
    1118:	2c f4       	brge	.+10     	; 0x1124 <enterNewPassword+0x4f8>
		__ticks = 1;
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	9a a3       	std	Y+34, r25	; 0x22
    1120:	89 a3       	std	Y+33, r24	; 0x21
    1122:	3f c0       	rjmp	.+126    	; 0x11a2 <enterNewPassword+0x576>
	else if (__tmp > 65535)
    1124:	6b a1       	ldd	r22, Y+35	; 0x23
    1126:	7c a1       	ldd	r23, Y+36	; 0x24
    1128:	8d a1       	ldd	r24, Y+37	; 0x25
    112a:	9e a1       	ldd	r25, Y+38	; 0x26
    112c:	20 e0       	ldi	r18, 0x00	; 0
    112e:	3f ef       	ldi	r19, 0xFF	; 255
    1130:	4f e7       	ldi	r20, 0x7F	; 127
    1132:	57 e4       	ldi	r21, 0x47	; 71
    1134:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1138:	18 16       	cp	r1, r24
    113a:	4c f5       	brge	.+82     	; 0x118e <enterNewPassword+0x562>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    113c:	6f a1       	ldd	r22, Y+39	; 0x27
    113e:	78 a5       	ldd	r23, Y+40	; 0x28
    1140:	89 a5       	ldd	r24, Y+41	; 0x29
    1142:	9a a5       	ldd	r25, Y+42	; 0x2a
    1144:	20 e0       	ldi	r18, 0x00	; 0
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	40 e2       	ldi	r20, 0x20	; 32
    114a:	51 e4       	ldi	r21, 0x41	; 65
    114c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1150:	dc 01       	movw	r26, r24
    1152:	cb 01       	movw	r24, r22
    1154:	bc 01       	movw	r22, r24
    1156:	cd 01       	movw	r24, r26
    1158:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    115c:	dc 01       	movw	r26, r24
    115e:	cb 01       	movw	r24, r22
    1160:	9a a3       	std	Y+34, r25	; 0x22
    1162:	89 a3       	std	Y+33, r24	; 0x21
    1164:	0f c0       	rjmp	.+30     	; 0x1184 <enterNewPassword+0x558>
    1166:	88 ec       	ldi	r24, 0xC8	; 200
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	98 a3       	std	Y+32, r25	; 0x20
    116c:	8f 8f       	std	Y+31, r24	; 0x1f
    116e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1170:	98 a1       	ldd	r25, Y+32	; 0x20
    1172:	01 97       	sbiw	r24, 0x01	; 1
    1174:	f1 f7       	brne	.-4      	; 0x1172 <enterNewPassword+0x546>
    1176:	98 a3       	std	Y+32, r25	; 0x20
    1178:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    117a:	89 a1       	ldd	r24, Y+33	; 0x21
    117c:	9a a1       	ldd	r25, Y+34	; 0x22
    117e:	01 97       	sbiw	r24, 0x01	; 1
    1180:	9a a3       	std	Y+34, r25	; 0x22
    1182:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1184:	89 a1       	ldd	r24, Y+33	; 0x21
    1186:	9a a1       	ldd	r25, Y+34	; 0x22
    1188:	00 97       	sbiw	r24, 0x00	; 0
    118a:	69 f7       	brne	.-38     	; 0x1166 <enterNewPassword+0x53a>
    118c:	ef ce       	rjmp	.-546    	; 0xf6c <enterNewPassword+0x340>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    118e:	6b a1       	ldd	r22, Y+35	; 0x23
    1190:	7c a1       	ldd	r23, Y+36	; 0x24
    1192:	8d a1       	ldd	r24, Y+37	; 0x25
    1194:	9e a1       	ldd	r25, Y+38	; 0x26
    1196:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    119a:	dc 01       	movw	r26, r24
    119c:	cb 01       	movw	r24, r22
    119e:	9a a3       	std	Y+34, r25	; 0x22
    11a0:	89 a3       	std	Y+33, r24	; 0x21
    11a2:	89 a1       	ldd	r24, Y+33	; 0x21
    11a4:	9a a1       	ldd	r25, Y+34	; 0x22
    11a6:	9e 8f       	std	Y+30, r25	; 0x1e
    11a8:	8d 8f       	std	Y+29, r24	; 0x1d
    11aa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11ac:	9e 8d       	ldd	r25, Y+30	; 0x1e
    11ae:	01 97       	sbiw	r24, 0x01	; 1
    11b0:	f1 f7       	brne	.-4      	; 0x11ae <enterNewPassword+0x582>
    11b2:	9e 8f       	std	Y+30, r25	; 0x1e
    11b4:	8d 8f       	std	Y+29, r24	; 0x1d
    11b6:	da ce       	rjmp	.-588    	; 0xf6c <enterNewPassword+0x340>
			check_match = ERROR;
    11b8:	fe 01       	movw	r30, r28
    11ba:	eb 5a       	subi	r30, 0xAB	; 171
    11bc:	ff 4f       	sbci	r31, 0xFF	; 255
    11be:	10 82       	st	Z, r1
		}
		/* check match between password and repassword*/
		for (count = 0; count < g_passwordSize; count++) {
    11c0:	fe 01       	movw	r30, r28
    11c2:	ea 5a       	subi	r30, 0xAA	; 170
    11c4:	ff 4f       	sbci	r31, 0xFF	; 255
    11c6:	10 82       	st	Z, r1
    11c8:	26 c0       	rjmp	.+76     	; 0x1216 <enterNewPassword+0x5ea>
			if (g_password[count] != g_rePassword[count]) {
    11ca:	fe 01       	movw	r30, r28
    11cc:	ea 5a       	subi	r30, 0xAA	; 170
    11ce:	ff 4f       	sbci	r31, 0xFF	; 255
    11d0:	80 81       	ld	r24, Z
    11d2:	88 2f       	mov	r24, r24
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	fc 01       	movw	r30, r24
    11d8:	e2 50       	subi	r30, 0x02	; 2
    11da:	ff 4f       	sbci	r31, 0xFF	; 255
    11dc:	40 81       	ld	r20, Z
    11de:	fe 01       	movw	r30, r28
    11e0:	ea 5a       	subi	r30, 0xAA	; 170
    11e2:	ff 4f       	sbci	r31, 0xFF	; 255
    11e4:	80 81       	ld	r24, Z
    11e6:	28 2f       	mov	r18, r24
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	ce 01       	movw	r24, r28
    11ec:	88 5a       	subi	r24, 0xA8	; 168
    11ee:	9f 4f       	sbci	r25, 0xFF	; 255
    11f0:	fc 01       	movw	r30, r24
    11f2:	e2 0f       	add	r30, r18
    11f4:	f3 1f       	adc	r31, r19
    11f6:	80 81       	ld	r24, Z
    11f8:	48 17       	cp	r20, r24
    11fa:	21 f0       	breq	.+8      	; 0x1204 <enterNewPassword+0x5d8>
				check_match = ERROR;
    11fc:	fe 01       	movw	r30, r28
    11fe:	eb 5a       	subi	r30, 0xAB	; 171
    1200:	ff 4f       	sbci	r31, 0xFF	; 255
    1202:	10 82       	st	Z, r1
		/*error if not match in size*/
		if (g_passwordSize != count) {
			check_match = ERROR;
		}
		/* check match between password and repassword*/
		for (count = 0; count < g_passwordSize; count++) {
    1204:	de 01       	movw	r26, r28
    1206:	aa 5a       	subi	r26, 0xAA	; 170
    1208:	bf 4f       	sbci	r27, 0xFF	; 255
    120a:	fe 01       	movw	r30, r28
    120c:	ea 5a       	subi	r30, 0xAA	; 170
    120e:	ff 4f       	sbci	r31, 0xFF	; 255
    1210:	80 81       	ld	r24, Z
    1212:	8f 5f       	subi	r24, 0xFF	; 255
    1214:	8c 93       	st	X, r24
    1216:	80 91 03 01 	lds	r24, 0x0103
    121a:	fe 01       	movw	r30, r28
    121c:	ea 5a       	subi	r30, 0xAA	; 170
    121e:	ff 4f       	sbci	r31, 0xFF	; 255
    1220:	90 81       	ld	r25, Z
    1222:	98 17       	cp	r25, r24
    1224:	90 f2       	brcs	.-92     	; 0x11ca <enterNewPassword+0x59e>
		}
		/*
		 * if they match , break super loop and send new password to Control ECU to save ot in Eeprom
		 * if they not match , enter new password again
		 * count1>2 password must be more than two number*/
		if (check_match == SUCCESS && g_passwordSize > 2) {
    1226:	fe 01       	movw	r30, r28
    1228:	eb 5a       	subi	r30, 0xAB	; 171
    122a:	ff 4f       	sbci	r31, 0xFF	; 255
    122c:	80 81       	ld	r24, Z
    122e:	81 30       	cpi	r24, 0x01	; 1
    1230:	09 f0       	breq	.+2      	; 0x1234 <enterNewPassword+0x608>
    1232:	ac c0       	rjmp	.+344    	; 0x138c <enterNewPassword+0x760>
    1234:	80 91 03 01 	lds	r24, 0x0103
    1238:	83 30       	cpi	r24, 0x03	; 3
    123a:	08 f4       	brcc	.+2      	; 0x123e <enterNewPassword+0x612>
    123c:	a7 c0       	rjmp	.+334    	; 0x138c <enterNewPassword+0x760>
			LCD_clearScreen();
    123e:	0e 94 41 15 	call	0x2a82	; 0x2a82 <LCD_clearScreen>
			LCD_displayString("SUCCESS");
    1242:	84 eb       	ldi	r24, 0xB4	; 180
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	0e 94 9a 14 	call	0x2934	; 0x2934 <LCD_displayString>
    124a:	80 e0       	ldi	r24, 0x00	; 0
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	aa ef       	ldi	r26, 0xFA	; 250
    1250:	b3 e4       	ldi	r27, 0x43	; 67
    1252:	89 8f       	std	Y+25, r24	; 0x19
    1254:	9a 8f       	std	Y+26, r25	; 0x1a
    1256:	ab 8f       	std	Y+27, r26	; 0x1b
    1258:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    125a:	69 8d       	ldd	r22, Y+25	; 0x19
    125c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    125e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1260:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1262:	20 e0       	ldi	r18, 0x00	; 0
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	4a ef       	ldi	r20, 0xFA	; 250
    1268:	54 e4       	ldi	r21, 0x44	; 68
    126a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    126e:	dc 01       	movw	r26, r24
    1270:	cb 01       	movw	r24, r22
    1272:	8d 8b       	std	Y+21, r24	; 0x15
    1274:	9e 8b       	std	Y+22, r25	; 0x16
    1276:	af 8b       	std	Y+23, r26	; 0x17
    1278:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    127a:	6d 89       	ldd	r22, Y+21	; 0x15
    127c:	7e 89       	ldd	r23, Y+22	; 0x16
    127e:	8f 89       	ldd	r24, Y+23	; 0x17
    1280:	98 8d       	ldd	r25, Y+24	; 0x18
    1282:	20 e0       	ldi	r18, 0x00	; 0
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	40 e8       	ldi	r20, 0x80	; 128
    1288:	5f e3       	ldi	r21, 0x3F	; 63
    128a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    128e:	88 23       	and	r24, r24
    1290:	2c f4       	brge	.+10     	; 0x129c <enterNewPassword+0x670>
		__ticks = 1;
    1292:	81 e0       	ldi	r24, 0x01	; 1
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	9c 8b       	std	Y+20, r25	; 0x14
    1298:	8b 8b       	std	Y+19, r24	; 0x13
    129a:	3f c0       	rjmp	.+126    	; 0x131a <enterNewPassword+0x6ee>
	else if (__tmp > 65535)
    129c:	6d 89       	ldd	r22, Y+21	; 0x15
    129e:	7e 89       	ldd	r23, Y+22	; 0x16
    12a0:	8f 89       	ldd	r24, Y+23	; 0x17
    12a2:	98 8d       	ldd	r25, Y+24	; 0x18
    12a4:	20 e0       	ldi	r18, 0x00	; 0
    12a6:	3f ef       	ldi	r19, 0xFF	; 255
    12a8:	4f e7       	ldi	r20, 0x7F	; 127
    12aa:	57 e4       	ldi	r21, 0x47	; 71
    12ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12b0:	18 16       	cp	r1, r24
    12b2:	4c f5       	brge	.+82     	; 0x1306 <enterNewPassword+0x6da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12b4:	69 8d       	ldd	r22, Y+25	; 0x19
    12b6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12bc:	20 e0       	ldi	r18, 0x00	; 0
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	40 e2       	ldi	r20, 0x20	; 32
    12c2:	51 e4       	ldi	r21, 0x41	; 65
    12c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12c8:	dc 01       	movw	r26, r24
    12ca:	cb 01       	movw	r24, r22
    12cc:	bc 01       	movw	r22, r24
    12ce:	cd 01       	movw	r24, r26
    12d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12d4:	dc 01       	movw	r26, r24
    12d6:	cb 01       	movw	r24, r22
    12d8:	9c 8b       	std	Y+20, r25	; 0x14
    12da:	8b 8b       	std	Y+19, r24	; 0x13
    12dc:	0f c0       	rjmp	.+30     	; 0x12fc <enterNewPassword+0x6d0>
    12de:	88 ec       	ldi	r24, 0xC8	; 200
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	9a 8b       	std	Y+18, r25	; 0x12
    12e4:	89 8b       	std	Y+17, r24	; 0x11
    12e6:	89 89       	ldd	r24, Y+17	; 0x11
    12e8:	9a 89       	ldd	r25, Y+18	; 0x12
    12ea:	01 97       	sbiw	r24, 0x01	; 1
    12ec:	f1 f7       	brne	.-4      	; 0x12ea <enterNewPassword+0x6be>
    12ee:	9a 8b       	std	Y+18, r25	; 0x12
    12f0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12f2:	8b 89       	ldd	r24, Y+19	; 0x13
    12f4:	9c 89       	ldd	r25, Y+20	; 0x14
    12f6:	01 97       	sbiw	r24, 0x01	; 1
    12f8:	9c 8b       	std	Y+20, r25	; 0x14
    12fa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12fc:	8b 89       	ldd	r24, Y+19	; 0x13
    12fe:	9c 89       	ldd	r25, Y+20	; 0x14
    1300:	00 97       	sbiw	r24, 0x00	; 0
    1302:	69 f7       	brne	.-38     	; 0x12de <enterNewPassword+0x6b2>
    1304:	14 c0       	rjmp	.+40     	; 0x132e <enterNewPassword+0x702>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1306:	6d 89       	ldd	r22, Y+21	; 0x15
    1308:	7e 89       	ldd	r23, Y+22	; 0x16
    130a:	8f 89       	ldd	r24, Y+23	; 0x17
    130c:	98 8d       	ldd	r25, Y+24	; 0x18
    130e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1312:	dc 01       	movw	r26, r24
    1314:	cb 01       	movw	r24, r22
    1316:	9c 8b       	std	Y+20, r25	; 0x14
    1318:	8b 8b       	std	Y+19, r24	; 0x13
    131a:	8b 89       	ldd	r24, Y+19	; 0x13
    131c:	9c 89       	ldd	r25, Y+20	; 0x14
    131e:	98 8b       	std	Y+16, r25	; 0x10
    1320:	8f 87       	std	Y+15, r24	; 0x0f
    1322:	8f 85       	ldd	r24, Y+15	; 0x0f
    1324:	98 89       	ldd	r25, Y+16	; 0x10
    1326:	01 97       	sbiw	r24, 0x01	; 1
    1328:	f1 f7       	brne	.-4      	; 0x1326 <enterNewPassword+0x6fa>
    132a:	98 8b       	std	Y+16, r25	; 0x10
    132c:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(500);
			while (UART_recieveByte() != ECU2_READY) {
    132e:	0e 94 a5 18 	call	0x314a	; 0x314a <UART_recieveByte>
    1332:	8f 3f       	cpi	r24, 0xFF	; 255
    1334:	e1 f7       	brne	.-8      	; 0x132e <enterNewPassword+0x702>
			}
			UART_sendByte(g_passwordSize);
    1336:	80 91 03 01 	lds	r24, 0x0103
    133a:	0e 94 8e 18 	call	0x311c	; 0x311c <UART_sendByte>
			while (UART_recieveByte() != ECU2_READY) {
    133e:	0e 94 a5 18 	call	0x314a	; 0x314a <UART_recieveByte>
    1342:	8f 3f       	cpi	r24, 0xFF	; 255
    1344:	e1 f7       	brne	.-8      	; 0x133e <enterNewPassword+0x712>
						}
			for (count = 0; count < g_passwordSize; count++) {
    1346:	fe 01       	movw	r30, r28
    1348:	ea 5a       	subi	r30, 0xAA	; 170
    134a:	ff 4f       	sbci	r31, 0xFF	; 255
    134c:	10 82       	st	Z, r1
    134e:	15 c0       	rjmp	.+42     	; 0x137a <enterNewPassword+0x74e>
				UART_sendByte(g_password[count]);
    1350:	fe 01       	movw	r30, r28
    1352:	ea 5a       	subi	r30, 0xAA	; 170
    1354:	ff 4f       	sbci	r31, 0xFF	; 255
    1356:	80 81       	ld	r24, Z
    1358:	88 2f       	mov	r24, r24
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	fc 01       	movw	r30, r24
    135e:	e2 50       	subi	r30, 0x02	; 2
    1360:	ff 4f       	sbci	r31, 0xFF	; 255
    1362:	80 81       	ld	r24, Z
    1364:	0e 94 8e 18 	call	0x311c	; 0x311c <UART_sendByte>
			while (UART_recieveByte() != ECU2_READY) {
			}
			UART_sendByte(g_passwordSize);
			while (UART_recieveByte() != ECU2_READY) {
						}
			for (count = 0; count < g_passwordSize; count++) {
    1368:	de 01       	movw	r26, r28
    136a:	aa 5a       	subi	r26, 0xAA	; 170
    136c:	bf 4f       	sbci	r27, 0xFF	; 255
    136e:	fe 01       	movw	r30, r28
    1370:	ea 5a       	subi	r30, 0xAA	; 170
    1372:	ff 4f       	sbci	r31, 0xFF	; 255
    1374:	80 81       	ld	r24, Z
    1376:	8f 5f       	subi	r24, 0xFF	; 255
    1378:	8c 93       	st	X, r24
    137a:	80 91 03 01 	lds	r24, 0x0103
    137e:	fe 01       	movw	r30, r28
    1380:	ea 5a       	subi	r30, 0xAA	; 170
    1382:	ff 4f       	sbci	r31, 0xFF	; 255
    1384:	90 81       	ld	r25, Z
    1386:	98 17       	cp	r25, r24
    1388:	18 f3       	brcs	.-58     	; 0x1350 <enterNewPassword+0x724>
    138a:	8f c0       	rjmp	.+286    	; 0x14aa <enterNewPassword+0x87e>
				UART_sendByte(g_password[count]);
			}
			break;
		} else {
			LCD_clearScreen();
    138c:	0e 94 41 15 	call	0x2a82	; 0x2a82 <LCD_clearScreen>
			if (g_passwordSize < 2) {
    1390:	80 91 03 01 	lds	r24, 0x0103
    1394:	82 30       	cpi	r24, 0x02	; 2
    1396:	28 f4       	brcc	.+10     	; 0x13a2 <enterNewPassword+0x776>
				LCD_displayString("Weak Password");
    1398:	8c eb       	ldi	r24, 0xBC	; 188
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	0e 94 9a 14 	call	0x2934	; 0x2934 <LCD_displayString>
    13a0:	04 c0       	rjmp	.+8      	; 0x13aa <enterNewPassword+0x77e>
			} else {
				LCD_displayString("Didn't match");
    13a2:	8a ec       	ldi	r24, 0xCA	; 202
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	0e 94 9a 14 	call	0x2934	; 0x2934 <LCD_displayString>
    13aa:	80 e0       	ldi	r24, 0x00	; 0
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	aa ef       	ldi	r26, 0xFA	; 250
    13b0:	b3 e4       	ldi	r27, 0x43	; 67
    13b2:	8b 87       	std	Y+11, r24	; 0x0b
    13b4:	9c 87       	std	Y+12, r25	; 0x0c
    13b6:	ad 87       	std	Y+13, r26	; 0x0d
    13b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    13bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    13be:	8d 85       	ldd	r24, Y+13	; 0x0d
    13c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    13c2:	20 e0       	ldi	r18, 0x00	; 0
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	4a ef       	ldi	r20, 0xFA	; 250
    13c8:	54 e4       	ldi	r21, 0x44	; 68
    13ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13ce:	dc 01       	movw	r26, r24
    13d0:	cb 01       	movw	r24, r22
    13d2:	8f 83       	std	Y+7, r24	; 0x07
    13d4:	98 87       	std	Y+8, r25	; 0x08
    13d6:	a9 87       	std	Y+9, r26	; 0x09
    13d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13da:	6f 81       	ldd	r22, Y+7	; 0x07
    13dc:	78 85       	ldd	r23, Y+8	; 0x08
    13de:	89 85       	ldd	r24, Y+9	; 0x09
    13e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    13e2:	20 e0       	ldi	r18, 0x00	; 0
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	40 e8       	ldi	r20, 0x80	; 128
    13e8:	5f e3       	ldi	r21, 0x3F	; 63
    13ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13ee:	88 23       	and	r24, r24
    13f0:	2c f4       	brge	.+10     	; 0x13fc <enterNewPassword+0x7d0>
		__ticks = 1;
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	9e 83       	std	Y+6, r25	; 0x06
    13f8:	8d 83       	std	Y+5, r24	; 0x05
    13fa:	3f c0       	rjmp	.+126    	; 0x147a <enterNewPassword+0x84e>
	else if (__tmp > 65535)
    13fc:	6f 81       	ldd	r22, Y+7	; 0x07
    13fe:	78 85       	ldd	r23, Y+8	; 0x08
    1400:	89 85       	ldd	r24, Y+9	; 0x09
    1402:	9a 85       	ldd	r25, Y+10	; 0x0a
    1404:	20 e0       	ldi	r18, 0x00	; 0
    1406:	3f ef       	ldi	r19, 0xFF	; 255
    1408:	4f e7       	ldi	r20, 0x7F	; 127
    140a:	57 e4       	ldi	r21, 0x47	; 71
    140c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1410:	18 16       	cp	r1, r24
    1412:	4c f5       	brge	.+82     	; 0x1466 <enterNewPassword+0x83a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1414:	6b 85       	ldd	r22, Y+11	; 0x0b
    1416:	7c 85       	ldd	r23, Y+12	; 0x0c
    1418:	8d 85       	ldd	r24, Y+13	; 0x0d
    141a:	9e 85       	ldd	r25, Y+14	; 0x0e
    141c:	20 e0       	ldi	r18, 0x00	; 0
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	40 e2       	ldi	r20, 0x20	; 32
    1422:	51 e4       	ldi	r21, 0x41	; 65
    1424:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1428:	dc 01       	movw	r26, r24
    142a:	cb 01       	movw	r24, r22
    142c:	bc 01       	movw	r22, r24
    142e:	cd 01       	movw	r24, r26
    1430:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1434:	dc 01       	movw	r26, r24
    1436:	cb 01       	movw	r24, r22
    1438:	9e 83       	std	Y+6, r25	; 0x06
    143a:	8d 83       	std	Y+5, r24	; 0x05
    143c:	0f c0       	rjmp	.+30     	; 0x145c <enterNewPassword+0x830>
    143e:	88 ec       	ldi	r24, 0xC8	; 200
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	9c 83       	std	Y+4, r25	; 0x04
    1444:	8b 83       	std	Y+3, r24	; 0x03
    1446:	8b 81       	ldd	r24, Y+3	; 0x03
    1448:	9c 81       	ldd	r25, Y+4	; 0x04
    144a:	01 97       	sbiw	r24, 0x01	; 1
    144c:	f1 f7       	brne	.-4      	; 0x144a <enterNewPassword+0x81e>
    144e:	9c 83       	std	Y+4, r25	; 0x04
    1450:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1452:	8d 81       	ldd	r24, Y+5	; 0x05
    1454:	9e 81       	ldd	r25, Y+6	; 0x06
    1456:	01 97       	sbiw	r24, 0x01	; 1
    1458:	9e 83       	std	Y+6, r25	; 0x06
    145a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    145c:	8d 81       	ldd	r24, Y+5	; 0x05
    145e:	9e 81       	ldd	r25, Y+6	; 0x06
    1460:	00 97       	sbiw	r24, 0x00	; 0
    1462:	69 f7       	brne	.-38     	; 0x143e <enterNewPassword+0x812>
    1464:	14 c0       	rjmp	.+40     	; 0x148e <enterNewPassword+0x862>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1466:	6f 81       	ldd	r22, Y+7	; 0x07
    1468:	78 85       	ldd	r23, Y+8	; 0x08
    146a:	89 85       	ldd	r24, Y+9	; 0x09
    146c:	9a 85       	ldd	r25, Y+10	; 0x0a
    146e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1472:	dc 01       	movw	r26, r24
    1474:	cb 01       	movw	r24, r22
    1476:	9e 83       	std	Y+6, r25	; 0x06
    1478:	8d 83       	std	Y+5, r24	; 0x05
    147a:	8d 81       	ldd	r24, Y+5	; 0x05
    147c:	9e 81       	ldd	r25, Y+6	; 0x06
    147e:	9a 83       	std	Y+2, r25	; 0x02
    1480:	89 83       	std	Y+1, r24	; 0x01
    1482:	89 81       	ldd	r24, Y+1	; 0x01
    1484:	9a 81       	ldd	r25, Y+2	; 0x02
    1486:	01 97       	sbiw	r24, 0x01	; 1
    1488:	f1 f7       	brne	.-4      	; 0x1486 <enterNewPassword+0x85a>
    148a:	9a 83       	std	Y+2, r25	; 0x02
    148c:	89 83       	std	Y+1, r24	; 0x01
			}
			_delay_ms(500);
			/*re intialize all data to enter new password again*/
			g_passwordSize = 0;
    148e:	10 92 03 01 	sts	0x0103, r1
			count = 0;
    1492:	fe 01       	movw	r30, r28
    1494:	ea 5a       	subi	r30, 0xAA	; 170
    1496:	ff 4f       	sbci	r31, 0xFF	; 255
    1498:	10 82       	st	Z, r1
			check_match = SUCCESS;
    149a:	fe 01       	movw	r30, r28
    149c:	eb 5a       	subi	r30, 0xAB	; 171
    149e:	ff 4f       	sbci	r31, 0xFF	; 255
    14a0:	81 e0       	ldi	r24, 0x01	; 1
    14a2:	80 83       	st	Z, r24
			LCD_clearScreen();
    14a4:	0e 94 41 15 	call	0x2a82	; 0x2a82 <LCD_clearScreen>
    14a8:	e5 cb       	rjmp	.-2102   	; 0xc74 <enterNewPassword+0x48>
			continue;
		}
	}
}
    14aa:	c4 5a       	subi	r28, 0xA4	; 164
    14ac:	df 4f       	sbci	r29, 0xFF	; 255
    14ae:	0f b6       	in	r0, 0x3f	; 63
    14b0:	f8 94       	cli
    14b2:	de bf       	out	0x3e, r29	; 62
    14b4:	0f be       	out	0x3f, r0	; 63
    14b6:	cd bf       	out	0x3d, r28	; 61
    14b8:	cf 91       	pop	r28
    14ba:	df 91       	pop	r29
    14bc:	1f 91       	pop	r17
    14be:	0f 91       	pop	r16
    14c0:	08 95       	ret

000014c2 <enterPassword>:
 * Description: Function to enter password to open door or change password
 * enter password
 * send to control ECU to match it with system password
 */

void enterPassword() {
    14c2:	df 93       	push	r29
    14c4:	cf 93       	push	r28
    14c6:	cd b7       	in	r28, 0x3d	; 61
    14c8:	de b7       	in	r29, 0x3e	; 62
    14ca:	a4 97       	sbiw	r28, 0x24	; 36
    14cc:	0f b6       	in	r0, 0x3f	; 63
    14ce:	f8 94       	cli
    14d0:	de bf       	out	0x3e, r29	; 62
    14d2:	0f be       	out	0x3f, r0	; 63
    14d4:	cd bf       	out	0x3d, r28	; 61
	uint8 key = 0, count = 0;
    14d6:	1f 8e       	std	Y+31, r1	; 0x1f
    14d8:	1e 8e       	std	Y+30, r1	; 0x1e
	uint8 enter_password[MAXNUMBERS] = { 0 };
    14da:	85 e0       	ldi	r24, 0x05	; 5
    14dc:	fe 01       	movw	r30, r28
    14de:	b0 96       	adiw	r30, 0x20	; 32
    14e0:	df 01       	movw	r26, r30
    14e2:	98 2f       	mov	r25, r24
    14e4:	1d 92       	st	X+, r1
    14e6:	9a 95       	dec	r25
    14e8:	e9 f7       	brne	.-6      	; 0x14e4 <enterPassword+0x22>
	LCD_clearScreen();
    14ea:	0e 94 41 15 	call	0x2a82	; 0x2a82 <LCD_clearScreen>
	LCD_displayString("Enter Password:");
    14ee:	87 ed       	ldi	r24, 0xD7	; 215
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	0e 94 9a 14 	call	0x2934	; 0x2934 <LCD_displayString>
	LCD_moveCursor(1, 0);
    14f6:	81 e0       	ldi	r24, 0x01	; 1
    14f8:	60 e0       	ldi	r22, 0x00	; 0
    14fa:	0e 94 c3 14 	call	0x2986	; 0x2986 <LCD_moveCursor>
	/*loop to enter password */
	while (1) {
		key = KEYPAD_getPressedKey();
    14fe:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <KEYPAD_getPressedKey>
    1502:	8f 8f       	std	Y+31, r24	; 0x1f
		/*take value from keypad , if it is number save in password
		 * password isn't more than 5 numbers
		 * if user press '=' save password and break loop;
		 * */
		if (key >= 0 && key <= 9 && count < MAXNUMBERS) {
    1504:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1506:	8a 30       	cpi	r24, 0x0A	; 10
    1508:	a0 f4       	brcc	.+40     	; 0x1532 <enterPassword+0x70>
    150a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    150c:	85 30       	cpi	r24, 0x05	; 5
    150e:	88 f4       	brcc	.+34     	; 0x1532 <enterPassword+0x70>
			enter_password[count] = key;
    1510:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1512:	28 2f       	mov	r18, r24
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	ce 01       	movw	r24, r28
    1518:	80 96       	adiw	r24, 0x20	; 32
    151a:	fc 01       	movw	r30, r24
    151c:	e2 0f       	add	r30, r18
    151e:	f3 1f       	adc	r31, r19
    1520:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1522:	80 83       	st	Z, r24
			LCD_displayCharacter('*');
    1524:	8a e2       	ldi	r24, 0x2A	; 42
    1526:	0e 94 a6 12 	call	0x254c	; 0x254c <LCD_displayCharacter>
			count++;
    152a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    152c:	8f 5f       	subi	r24, 0xFF	; 255
    152e:	8e 8f       	std	Y+30, r24	; 0x1e
    1530:	7d c0       	rjmp	.+250    	; 0x162c <enterPassword+0x16a>
			/*break loop when enter and password should more than 2 number*/
		} else if (key == '=' && count > 2) {
    1532:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1534:	8d 33       	cpi	r24, 0x3D	; 61
    1536:	09 f0       	breq	.+2      	; 0x153a <enterPassword+0x78>
    1538:	79 c0       	rjmp	.+242    	; 0x162c <enterPassword+0x16a>
    153a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    153c:	83 30       	cpi	r24, 0x03	; 3
    153e:	08 f4       	brcc	.+2      	; 0x1542 <enterPassword+0x80>
    1540:	75 c0       	rjmp	.+234    	; 0x162c <enterPassword+0x16a>
			LCD_clearScreen();
    1542:	0e 94 41 15 	call	0x2a82	; 0x2a82 <LCD_clearScreen>
    1546:	80 e0       	ldi	r24, 0x00	; 0
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	aa ef       	ldi	r26, 0xFA	; 250
    154c:	b3 e4       	ldi	r27, 0x43	; 67
    154e:	89 8f       	std	Y+25, r24	; 0x19
    1550:	9a 8f       	std	Y+26, r25	; 0x1a
    1552:	ab 8f       	std	Y+27, r26	; 0x1b
    1554:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1556:	69 8d       	ldd	r22, Y+25	; 0x19
    1558:	7a 8d       	ldd	r23, Y+26	; 0x1a
    155a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    155c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    155e:	20 e0       	ldi	r18, 0x00	; 0
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	4a ef       	ldi	r20, 0xFA	; 250
    1564:	54 e4       	ldi	r21, 0x44	; 68
    1566:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    156a:	dc 01       	movw	r26, r24
    156c:	cb 01       	movw	r24, r22
    156e:	8d 8b       	std	Y+21, r24	; 0x15
    1570:	9e 8b       	std	Y+22, r25	; 0x16
    1572:	af 8b       	std	Y+23, r26	; 0x17
    1574:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1576:	6d 89       	ldd	r22, Y+21	; 0x15
    1578:	7e 89       	ldd	r23, Y+22	; 0x16
    157a:	8f 89       	ldd	r24, Y+23	; 0x17
    157c:	98 8d       	ldd	r25, Y+24	; 0x18
    157e:	20 e0       	ldi	r18, 0x00	; 0
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	40 e8       	ldi	r20, 0x80	; 128
    1584:	5f e3       	ldi	r21, 0x3F	; 63
    1586:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    158a:	88 23       	and	r24, r24
    158c:	2c f4       	brge	.+10     	; 0x1598 <enterPassword+0xd6>
		__ticks = 1;
    158e:	81 e0       	ldi	r24, 0x01	; 1
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	9c 8b       	std	Y+20, r25	; 0x14
    1594:	8b 8b       	std	Y+19, r24	; 0x13
    1596:	3f c0       	rjmp	.+126    	; 0x1616 <enterPassword+0x154>
	else if (__tmp > 65535)
    1598:	6d 89       	ldd	r22, Y+21	; 0x15
    159a:	7e 89       	ldd	r23, Y+22	; 0x16
    159c:	8f 89       	ldd	r24, Y+23	; 0x17
    159e:	98 8d       	ldd	r25, Y+24	; 0x18
    15a0:	20 e0       	ldi	r18, 0x00	; 0
    15a2:	3f ef       	ldi	r19, 0xFF	; 255
    15a4:	4f e7       	ldi	r20, 0x7F	; 127
    15a6:	57 e4       	ldi	r21, 0x47	; 71
    15a8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15ac:	18 16       	cp	r1, r24
    15ae:	4c f5       	brge	.+82     	; 0x1602 <enterPassword+0x140>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15b0:	69 8d       	ldd	r22, Y+25	; 0x19
    15b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15b8:	20 e0       	ldi	r18, 0x00	; 0
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	40 e2       	ldi	r20, 0x20	; 32
    15be:	51 e4       	ldi	r21, 0x41	; 65
    15c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15c4:	dc 01       	movw	r26, r24
    15c6:	cb 01       	movw	r24, r22
    15c8:	bc 01       	movw	r22, r24
    15ca:	cd 01       	movw	r24, r26
    15cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15d0:	dc 01       	movw	r26, r24
    15d2:	cb 01       	movw	r24, r22
    15d4:	9c 8b       	std	Y+20, r25	; 0x14
    15d6:	8b 8b       	std	Y+19, r24	; 0x13
    15d8:	0f c0       	rjmp	.+30     	; 0x15f8 <enterPassword+0x136>
    15da:	88 ec       	ldi	r24, 0xC8	; 200
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	9a 8b       	std	Y+18, r25	; 0x12
    15e0:	89 8b       	std	Y+17, r24	; 0x11
    15e2:	89 89       	ldd	r24, Y+17	; 0x11
    15e4:	9a 89       	ldd	r25, Y+18	; 0x12
    15e6:	01 97       	sbiw	r24, 0x01	; 1
    15e8:	f1 f7       	brne	.-4      	; 0x15e6 <enterPassword+0x124>
    15ea:	9a 8b       	std	Y+18, r25	; 0x12
    15ec:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15ee:	8b 89       	ldd	r24, Y+19	; 0x13
    15f0:	9c 89       	ldd	r25, Y+20	; 0x14
    15f2:	01 97       	sbiw	r24, 0x01	; 1
    15f4:	9c 8b       	std	Y+20, r25	; 0x14
    15f6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15f8:	8b 89       	ldd	r24, Y+19	; 0x13
    15fa:	9c 89       	ldd	r25, Y+20	; 0x14
    15fc:	00 97       	sbiw	r24, 0x00	; 0
    15fe:	69 f7       	brne	.-38     	; 0x15da <enterPassword+0x118>
    1600:	88 c0       	rjmp	.+272    	; 0x1712 <enterPassword+0x250>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1602:	6d 89       	ldd	r22, Y+21	; 0x15
    1604:	7e 89       	ldd	r23, Y+22	; 0x16
    1606:	8f 89       	ldd	r24, Y+23	; 0x17
    1608:	98 8d       	ldd	r25, Y+24	; 0x18
    160a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    160e:	dc 01       	movw	r26, r24
    1610:	cb 01       	movw	r24, r22
    1612:	9c 8b       	std	Y+20, r25	; 0x14
    1614:	8b 8b       	std	Y+19, r24	; 0x13
    1616:	8b 89       	ldd	r24, Y+19	; 0x13
    1618:	9c 89       	ldd	r25, Y+20	; 0x14
    161a:	98 8b       	std	Y+16, r25	; 0x10
    161c:	8f 87       	std	Y+15, r24	; 0x0f
    161e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1620:	98 89       	ldd	r25, Y+16	; 0x10
    1622:	01 97       	sbiw	r24, 0x01	; 1
    1624:	f1 f7       	brne	.-4      	; 0x1622 <enterPassword+0x160>
    1626:	98 8b       	std	Y+16, r25	; 0x10
    1628:	8f 87       	std	Y+15, r24	; 0x0f
    162a:	73 c0       	rjmp	.+230    	; 0x1712 <enterPassword+0x250>
			_delay_ms(500);
			break;
    162c:	80 e0       	ldi	r24, 0x00	; 0
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	aa ef       	ldi	r26, 0xFA	; 250
    1632:	b3 e4       	ldi	r27, 0x43	; 67
    1634:	8b 87       	std	Y+11, r24	; 0x0b
    1636:	9c 87       	std	Y+12, r25	; 0x0c
    1638:	ad 87       	std	Y+13, r26	; 0x0d
    163a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    163c:	6b 85       	ldd	r22, Y+11	; 0x0b
    163e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1640:	8d 85       	ldd	r24, Y+13	; 0x0d
    1642:	9e 85       	ldd	r25, Y+14	; 0x0e
    1644:	20 e0       	ldi	r18, 0x00	; 0
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	4a ef       	ldi	r20, 0xFA	; 250
    164a:	54 e4       	ldi	r21, 0x44	; 68
    164c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1650:	dc 01       	movw	r26, r24
    1652:	cb 01       	movw	r24, r22
    1654:	8f 83       	std	Y+7, r24	; 0x07
    1656:	98 87       	std	Y+8, r25	; 0x08
    1658:	a9 87       	std	Y+9, r26	; 0x09
    165a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    165c:	6f 81       	ldd	r22, Y+7	; 0x07
    165e:	78 85       	ldd	r23, Y+8	; 0x08
    1660:	89 85       	ldd	r24, Y+9	; 0x09
    1662:	9a 85       	ldd	r25, Y+10	; 0x0a
    1664:	20 e0       	ldi	r18, 0x00	; 0
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	40 e8       	ldi	r20, 0x80	; 128
    166a:	5f e3       	ldi	r21, 0x3F	; 63
    166c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1670:	88 23       	and	r24, r24
    1672:	2c f4       	brge	.+10     	; 0x167e <enterPassword+0x1bc>
		__ticks = 1;
    1674:	81 e0       	ldi	r24, 0x01	; 1
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	9e 83       	std	Y+6, r25	; 0x06
    167a:	8d 83       	std	Y+5, r24	; 0x05
    167c:	3f c0       	rjmp	.+126    	; 0x16fc <enterPassword+0x23a>
	else if (__tmp > 65535)
    167e:	6f 81       	ldd	r22, Y+7	; 0x07
    1680:	78 85       	ldd	r23, Y+8	; 0x08
    1682:	89 85       	ldd	r24, Y+9	; 0x09
    1684:	9a 85       	ldd	r25, Y+10	; 0x0a
    1686:	20 e0       	ldi	r18, 0x00	; 0
    1688:	3f ef       	ldi	r19, 0xFF	; 255
    168a:	4f e7       	ldi	r20, 0x7F	; 127
    168c:	57 e4       	ldi	r21, 0x47	; 71
    168e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1692:	18 16       	cp	r1, r24
    1694:	4c f5       	brge	.+82     	; 0x16e8 <enterPassword+0x226>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1696:	6b 85       	ldd	r22, Y+11	; 0x0b
    1698:	7c 85       	ldd	r23, Y+12	; 0x0c
    169a:	8d 85       	ldd	r24, Y+13	; 0x0d
    169c:	9e 85       	ldd	r25, Y+14	; 0x0e
    169e:	20 e0       	ldi	r18, 0x00	; 0
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	40 e2       	ldi	r20, 0x20	; 32
    16a4:	51 e4       	ldi	r21, 0x41	; 65
    16a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16aa:	dc 01       	movw	r26, r24
    16ac:	cb 01       	movw	r24, r22
    16ae:	bc 01       	movw	r22, r24
    16b0:	cd 01       	movw	r24, r26
    16b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16b6:	dc 01       	movw	r26, r24
    16b8:	cb 01       	movw	r24, r22
    16ba:	9e 83       	std	Y+6, r25	; 0x06
    16bc:	8d 83       	std	Y+5, r24	; 0x05
    16be:	0f c0       	rjmp	.+30     	; 0x16de <enterPassword+0x21c>
    16c0:	88 ec       	ldi	r24, 0xC8	; 200
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	9c 83       	std	Y+4, r25	; 0x04
    16c6:	8b 83       	std	Y+3, r24	; 0x03
    16c8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ca:	9c 81       	ldd	r25, Y+4	; 0x04
    16cc:	01 97       	sbiw	r24, 0x01	; 1
    16ce:	f1 f7       	brne	.-4      	; 0x16cc <enterPassword+0x20a>
    16d0:	9c 83       	std	Y+4, r25	; 0x04
    16d2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16d4:	8d 81       	ldd	r24, Y+5	; 0x05
    16d6:	9e 81       	ldd	r25, Y+6	; 0x06
    16d8:	01 97       	sbiw	r24, 0x01	; 1
    16da:	9e 83       	std	Y+6, r25	; 0x06
    16dc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16de:	8d 81       	ldd	r24, Y+5	; 0x05
    16e0:	9e 81       	ldd	r25, Y+6	; 0x06
    16e2:	00 97       	sbiw	r24, 0x00	; 0
    16e4:	69 f7       	brne	.-38     	; 0x16c0 <enterPassword+0x1fe>
    16e6:	0b cf       	rjmp	.-490    	; 0x14fe <enterPassword+0x3c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16e8:	6f 81       	ldd	r22, Y+7	; 0x07
    16ea:	78 85       	ldd	r23, Y+8	; 0x08
    16ec:	89 85       	ldd	r24, Y+9	; 0x09
    16ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    16f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16f4:	dc 01       	movw	r26, r24
    16f6:	cb 01       	movw	r24, r22
    16f8:	9e 83       	std	Y+6, r25	; 0x06
    16fa:	8d 83       	std	Y+5, r24	; 0x05
    16fc:	8d 81       	ldd	r24, Y+5	; 0x05
    16fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1700:	9a 83       	std	Y+2, r25	; 0x02
    1702:	89 83       	std	Y+1, r24	; 0x01
    1704:	89 81       	ldd	r24, Y+1	; 0x01
    1706:	9a 81       	ldd	r25, Y+2	; 0x02
    1708:	01 97       	sbiw	r24, 0x01	; 1
    170a:	f1 f7       	brne	.-4      	; 0x1708 <enterPassword+0x246>
    170c:	9a 83       	std	Y+2, r25	; 0x02
    170e:	89 83       	std	Y+1, r24	; 0x01
    1710:	f6 ce       	rjmp	.-532    	; 0x14fe <enterPassword+0x3c>
		}
		_delay_ms(500);
	}
	/*send password to Control ECU*/
	while (UART_recieveByte() != ECU2_READY) {
    1712:	0e 94 a5 18 	call	0x314a	; 0x314a <UART_recieveByte>
    1716:	8f 3f       	cpi	r24, 0xFF	; 255
    1718:	e1 f7       	brne	.-8      	; 0x1712 <enterPassword+0x250>
	}
	for (uint8 i = 0; i < MAXNUMBERS; i++) {
    171a:	1d 8e       	std	Y+29, r1	; 0x1d
    171c:	0e c0       	rjmp	.+28     	; 0x173a <enterPassword+0x278>
		UART_sendByte(enter_password[i]);
    171e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1720:	28 2f       	mov	r18, r24
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	ce 01       	movw	r24, r28
    1726:	80 96       	adiw	r24, 0x20	; 32
    1728:	fc 01       	movw	r30, r24
    172a:	e2 0f       	add	r30, r18
    172c:	f3 1f       	adc	r31, r19
    172e:	80 81       	ld	r24, Z
    1730:	0e 94 8e 18 	call	0x311c	; 0x311c <UART_sendByte>
		_delay_ms(500);
	}
	/*send password to Control ECU*/
	while (UART_recieveByte() != ECU2_READY) {
	}
	for (uint8 i = 0; i < MAXNUMBERS; i++) {
    1734:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1736:	8f 5f       	subi	r24, 0xFF	; 255
    1738:	8d 8f       	std	Y+29, r24	; 0x1d
    173a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    173c:	85 30       	cpi	r24, 0x05	; 5
    173e:	78 f3       	brcs	.-34     	; 0x171e <enterPassword+0x25c>
		UART_sendByte(enter_password[i]);
	}
}
    1740:	a4 96       	adiw	r28, 0x24	; 36
    1742:	0f b6       	in	r0, 0x3f	; 63
    1744:	f8 94       	cli
    1746:	de bf       	out	0x3e, r29	; 62
    1748:	0f be       	out	0x3f, r0	; 63
    174a:	cd bf       	out	0x3d, r28	; 61
    174c:	cf 91       	pop	r28
    174e:	df 91       	pop	r29
    1750:	08 95       	ret

00001752 <main>:

/*******************************************************************************
 *                             Main Function                                   *
 *******************************************************************************/

int main() {
    1752:	df 93       	push	r29
    1754:	cf 93       	push	r28
    1756:	cd b7       	in	r28, 0x3d	; 61
    1758:	de b7       	in	r29, 0x3e	; 62
    175a:	6c 97       	sbiw	r28, 0x1c	; 28
    175c:	0f b6       	in	r0, 0x3f	; 63
    175e:	f8 94       	cli
    1760:	de bf       	out	0x3e, r29	; 62
    1762:	0f be       	out	0x3f, r0	; 63
    1764:	cd bf       	out	0x3d, r28	; 61

	/************************* Intiatilations *********************************/

	SREG |= (1 << 7); /*Enable global interrupt*/
    1766:	af e5       	ldi	r26, 0x5F	; 95
    1768:	b0 e0       	ldi	r27, 0x00	; 0
    176a:	ef e5       	ldi	r30, 0x5F	; 95
    176c:	f0 e0       	ldi	r31, 0x00	; 0
    176e:	80 81       	ld	r24, Z
    1770:	80 68       	ori	r24, 0x80	; 128
    1772:	8c 93       	st	X, r24
	uint8 new_password_flag = 0; /*to check if first use for system*/
    1774:	1c 82       	std	Y+4, r1	; 0x04
	uint8 key = 0; /*to save value from keypad*/
    1776:	1b 82       	std	Y+3, r1	; 0x03
	uint8 check_match = SUCCESS; /*to check matching*/
    1778:	81 e0       	ldi	r24, 0x01	; 1
    177a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 missing_count = 0; /*count number of enter wrong password*/
    177c:	19 82       	std	Y+1, r1	; 0x01

	/* Initialize the LCD Driver */
	LCD_init();
    177e:	0e 94 8f 10 	call	0x211e	; 0x211e <LCD_init>
	/* Initialize the Timer Driver by its configrations */
	Timer_ConfigType Timer_Config = { TIMER_0, COMPARE_MATCH_MODE, 0, 250,
			F_CPU_1024 };
    1782:	ce 01       	movw	r24, r28
    1784:	05 96       	adiw	r24, 0x05	; 5
    1786:	9c 8b       	std	Y+20, r25	; 0x14
    1788:	8b 8b       	std	Y+19, r24	; 0x13
    178a:	e6 ef       	ldi	r30, 0xF6	; 246
    178c:	f0 e0       	ldi	r31, 0x00	; 0
    178e:	fe 8b       	std	Y+22, r31	; 0x16
    1790:	ed 8b       	std	Y+21, r30	; 0x15
    1792:	f7 e0       	ldi	r31, 0x07	; 7
    1794:	ff 8b       	std	Y+23, r31	; 0x17
    1796:	ed 89       	ldd	r30, Y+21	; 0x15
    1798:	fe 89       	ldd	r31, Y+22	; 0x16
    179a:	00 80       	ld	r0, Z
    179c:	8d 89       	ldd	r24, Y+21	; 0x15
    179e:	9e 89       	ldd	r25, Y+22	; 0x16
    17a0:	01 96       	adiw	r24, 0x01	; 1
    17a2:	9e 8b       	std	Y+22, r25	; 0x16
    17a4:	8d 8b       	std	Y+21, r24	; 0x15
    17a6:	eb 89       	ldd	r30, Y+19	; 0x13
    17a8:	fc 89       	ldd	r31, Y+20	; 0x14
    17aa:	00 82       	st	Z, r0
    17ac:	8b 89       	ldd	r24, Y+19	; 0x13
    17ae:	9c 89       	ldd	r25, Y+20	; 0x14
    17b0:	01 96       	adiw	r24, 0x01	; 1
    17b2:	9c 8b       	std	Y+20, r25	; 0x14
    17b4:	8b 8b       	std	Y+19, r24	; 0x13
    17b6:	9f 89       	ldd	r25, Y+23	; 0x17
    17b8:	91 50       	subi	r25, 0x01	; 1
    17ba:	9f 8b       	std	Y+23, r25	; 0x17
    17bc:	ef 89       	ldd	r30, Y+23	; 0x17
    17be:	ee 23       	and	r30, r30
    17c0:	51 f7       	brne	.-44     	; 0x1796 <main+0x44>
	/* Initialize the UART Driver by its configrations */
	UART_ConfigType UART_Config = { DATA_BIT_8, ODD_PARITY, STOP_BIT_1,
	UART_BAUDRATE };
    17c2:	ce 01       	movw	r24, r28
    17c4:	0c 96       	adiw	r24, 0x0c	; 12
    17c6:	99 8f       	std	Y+25, r25	; 0x19
    17c8:	88 8f       	std	Y+24, r24	; 0x18
    17ca:	ef ee       	ldi	r30, 0xEF	; 239
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	fb 8f       	std	Y+27, r31	; 0x1b
    17d0:	ea 8f       	std	Y+26, r30	; 0x1a
    17d2:	f7 e0       	ldi	r31, 0x07	; 7
    17d4:	fc 8f       	std	Y+28, r31	; 0x1c
    17d6:	ea 8d       	ldd	r30, Y+26	; 0x1a
    17d8:	fb 8d       	ldd	r31, Y+27	; 0x1b
    17da:	00 80       	ld	r0, Z
    17dc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    17de:	9b 8d       	ldd	r25, Y+27	; 0x1b
    17e0:	01 96       	adiw	r24, 0x01	; 1
    17e2:	9b 8f       	std	Y+27, r25	; 0x1b
    17e4:	8a 8f       	std	Y+26, r24	; 0x1a
    17e6:	e8 8d       	ldd	r30, Y+24	; 0x18
    17e8:	f9 8d       	ldd	r31, Y+25	; 0x19
    17ea:	00 82       	st	Z, r0
    17ec:	88 8d       	ldd	r24, Y+24	; 0x18
    17ee:	99 8d       	ldd	r25, Y+25	; 0x19
    17f0:	01 96       	adiw	r24, 0x01	; 1
    17f2:	99 8f       	std	Y+25, r25	; 0x19
    17f4:	88 8f       	std	Y+24, r24	; 0x18
    17f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17f8:	91 50       	subi	r25, 0x01	; 1
    17fa:	9c 8f       	std	Y+28, r25	; 0x1c
    17fc:	ec 8d       	ldd	r30, Y+28	; 0x1c
    17fe:	ee 23       	and	r30, r30
    1800:	51 f7       	brne	.-44     	; 0x17d6 <main+0x84>
	/*read from eeprom the size of password to know if it first time use or not*/
	UART_init(&UART_Config);
    1802:	ce 01       	movw	r24, r28
    1804:	0c 96       	adiw	r24, 0x0c	; 12
    1806:	0e 94 05 18 	call	0x300a	; 0x300a <UART_init>

	/*recieve flag value to check if it is first time using the system */
	UART_sendByte(ECU2_READY);
    180a:	8f ef       	ldi	r24, 0xFF	; 255
    180c:	0e 94 8e 18 	call	0x311c	; 0x311c <UART_sendByte>
	new_password_flag = UART_recieveByte();
    1810:	0e 94 a5 18 	call	0x314a	; 0x314a <UART_recieveByte>
    1814:	8c 83       	std	Y+4, r24	; 0x04

	/***************************** Super Loop *********************************/

	while (1) {
		/*For fisrt use to the system*/
		if (new_password_flag == 1) {
    1816:	8c 81       	ldd	r24, Y+4	; 0x04
    1818:	81 30       	cpi	r24, 0x01	; 1
    181a:	19 f4       	brne	.+6      	; 0x1822 <main+0xd0>
			enterNewPassword();
    181c:	0e 94 16 06 	call	0xc2c	; 0xc2c <enterNewPassword>
			new_password_flag = 0;
    1820:	1c 82       	std	Y+4, r1	; 0x04
		}
		/*display main option after every opration*/

		displayMainOption();
    1822:	0e 94 a3 05 	call	0xb46	; 0xb46 <displayMainOption>
		key = KEYPAD_getPressedKey();
    1826:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <KEYPAD_getPressedKey>
    182a:	8b 83       	std	Y+3, r24	; 0x03
		UART_sendByte(key);
    182c:	8b 81       	ldd	r24, Y+3	; 0x03
    182e:	0e 94 8e 18 	call	0x311c	; 0x311c <UART_sendByte>

		/*check if user choose open door or change password*/
		if (key == '-' || (key == '+')) {
    1832:	8b 81       	ldd	r24, Y+3	; 0x03
    1834:	8d 32       	cpi	r24, 0x2D	; 45
    1836:	19 f0       	breq	.+6      	; 0x183e <main+0xec>
    1838:	8b 81       	ldd	r24, Y+3	; 0x03
    183a:	8b 32       	cpi	r24, 0x2B	; 43
    183c:	e9 f4       	brne	.+58     	; 0x1878 <main+0x126>
			do {
				/*in two case user must enter the password*/
				enterPassword();
    183e:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <enterPassword>
				check_match = UART_recieveByte();
    1842:	0e 94 a5 18 	call	0x314a	; 0x314a <UART_recieveByte>
    1846:	8a 83       	std	Y+2, r24	; 0x02
				missing_count++;
    1848:	89 81       	ldd	r24, Y+1	; 0x01
    184a:	8f 5f       	subi	r24, 0xFF	; 255
    184c:	89 83       	std	Y+1, r24	; 0x01
				/*if enter password three times wrong system will display warning message for 1 minute*/
				if (missing_count == 3) {
    184e:	89 81       	ldd	r24, Y+1	; 0x01
    1850:	83 30       	cpi	r24, 0x03	; 3
    1852:	61 f4       	brne	.+24     	; 0x186c <main+0x11a>
					LCD_clearScreen();
    1854:	0e 94 41 15 	call	0x2a82	; 0x2a82 <LCD_clearScreen>
					Timer0_setCallBack(&displayWarningMessageticks);
    1858:	86 ee       	ldi	r24, 0xE6	; 230
    185a:	95 e0       	ldi	r25, 0x05	; 5
    185c:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <Timer0_setCallBack>
					Timer_init(&Timer_Config);
    1860:	ce 01       	movw	r24, r28
    1862:	05 96       	adiw	r24, 0x05	; 5
    1864:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <Timer_init>
					displayWarningMessage();
    1868:	0e 94 f6 05 	call	0xbec	; 0xbec <displayWarningMessage>
				}
			} while (check_match == ERROR && missing_count != 3);
    186c:	8a 81       	ldd	r24, Y+2	; 0x02
    186e:	88 23       	and	r24, r24
    1870:	19 f4       	brne	.+6      	; 0x1878 <main+0x126>
    1872:	89 81       	ldd	r24, Y+1	; 0x01
    1874:	83 30       	cpi	r24, 0x03	; 3
    1876:	19 f7       	brne	.-58     	; 0x183e <main+0xec>
		}
		/*if user enter wright password
		 * + : door will open
		 * - : user can change system password
		 *  */
		if (key == '-') {
    1878:	8b 81       	ldd	r24, Y+3	; 0x03
    187a:	8d 32       	cpi	r24, 0x2D	; 45
    187c:	31 f4       	brne	.+12     	; 0x188a <main+0x138>
			if (check_match == SUCCESS) {
    187e:	8a 81       	ldd	r24, Y+2	; 0x02
    1880:	81 30       	cpi	r24, 0x01	; 1
    1882:	a9 f4       	brne	.+42     	; 0x18ae <main+0x15c>
				enterNewPassword();
    1884:	0e 94 16 06 	call	0xc2c	; 0xc2c <enterNewPassword>
    1888:	12 c0       	rjmp	.+36     	; 0x18ae <main+0x15c>
			}

		}else if (key == '+') {
    188a:	8b 81       	ldd	r24, Y+3	; 0x03
    188c:	8b 32       	cpi	r24, 0x2B	; 43
    188e:	79 f4       	brne	.+30     	; 0x18ae <main+0x15c>
			if (check_match == SUCCESS) {
    1890:	8a 81       	ldd	r24, Y+2	; 0x02
    1892:	81 30       	cpi	r24, 0x01	; 1
    1894:	61 f4       	brne	.+24     	; 0x18ae <main+0x15c>
				LCD_clearScreen();
    1896:	0e 94 41 15 	call	0x2a82	; 0x2a82 <LCD_clearScreen>
				Timer0_setCallBack(&displayOpenDoorticks);
    189a:	88 eb       	ldi	r24, 0xB8	; 184
    189c:	95 e0       	ldi	r25, 0x05	; 5
    189e:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <Timer0_setCallBack>
				Timer_init(&Timer_Config);
    18a2:	ce 01       	movw	r24, r28
    18a4:	05 96       	adiw	r24, 0x05	; 5
    18a6:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <Timer_init>
				displayOpenDoor();
    18aa:	0e 94 c8 05 	call	0xb90	; 0xb90 <displayOpenDoor>
			}
		}
		/*re intialize missing counter by zero*/
		missing_count = 0;
    18ae:	19 82       	std	Y+1, r1	; 0x01
    18b0:	b2 cf       	rjmp	.-156    	; 0x1816 <main+0xc4>

000018b2 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    18b2:	df 93       	push	r29
    18b4:	cf 93       	push	r28
    18b6:	00 d0       	rcall	.+0      	; 0x18b8 <GPIO_setupPinDirection+0x6>
    18b8:	00 d0       	rcall	.+0      	; 0x18ba <GPIO_setupPinDirection+0x8>
    18ba:	0f 92       	push	r0
    18bc:	cd b7       	in	r28, 0x3d	; 61
    18be:	de b7       	in	r29, 0x3e	; 62
    18c0:	89 83       	std	Y+1, r24	; 0x01
    18c2:	6a 83       	std	Y+2, r22	; 0x02
    18c4:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    18c6:	8a 81       	ldd	r24, Y+2	; 0x02
    18c8:	88 30       	cpi	r24, 0x08	; 8
    18ca:	08 f0       	brcs	.+2      	; 0x18ce <GPIO_setupPinDirection+0x1c>
    18cc:	d5 c0       	rjmp	.+426    	; 0x1a78 <GPIO_setupPinDirection+0x1c6>
    18ce:	89 81       	ldd	r24, Y+1	; 0x01
    18d0:	84 30       	cpi	r24, 0x04	; 4
    18d2:	08 f0       	brcs	.+2      	; 0x18d6 <GPIO_setupPinDirection+0x24>
    18d4:	d1 c0       	rjmp	.+418    	; 0x1a78 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    18d6:	89 81       	ldd	r24, Y+1	; 0x01
    18d8:	28 2f       	mov	r18, r24
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	3d 83       	std	Y+5, r19	; 0x05
    18de:	2c 83       	std	Y+4, r18	; 0x04
    18e0:	8c 81       	ldd	r24, Y+4	; 0x04
    18e2:	9d 81       	ldd	r25, Y+5	; 0x05
    18e4:	81 30       	cpi	r24, 0x01	; 1
    18e6:	91 05       	cpc	r25, r1
    18e8:	09 f4       	brne	.+2      	; 0x18ec <GPIO_setupPinDirection+0x3a>
    18ea:	43 c0       	rjmp	.+134    	; 0x1972 <GPIO_setupPinDirection+0xc0>
    18ec:	2c 81       	ldd	r18, Y+4	; 0x04
    18ee:	3d 81       	ldd	r19, Y+5	; 0x05
    18f0:	22 30       	cpi	r18, 0x02	; 2
    18f2:	31 05       	cpc	r19, r1
    18f4:	2c f4       	brge	.+10     	; 0x1900 <GPIO_setupPinDirection+0x4e>
    18f6:	8c 81       	ldd	r24, Y+4	; 0x04
    18f8:	9d 81       	ldd	r25, Y+5	; 0x05
    18fa:	00 97       	sbiw	r24, 0x00	; 0
    18fc:	71 f0       	breq	.+28     	; 0x191a <GPIO_setupPinDirection+0x68>
    18fe:	bc c0       	rjmp	.+376    	; 0x1a78 <GPIO_setupPinDirection+0x1c6>
    1900:	2c 81       	ldd	r18, Y+4	; 0x04
    1902:	3d 81       	ldd	r19, Y+5	; 0x05
    1904:	22 30       	cpi	r18, 0x02	; 2
    1906:	31 05       	cpc	r19, r1
    1908:	09 f4       	brne	.+2      	; 0x190c <GPIO_setupPinDirection+0x5a>
    190a:	5f c0       	rjmp	.+190    	; 0x19ca <GPIO_setupPinDirection+0x118>
    190c:	8c 81       	ldd	r24, Y+4	; 0x04
    190e:	9d 81       	ldd	r25, Y+5	; 0x05
    1910:	83 30       	cpi	r24, 0x03	; 3
    1912:	91 05       	cpc	r25, r1
    1914:	09 f4       	brne	.+2      	; 0x1918 <GPIO_setupPinDirection+0x66>
    1916:	85 c0       	rjmp	.+266    	; 0x1a22 <GPIO_setupPinDirection+0x170>
    1918:	af c0       	rjmp	.+350    	; 0x1a78 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    191a:	8b 81       	ldd	r24, Y+3	; 0x03
    191c:	81 30       	cpi	r24, 0x01	; 1
    191e:	a1 f4       	brne	.+40     	; 0x1948 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1920:	aa e3       	ldi	r26, 0x3A	; 58
    1922:	b0 e0       	ldi	r27, 0x00	; 0
    1924:	ea e3       	ldi	r30, 0x3A	; 58
    1926:	f0 e0       	ldi	r31, 0x00	; 0
    1928:	80 81       	ld	r24, Z
    192a:	48 2f       	mov	r20, r24
    192c:	8a 81       	ldd	r24, Y+2	; 0x02
    192e:	28 2f       	mov	r18, r24
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	81 e0       	ldi	r24, 0x01	; 1
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	02 2e       	mov	r0, r18
    1938:	02 c0       	rjmp	.+4      	; 0x193e <GPIO_setupPinDirection+0x8c>
    193a:	88 0f       	add	r24, r24
    193c:	99 1f       	adc	r25, r25
    193e:	0a 94       	dec	r0
    1940:	e2 f7       	brpl	.-8      	; 0x193a <GPIO_setupPinDirection+0x88>
    1942:	84 2b       	or	r24, r20
    1944:	8c 93       	st	X, r24
    1946:	98 c0       	rjmp	.+304    	; 0x1a78 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1948:	aa e3       	ldi	r26, 0x3A	; 58
    194a:	b0 e0       	ldi	r27, 0x00	; 0
    194c:	ea e3       	ldi	r30, 0x3A	; 58
    194e:	f0 e0       	ldi	r31, 0x00	; 0
    1950:	80 81       	ld	r24, Z
    1952:	48 2f       	mov	r20, r24
    1954:	8a 81       	ldd	r24, Y+2	; 0x02
    1956:	28 2f       	mov	r18, r24
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	81 e0       	ldi	r24, 0x01	; 1
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	02 2e       	mov	r0, r18
    1960:	02 c0       	rjmp	.+4      	; 0x1966 <GPIO_setupPinDirection+0xb4>
    1962:	88 0f       	add	r24, r24
    1964:	99 1f       	adc	r25, r25
    1966:	0a 94       	dec	r0
    1968:	e2 f7       	brpl	.-8      	; 0x1962 <GPIO_setupPinDirection+0xb0>
    196a:	80 95       	com	r24
    196c:	84 23       	and	r24, r20
    196e:	8c 93       	st	X, r24
    1970:	83 c0       	rjmp	.+262    	; 0x1a78 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1972:	8b 81       	ldd	r24, Y+3	; 0x03
    1974:	81 30       	cpi	r24, 0x01	; 1
    1976:	a1 f4       	brne	.+40     	; 0x19a0 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1978:	a7 e3       	ldi	r26, 0x37	; 55
    197a:	b0 e0       	ldi	r27, 0x00	; 0
    197c:	e7 e3       	ldi	r30, 0x37	; 55
    197e:	f0 e0       	ldi	r31, 0x00	; 0
    1980:	80 81       	ld	r24, Z
    1982:	48 2f       	mov	r20, r24
    1984:	8a 81       	ldd	r24, Y+2	; 0x02
    1986:	28 2f       	mov	r18, r24
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	81 e0       	ldi	r24, 0x01	; 1
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	02 2e       	mov	r0, r18
    1990:	02 c0       	rjmp	.+4      	; 0x1996 <GPIO_setupPinDirection+0xe4>
    1992:	88 0f       	add	r24, r24
    1994:	99 1f       	adc	r25, r25
    1996:	0a 94       	dec	r0
    1998:	e2 f7       	brpl	.-8      	; 0x1992 <GPIO_setupPinDirection+0xe0>
    199a:	84 2b       	or	r24, r20
    199c:	8c 93       	st	X, r24
    199e:	6c c0       	rjmp	.+216    	; 0x1a78 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    19a0:	a7 e3       	ldi	r26, 0x37	; 55
    19a2:	b0 e0       	ldi	r27, 0x00	; 0
    19a4:	e7 e3       	ldi	r30, 0x37	; 55
    19a6:	f0 e0       	ldi	r31, 0x00	; 0
    19a8:	80 81       	ld	r24, Z
    19aa:	48 2f       	mov	r20, r24
    19ac:	8a 81       	ldd	r24, Y+2	; 0x02
    19ae:	28 2f       	mov	r18, r24
    19b0:	30 e0       	ldi	r19, 0x00	; 0
    19b2:	81 e0       	ldi	r24, 0x01	; 1
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	02 2e       	mov	r0, r18
    19b8:	02 c0       	rjmp	.+4      	; 0x19be <GPIO_setupPinDirection+0x10c>
    19ba:	88 0f       	add	r24, r24
    19bc:	99 1f       	adc	r25, r25
    19be:	0a 94       	dec	r0
    19c0:	e2 f7       	brpl	.-8      	; 0x19ba <GPIO_setupPinDirection+0x108>
    19c2:	80 95       	com	r24
    19c4:	84 23       	and	r24, r20
    19c6:	8c 93       	st	X, r24
    19c8:	57 c0       	rjmp	.+174    	; 0x1a78 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    19ca:	8b 81       	ldd	r24, Y+3	; 0x03
    19cc:	81 30       	cpi	r24, 0x01	; 1
    19ce:	a1 f4       	brne	.+40     	; 0x19f8 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    19d0:	a4 e3       	ldi	r26, 0x34	; 52
    19d2:	b0 e0       	ldi	r27, 0x00	; 0
    19d4:	e4 e3       	ldi	r30, 0x34	; 52
    19d6:	f0 e0       	ldi	r31, 0x00	; 0
    19d8:	80 81       	ld	r24, Z
    19da:	48 2f       	mov	r20, r24
    19dc:	8a 81       	ldd	r24, Y+2	; 0x02
    19de:	28 2f       	mov	r18, r24
    19e0:	30 e0       	ldi	r19, 0x00	; 0
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	02 2e       	mov	r0, r18
    19e8:	02 c0       	rjmp	.+4      	; 0x19ee <GPIO_setupPinDirection+0x13c>
    19ea:	88 0f       	add	r24, r24
    19ec:	99 1f       	adc	r25, r25
    19ee:	0a 94       	dec	r0
    19f0:	e2 f7       	brpl	.-8      	; 0x19ea <GPIO_setupPinDirection+0x138>
    19f2:	84 2b       	or	r24, r20
    19f4:	8c 93       	st	X, r24
    19f6:	40 c0       	rjmp	.+128    	; 0x1a78 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    19f8:	a4 e3       	ldi	r26, 0x34	; 52
    19fa:	b0 e0       	ldi	r27, 0x00	; 0
    19fc:	e4 e3       	ldi	r30, 0x34	; 52
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	80 81       	ld	r24, Z
    1a02:	48 2f       	mov	r20, r24
    1a04:	8a 81       	ldd	r24, Y+2	; 0x02
    1a06:	28 2f       	mov	r18, r24
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	81 e0       	ldi	r24, 0x01	; 1
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	02 2e       	mov	r0, r18
    1a10:	02 c0       	rjmp	.+4      	; 0x1a16 <GPIO_setupPinDirection+0x164>
    1a12:	88 0f       	add	r24, r24
    1a14:	99 1f       	adc	r25, r25
    1a16:	0a 94       	dec	r0
    1a18:	e2 f7       	brpl	.-8      	; 0x1a12 <GPIO_setupPinDirection+0x160>
    1a1a:	80 95       	com	r24
    1a1c:	84 23       	and	r24, r20
    1a1e:	8c 93       	st	X, r24
    1a20:	2b c0       	rjmp	.+86     	; 0x1a78 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1a22:	8b 81       	ldd	r24, Y+3	; 0x03
    1a24:	81 30       	cpi	r24, 0x01	; 1
    1a26:	a1 f4       	brne	.+40     	; 0x1a50 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1a28:	a1 e3       	ldi	r26, 0x31	; 49
    1a2a:	b0 e0       	ldi	r27, 0x00	; 0
    1a2c:	e1 e3       	ldi	r30, 0x31	; 49
    1a2e:	f0 e0       	ldi	r31, 0x00	; 0
    1a30:	80 81       	ld	r24, Z
    1a32:	48 2f       	mov	r20, r24
    1a34:	8a 81       	ldd	r24, Y+2	; 0x02
    1a36:	28 2f       	mov	r18, r24
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	81 e0       	ldi	r24, 0x01	; 1
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	02 2e       	mov	r0, r18
    1a40:	02 c0       	rjmp	.+4      	; 0x1a46 <GPIO_setupPinDirection+0x194>
    1a42:	88 0f       	add	r24, r24
    1a44:	99 1f       	adc	r25, r25
    1a46:	0a 94       	dec	r0
    1a48:	e2 f7       	brpl	.-8      	; 0x1a42 <GPIO_setupPinDirection+0x190>
    1a4a:	84 2b       	or	r24, r20
    1a4c:	8c 93       	st	X, r24
    1a4e:	14 c0       	rjmp	.+40     	; 0x1a78 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1a50:	a1 e3       	ldi	r26, 0x31	; 49
    1a52:	b0 e0       	ldi	r27, 0x00	; 0
    1a54:	e1 e3       	ldi	r30, 0x31	; 49
    1a56:	f0 e0       	ldi	r31, 0x00	; 0
    1a58:	80 81       	ld	r24, Z
    1a5a:	48 2f       	mov	r20, r24
    1a5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5e:	28 2f       	mov	r18, r24
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	81 e0       	ldi	r24, 0x01	; 1
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	02 2e       	mov	r0, r18
    1a68:	02 c0       	rjmp	.+4      	; 0x1a6e <GPIO_setupPinDirection+0x1bc>
    1a6a:	88 0f       	add	r24, r24
    1a6c:	99 1f       	adc	r25, r25
    1a6e:	0a 94       	dec	r0
    1a70:	e2 f7       	brpl	.-8      	; 0x1a6a <GPIO_setupPinDirection+0x1b8>
    1a72:	80 95       	com	r24
    1a74:	84 23       	and	r24, r20
    1a76:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1a78:	0f 90       	pop	r0
    1a7a:	0f 90       	pop	r0
    1a7c:	0f 90       	pop	r0
    1a7e:	0f 90       	pop	r0
    1a80:	0f 90       	pop	r0
    1a82:	cf 91       	pop	r28
    1a84:	df 91       	pop	r29
    1a86:	08 95       	ret

00001a88 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1a88:	df 93       	push	r29
    1a8a:	cf 93       	push	r28
    1a8c:	00 d0       	rcall	.+0      	; 0x1a8e <GPIO_writePin+0x6>
    1a8e:	00 d0       	rcall	.+0      	; 0x1a90 <GPIO_writePin+0x8>
    1a90:	0f 92       	push	r0
    1a92:	cd b7       	in	r28, 0x3d	; 61
    1a94:	de b7       	in	r29, 0x3e	; 62
    1a96:	89 83       	std	Y+1, r24	; 0x01
    1a98:	6a 83       	std	Y+2, r22	; 0x02
    1a9a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1a9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a9e:	88 30       	cpi	r24, 0x08	; 8
    1aa0:	08 f0       	brcs	.+2      	; 0x1aa4 <GPIO_writePin+0x1c>
    1aa2:	d5 c0       	rjmp	.+426    	; 0x1c4e <GPIO_writePin+0x1c6>
    1aa4:	89 81       	ldd	r24, Y+1	; 0x01
    1aa6:	84 30       	cpi	r24, 0x04	; 4
    1aa8:	08 f0       	brcs	.+2      	; 0x1aac <GPIO_writePin+0x24>
    1aaa:	d1 c0       	rjmp	.+418    	; 0x1c4e <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1aac:	89 81       	ldd	r24, Y+1	; 0x01
    1aae:	28 2f       	mov	r18, r24
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	3d 83       	std	Y+5, r19	; 0x05
    1ab4:	2c 83       	std	Y+4, r18	; 0x04
    1ab6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ab8:	9d 81       	ldd	r25, Y+5	; 0x05
    1aba:	81 30       	cpi	r24, 0x01	; 1
    1abc:	91 05       	cpc	r25, r1
    1abe:	09 f4       	brne	.+2      	; 0x1ac2 <GPIO_writePin+0x3a>
    1ac0:	43 c0       	rjmp	.+134    	; 0x1b48 <GPIO_writePin+0xc0>
    1ac2:	2c 81       	ldd	r18, Y+4	; 0x04
    1ac4:	3d 81       	ldd	r19, Y+5	; 0x05
    1ac6:	22 30       	cpi	r18, 0x02	; 2
    1ac8:	31 05       	cpc	r19, r1
    1aca:	2c f4       	brge	.+10     	; 0x1ad6 <GPIO_writePin+0x4e>
    1acc:	8c 81       	ldd	r24, Y+4	; 0x04
    1ace:	9d 81       	ldd	r25, Y+5	; 0x05
    1ad0:	00 97       	sbiw	r24, 0x00	; 0
    1ad2:	71 f0       	breq	.+28     	; 0x1af0 <GPIO_writePin+0x68>
    1ad4:	bc c0       	rjmp	.+376    	; 0x1c4e <GPIO_writePin+0x1c6>
    1ad6:	2c 81       	ldd	r18, Y+4	; 0x04
    1ad8:	3d 81       	ldd	r19, Y+5	; 0x05
    1ada:	22 30       	cpi	r18, 0x02	; 2
    1adc:	31 05       	cpc	r19, r1
    1ade:	09 f4       	brne	.+2      	; 0x1ae2 <GPIO_writePin+0x5a>
    1ae0:	5f c0       	rjmp	.+190    	; 0x1ba0 <GPIO_writePin+0x118>
    1ae2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ae4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ae6:	83 30       	cpi	r24, 0x03	; 3
    1ae8:	91 05       	cpc	r25, r1
    1aea:	09 f4       	brne	.+2      	; 0x1aee <GPIO_writePin+0x66>
    1aec:	85 c0       	rjmp	.+266    	; 0x1bf8 <GPIO_writePin+0x170>
    1aee:	af c0       	rjmp	.+350    	; 0x1c4e <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1af0:	8b 81       	ldd	r24, Y+3	; 0x03
    1af2:	81 30       	cpi	r24, 0x01	; 1
    1af4:	a1 f4       	brne	.+40     	; 0x1b1e <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1af6:	ab e3       	ldi	r26, 0x3B	; 59
    1af8:	b0 e0       	ldi	r27, 0x00	; 0
    1afa:	eb e3       	ldi	r30, 0x3B	; 59
    1afc:	f0 e0       	ldi	r31, 0x00	; 0
    1afe:	80 81       	ld	r24, Z
    1b00:	48 2f       	mov	r20, r24
    1b02:	8a 81       	ldd	r24, Y+2	; 0x02
    1b04:	28 2f       	mov	r18, r24
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	81 e0       	ldi	r24, 0x01	; 1
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	02 2e       	mov	r0, r18
    1b0e:	02 c0       	rjmp	.+4      	; 0x1b14 <GPIO_writePin+0x8c>
    1b10:	88 0f       	add	r24, r24
    1b12:	99 1f       	adc	r25, r25
    1b14:	0a 94       	dec	r0
    1b16:	e2 f7       	brpl	.-8      	; 0x1b10 <GPIO_writePin+0x88>
    1b18:	84 2b       	or	r24, r20
    1b1a:	8c 93       	st	X, r24
    1b1c:	98 c0       	rjmp	.+304    	; 0x1c4e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1b1e:	ab e3       	ldi	r26, 0x3B	; 59
    1b20:	b0 e0       	ldi	r27, 0x00	; 0
    1b22:	eb e3       	ldi	r30, 0x3B	; 59
    1b24:	f0 e0       	ldi	r31, 0x00	; 0
    1b26:	80 81       	ld	r24, Z
    1b28:	48 2f       	mov	r20, r24
    1b2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2c:	28 2f       	mov	r18, r24
    1b2e:	30 e0       	ldi	r19, 0x00	; 0
    1b30:	81 e0       	ldi	r24, 0x01	; 1
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	02 2e       	mov	r0, r18
    1b36:	02 c0       	rjmp	.+4      	; 0x1b3c <GPIO_writePin+0xb4>
    1b38:	88 0f       	add	r24, r24
    1b3a:	99 1f       	adc	r25, r25
    1b3c:	0a 94       	dec	r0
    1b3e:	e2 f7       	brpl	.-8      	; 0x1b38 <GPIO_writePin+0xb0>
    1b40:	80 95       	com	r24
    1b42:	84 23       	and	r24, r20
    1b44:	8c 93       	st	X, r24
    1b46:	83 c0       	rjmp	.+262    	; 0x1c4e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1b48:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4a:	81 30       	cpi	r24, 0x01	; 1
    1b4c:	a1 f4       	brne	.+40     	; 0x1b76 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1b4e:	a8 e3       	ldi	r26, 0x38	; 56
    1b50:	b0 e0       	ldi	r27, 0x00	; 0
    1b52:	e8 e3       	ldi	r30, 0x38	; 56
    1b54:	f0 e0       	ldi	r31, 0x00	; 0
    1b56:	80 81       	ld	r24, Z
    1b58:	48 2f       	mov	r20, r24
    1b5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5c:	28 2f       	mov	r18, r24
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	81 e0       	ldi	r24, 0x01	; 1
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	02 2e       	mov	r0, r18
    1b66:	02 c0       	rjmp	.+4      	; 0x1b6c <GPIO_writePin+0xe4>
    1b68:	88 0f       	add	r24, r24
    1b6a:	99 1f       	adc	r25, r25
    1b6c:	0a 94       	dec	r0
    1b6e:	e2 f7       	brpl	.-8      	; 0x1b68 <GPIO_writePin+0xe0>
    1b70:	84 2b       	or	r24, r20
    1b72:	8c 93       	st	X, r24
    1b74:	6c c0       	rjmp	.+216    	; 0x1c4e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1b76:	a8 e3       	ldi	r26, 0x38	; 56
    1b78:	b0 e0       	ldi	r27, 0x00	; 0
    1b7a:	e8 e3       	ldi	r30, 0x38	; 56
    1b7c:	f0 e0       	ldi	r31, 0x00	; 0
    1b7e:	80 81       	ld	r24, Z
    1b80:	48 2f       	mov	r20, r24
    1b82:	8a 81       	ldd	r24, Y+2	; 0x02
    1b84:	28 2f       	mov	r18, r24
    1b86:	30 e0       	ldi	r19, 0x00	; 0
    1b88:	81 e0       	ldi	r24, 0x01	; 1
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	02 2e       	mov	r0, r18
    1b8e:	02 c0       	rjmp	.+4      	; 0x1b94 <GPIO_writePin+0x10c>
    1b90:	88 0f       	add	r24, r24
    1b92:	99 1f       	adc	r25, r25
    1b94:	0a 94       	dec	r0
    1b96:	e2 f7       	brpl	.-8      	; 0x1b90 <GPIO_writePin+0x108>
    1b98:	80 95       	com	r24
    1b9a:	84 23       	and	r24, r20
    1b9c:	8c 93       	st	X, r24
    1b9e:	57 c0       	rjmp	.+174    	; 0x1c4e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1ba0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba2:	81 30       	cpi	r24, 0x01	; 1
    1ba4:	a1 f4       	brne	.+40     	; 0x1bce <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1ba6:	a5 e3       	ldi	r26, 0x35	; 53
    1ba8:	b0 e0       	ldi	r27, 0x00	; 0
    1baa:	e5 e3       	ldi	r30, 0x35	; 53
    1bac:	f0 e0       	ldi	r31, 0x00	; 0
    1bae:	80 81       	ld	r24, Z
    1bb0:	48 2f       	mov	r20, r24
    1bb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb4:	28 2f       	mov	r18, r24
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	81 e0       	ldi	r24, 0x01	; 1
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	02 2e       	mov	r0, r18
    1bbe:	02 c0       	rjmp	.+4      	; 0x1bc4 <GPIO_writePin+0x13c>
    1bc0:	88 0f       	add	r24, r24
    1bc2:	99 1f       	adc	r25, r25
    1bc4:	0a 94       	dec	r0
    1bc6:	e2 f7       	brpl	.-8      	; 0x1bc0 <GPIO_writePin+0x138>
    1bc8:	84 2b       	or	r24, r20
    1bca:	8c 93       	st	X, r24
    1bcc:	40 c0       	rjmp	.+128    	; 0x1c4e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1bce:	a5 e3       	ldi	r26, 0x35	; 53
    1bd0:	b0 e0       	ldi	r27, 0x00	; 0
    1bd2:	e5 e3       	ldi	r30, 0x35	; 53
    1bd4:	f0 e0       	ldi	r31, 0x00	; 0
    1bd6:	80 81       	ld	r24, Z
    1bd8:	48 2f       	mov	r20, r24
    1bda:	8a 81       	ldd	r24, Y+2	; 0x02
    1bdc:	28 2f       	mov	r18, r24
    1bde:	30 e0       	ldi	r19, 0x00	; 0
    1be0:	81 e0       	ldi	r24, 0x01	; 1
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	02 2e       	mov	r0, r18
    1be6:	02 c0       	rjmp	.+4      	; 0x1bec <GPIO_writePin+0x164>
    1be8:	88 0f       	add	r24, r24
    1bea:	99 1f       	adc	r25, r25
    1bec:	0a 94       	dec	r0
    1bee:	e2 f7       	brpl	.-8      	; 0x1be8 <GPIO_writePin+0x160>
    1bf0:	80 95       	com	r24
    1bf2:	84 23       	and	r24, r20
    1bf4:	8c 93       	st	X, r24
    1bf6:	2b c0       	rjmp	.+86     	; 0x1c4e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1bf8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfa:	81 30       	cpi	r24, 0x01	; 1
    1bfc:	a1 f4       	brne	.+40     	; 0x1c26 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1bfe:	a2 e3       	ldi	r26, 0x32	; 50
    1c00:	b0 e0       	ldi	r27, 0x00	; 0
    1c02:	e2 e3       	ldi	r30, 0x32	; 50
    1c04:	f0 e0       	ldi	r31, 0x00	; 0
    1c06:	80 81       	ld	r24, Z
    1c08:	48 2f       	mov	r20, r24
    1c0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0c:	28 2f       	mov	r18, r24
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	81 e0       	ldi	r24, 0x01	; 1
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	02 2e       	mov	r0, r18
    1c16:	02 c0       	rjmp	.+4      	; 0x1c1c <GPIO_writePin+0x194>
    1c18:	88 0f       	add	r24, r24
    1c1a:	99 1f       	adc	r25, r25
    1c1c:	0a 94       	dec	r0
    1c1e:	e2 f7       	brpl	.-8      	; 0x1c18 <GPIO_writePin+0x190>
    1c20:	84 2b       	or	r24, r20
    1c22:	8c 93       	st	X, r24
    1c24:	14 c0       	rjmp	.+40     	; 0x1c4e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1c26:	a2 e3       	ldi	r26, 0x32	; 50
    1c28:	b0 e0       	ldi	r27, 0x00	; 0
    1c2a:	e2 e3       	ldi	r30, 0x32	; 50
    1c2c:	f0 e0       	ldi	r31, 0x00	; 0
    1c2e:	80 81       	ld	r24, Z
    1c30:	48 2f       	mov	r20, r24
    1c32:	8a 81       	ldd	r24, Y+2	; 0x02
    1c34:	28 2f       	mov	r18, r24
    1c36:	30 e0       	ldi	r19, 0x00	; 0
    1c38:	81 e0       	ldi	r24, 0x01	; 1
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	02 2e       	mov	r0, r18
    1c3e:	02 c0       	rjmp	.+4      	; 0x1c44 <GPIO_writePin+0x1bc>
    1c40:	88 0f       	add	r24, r24
    1c42:	99 1f       	adc	r25, r25
    1c44:	0a 94       	dec	r0
    1c46:	e2 f7       	brpl	.-8      	; 0x1c40 <GPIO_writePin+0x1b8>
    1c48:	80 95       	com	r24
    1c4a:	84 23       	and	r24, r20
    1c4c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1c4e:	0f 90       	pop	r0
    1c50:	0f 90       	pop	r0
    1c52:	0f 90       	pop	r0
    1c54:	0f 90       	pop	r0
    1c56:	0f 90       	pop	r0
    1c58:	cf 91       	pop	r28
    1c5a:	df 91       	pop	r29
    1c5c:	08 95       	ret

00001c5e <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1c5e:	df 93       	push	r29
    1c60:	cf 93       	push	r28
    1c62:	00 d0       	rcall	.+0      	; 0x1c64 <GPIO_readPin+0x6>
    1c64:	00 d0       	rcall	.+0      	; 0x1c66 <GPIO_readPin+0x8>
    1c66:	0f 92       	push	r0
    1c68:	cd b7       	in	r28, 0x3d	; 61
    1c6a:	de b7       	in	r29, 0x3e	; 62
    1c6c:	8a 83       	std	Y+2, r24	; 0x02
    1c6e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1c70:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1c72:	8b 81       	ldd	r24, Y+3	; 0x03
    1c74:	88 30       	cpi	r24, 0x08	; 8
    1c76:	08 f0       	brcs	.+2      	; 0x1c7a <GPIO_readPin+0x1c>
    1c78:	84 c0       	rjmp	.+264    	; 0x1d82 <GPIO_readPin+0x124>
    1c7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7c:	84 30       	cpi	r24, 0x04	; 4
    1c7e:	08 f0       	brcs	.+2      	; 0x1c82 <GPIO_readPin+0x24>
    1c80:	80 c0       	rjmp	.+256    	; 0x1d82 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1c82:	8a 81       	ldd	r24, Y+2	; 0x02
    1c84:	28 2f       	mov	r18, r24
    1c86:	30 e0       	ldi	r19, 0x00	; 0
    1c88:	3d 83       	std	Y+5, r19	; 0x05
    1c8a:	2c 83       	std	Y+4, r18	; 0x04
    1c8c:	4c 81       	ldd	r20, Y+4	; 0x04
    1c8e:	5d 81       	ldd	r21, Y+5	; 0x05
    1c90:	41 30       	cpi	r20, 0x01	; 1
    1c92:	51 05       	cpc	r21, r1
    1c94:	79 f1       	breq	.+94     	; 0x1cf4 <GPIO_readPin+0x96>
    1c96:	8c 81       	ldd	r24, Y+4	; 0x04
    1c98:	9d 81       	ldd	r25, Y+5	; 0x05
    1c9a:	82 30       	cpi	r24, 0x02	; 2
    1c9c:	91 05       	cpc	r25, r1
    1c9e:	34 f4       	brge	.+12     	; 0x1cac <GPIO_readPin+0x4e>
    1ca0:	2c 81       	ldd	r18, Y+4	; 0x04
    1ca2:	3d 81       	ldd	r19, Y+5	; 0x05
    1ca4:	21 15       	cp	r18, r1
    1ca6:	31 05       	cpc	r19, r1
    1ca8:	69 f0       	breq	.+26     	; 0x1cc4 <GPIO_readPin+0x66>
    1caa:	6b c0       	rjmp	.+214    	; 0x1d82 <GPIO_readPin+0x124>
    1cac:	4c 81       	ldd	r20, Y+4	; 0x04
    1cae:	5d 81       	ldd	r21, Y+5	; 0x05
    1cb0:	42 30       	cpi	r20, 0x02	; 2
    1cb2:	51 05       	cpc	r21, r1
    1cb4:	b9 f1       	breq	.+110    	; 0x1d24 <GPIO_readPin+0xc6>
    1cb6:	8c 81       	ldd	r24, Y+4	; 0x04
    1cb8:	9d 81       	ldd	r25, Y+5	; 0x05
    1cba:	83 30       	cpi	r24, 0x03	; 3
    1cbc:	91 05       	cpc	r25, r1
    1cbe:	09 f4       	brne	.+2      	; 0x1cc2 <GPIO_readPin+0x64>
    1cc0:	49 c0       	rjmp	.+146    	; 0x1d54 <GPIO_readPin+0xf6>
    1cc2:	5f c0       	rjmp	.+190    	; 0x1d82 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1cc4:	e9 e3       	ldi	r30, 0x39	; 57
    1cc6:	f0 e0       	ldi	r31, 0x00	; 0
    1cc8:	80 81       	ld	r24, Z
    1cca:	28 2f       	mov	r18, r24
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd0:	88 2f       	mov	r24, r24
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	a9 01       	movw	r20, r18
    1cd6:	02 c0       	rjmp	.+4      	; 0x1cdc <GPIO_readPin+0x7e>
    1cd8:	55 95       	asr	r21
    1cda:	47 95       	ror	r20
    1cdc:	8a 95       	dec	r24
    1cde:	e2 f7       	brpl	.-8      	; 0x1cd8 <GPIO_readPin+0x7a>
    1ce0:	ca 01       	movw	r24, r20
    1ce2:	81 70       	andi	r24, 0x01	; 1
    1ce4:	90 70       	andi	r25, 0x00	; 0
    1ce6:	88 23       	and	r24, r24
    1ce8:	19 f0       	breq	.+6      	; 0x1cf0 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1cea:	81 e0       	ldi	r24, 0x01	; 1
    1cec:	89 83       	std	Y+1, r24	; 0x01
    1cee:	49 c0       	rjmp	.+146    	; 0x1d82 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1cf0:	19 82       	std	Y+1, r1	; 0x01
    1cf2:	47 c0       	rjmp	.+142    	; 0x1d82 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1cf4:	e6 e3       	ldi	r30, 0x36	; 54
    1cf6:	f0 e0       	ldi	r31, 0x00	; 0
    1cf8:	80 81       	ld	r24, Z
    1cfa:	28 2f       	mov	r18, r24
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1d00:	88 2f       	mov	r24, r24
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	a9 01       	movw	r20, r18
    1d06:	02 c0       	rjmp	.+4      	; 0x1d0c <GPIO_readPin+0xae>
    1d08:	55 95       	asr	r21
    1d0a:	47 95       	ror	r20
    1d0c:	8a 95       	dec	r24
    1d0e:	e2 f7       	brpl	.-8      	; 0x1d08 <GPIO_readPin+0xaa>
    1d10:	ca 01       	movw	r24, r20
    1d12:	81 70       	andi	r24, 0x01	; 1
    1d14:	90 70       	andi	r25, 0x00	; 0
    1d16:	88 23       	and	r24, r24
    1d18:	19 f0       	breq	.+6      	; 0x1d20 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1d1a:	81 e0       	ldi	r24, 0x01	; 1
    1d1c:	89 83       	std	Y+1, r24	; 0x01
    1d1e:	31 c0       	rjmp	.+98     	; 0x1d82 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1d20:	19 82       	std	Y+1, r1	; 0x01
    1d22:	2f c0       	rjmp	.+94     	; 0x1d82 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1d24:	e3 e3       	ldi	r30, 0x33	; 51
    1d26:	f0 e0       	ldi	r31, 0x00	; 0
    1d28:	80 81       	ld	r24, Z
    1d2a:	28 2f       	mov	r18, r24
    1d2c:	30 e0       	ldi	r19, 0x00	; 0
    1d2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d30:	88 2f       	mov	r24, r24
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	a9 01       	movw	r20, r18
    1d36:	02 c0       	rjmp	.+4      	; 0x1d3c <GPIO_readPin+0xde>
    1d38:	55 95       	asr	r21
    1d3a:	47 95       	ror	r20
    1d3c:	8a 95       	dec	r24
    1d3e:	e2 f7       	brpl	.-8      	; 0x1d38 <GPIO_readPin+0xda>
    1d40:	ca 01       	movw	r24, r20
    1d42:	81 70       	andi	r24, 0x01	; 1
    1d44:	90 70       	andi	r25, 0x00	; 0
    1d46:	88 23       	and	r24, r24
    1d48:	19 f0       	breq	.+6      	; 0x1d50 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1d4a:	81 e0       	ldi	r24, 0x01	; 1
    1d4c:	89 83       	std	Y+1, r24	; 0x01
    1d4e:	19 c0       	rjmp	.+50     	; 0x1d82 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1d50:	19 82       	std	Y+1, r1	; 0x01
    1d52:	17 c0       	rjmp	.+46     	; 0x1d82 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1d54:	e0 e3       	ldi	r30, 0x30	; 48
    1d56:	f0 e0       	ldi	r31, 0x00	; 0
    1d58:	80 81       	ld	r24, Z
    1d5a:	28 2f       	mov	r18, r24
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d60:	88 2f       	mov	r24, r24
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	a9 01       	movw	r20, r18
    1d66:	02 c0       	rjmp	.+4      	; 0x1d6c <GPIO_readPin+0x10e>
    1d68:	55 95       	asr	r21
    1d6a:	47 95       	ror	r20
    1d6c:	8a 95       	dec	r24
    1d6e:	e2 f7       	brpl	.-8      	; 0x1d68 <GPIO_readPin+0x10a>
    1d70:	ca 01       	movw	r24, r20
    1d72:	81 70       	andi	r24, 0x01	; 1
    1d74:	90 70       	andi	r25, 0x00	; 0
    1d76:	88 23       	and	r24, r24
    1d78:	19 f0       	breq	.+6      	; 0x1d80 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1d7a:	81 e0       	ldi	r24, 0x01	; 1
    1d7c:	89 83       	std	Y+1, r24	; 0x01
    1d7e:	01 c0       	rjmp	.+2      	; 0x1d82 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1d80:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1d82:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d84:	0f 90       	pop	r0
    1d86:	0f 90       	pop	r0
    1d88:	0f 90       	pop	r0
    1d8a:	0f 90       	pop	r0
    1d8c:	0f 90       	pop	r0
    1d8e:	cf 91       	pop	r28
    1d90:	df 91       	pop	r29
    1d92:	08 95       	ret

00001d94 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1d94:	df 93       	push	r29
    1d96:	cf 93       	push	r28
    1d98:	00 d0       	rcall	.+0      	; 0x1d9a <GPIO_setupPortDirection+0x6>
    1d9a:	00 d0       	rcall	.+0      	; 0x1d9c <GPIO_setupPortDirection+0x8>
    1d9c:	cd b7       	in	r28, 0x3d	; 61
    1d9e:	de b7       	in	r29, 0x3e	; 62
    1da0:	89 83       	std	Y+1, r24	; 0x01
    1da2:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1da4:	89 81       	ldd	r24, Y+1	; 0x01
    1da6:	84 30       	cpi	r24, 0x04	; 4
    1da8:	90 f5       	brcc	.+100    	; 0x1e0e <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1daa:	89 81       	ldd	r24, Y+1	; 0x01
    1dac:	28 2f       	mov	r18, r24
    1dae:	30 e0       	ldi	r19, 0x00	; 0
    1db0:	3c 83       	std	Y+4, r19	; 0x04
    1db2:	2b 83       	std	Y+3, r18	; 0x03
    1db4:	8b 81       	ldd	r24, Y+3	; 0x03
    1db6:	9c 81       	ldd	r25, Y+4	; 0x04
    1db8:	81 30       	cpi	r24, 0x01	; 1
    1dba:	91 05       	cpc	r25, r1
    1dbc:	d1 f0       	breq	.+52     	; 0x1df2 <GPIO_setupPortDirection+0x5e>
    1dbe:	2b 81       	ldd	r18, Y+3	; 0x03
    1dc0:	3c 81       	ldd	r19, Y+4	; 0x04
    1dc2:	22 30       	cpi	r18, 0x02	; 2
    1dc4:	31 05       	cpc	r19, r1
    1dc6:	2c f4       	brge	.+10     	; 0x1dd2 <GPIO_setupPortDirection+0x3e>
    1dc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dca:	9c 81       	ldd	r25, Y+4	; 0x04
    1dcc:	00 97       	sbiw	r24, 0x00	; 0
    1dce:	61 f0       	breq	.+24     	; 0x1de8 <GPIO_setupPortDirection+0x54>
    1dd0:	1e c0       	rjmp	.+60     	; 0x1e0e <GPIO_setupPortDirection+0x7a>
    1dd2:	2b 81       	ldd	r18, Y+3	; 0x03
    1dd4:	3c 81       	ldd	r19, Y+4	; 0x04
    1dd6:	22 30       	cpi	r18, 0x02	; 2
    1dd8:	31 05       	cpc	r19, r1
    1dda:	81 f0       	breq	.+32     	; 0x1dfc <GPIO_setupPortDirection+0x68>
    1ddc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dde:	9c 81       	ldd	r25, Y+4	; 0x04
    1de0:	83 30       	cpi	r24, 0x03	; 3
    1de2:	91 05       	cpc	r25, r1
    1de4:	81 f0       	breq	.+32     	; 0x1e06 <GPIO_setupPortDirection+0x72>
    1de6:	13 c0       	rjmp	.+38     	; 0x1e0e <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1de8:	ea e3       	ldi	r30, 0x3A	; 58
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	8a 81       	ldd	r24, Y+2	; 0x02
    1dee:	80 83       	st	Z, r24
    1df0:	0e c0       	rjmp	.+28     	; 0x1e0e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1df2:	e7 e3       	ldi	r30, 0x37	; 55
    1df4:	f0 e0       	ldi	r31, 0x00	; 0
    1df6:	8a 81       	ldd	r24, Y+2	; 0x02
    1df8:	80 83       	st	Z, r24
    1dfa:	09 c0       	rjmp	.+18     	; 0x1e0e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1dfc:	e4 e3       	ldi	r30, 0x34	; 52
    1dfe:	f0 e0       	ldi	r31, 0x00	; 0
    1e00:	8a 81       	ldd	r24, Y+2	; 0x02
    1e02:	80 83       	st	Z, r24
    1e04:	04 c0       	rjmp	.+8      	; 0x1e0e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1e06:	e1 e3       	ldi	r30, 0x31	; 49
    1e08:	f0 e0       	ldi	r31, 0x00	; 0
    1e0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0c:	80 83       	st	Z, r24
			break;
		}
	}
}
    1e0e:	0f 90       	pop	r0
    1e10:	0f 90       	pop	r0
    1e12:	0f 90       	pop	r0
    1e14:	0f 90       	pop	r0
    1e16:	cf 91       	pop	r28
    1e18:	df 91       	pop	r29
    1e1a:	08 95       	ret

00001e1c <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1e1c:	df 93       	push	r29
    1e1e:	cf 93       	push	r28
    1e20:	00 d0       	rcall	.+0      	; 0x1e22 <GPIO_writePort+0x6>
    1e22:	00 d0       	rcall	.+0      	; 0x1e24 <GPIO_writePort+0x8>
    1e24:	cd b7       	in	r28, 0x3d	; 61
    1e26:	de b7       	in	r29, 0x3e	; 62
    1e28:	89 83       	std	Y+1, r24	; 0x01
    1e2a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1e2c:	89 81       	ldd	r24, Y+1	; 0x01
    1e2e:	84 30       	cpi	r24, 0x04	; 4
    1e30:	90 f5       	brcc	.+100    	; 0x1e96 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1e32:	89 81       	ldd	r24, Y+1	; 0x01
    1e34:	28 2f       	mov	r18, r24
    1e36:	30 e0       	ldi	r19, 0x00	; 0
    1e38:	3c 83       	std	Y+4, r19	; 0x04
    1e3a:	2b 83       	std	Y+3, r18	; 0x03
    1e3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e40:	81 30       	cpi	r24, 0x01	; 1
    1e42:	91 05       	cpc	r25, r1
    1e44:	d1 f0       	breq	.+52     	; 0x1e7a <GPIO_writePort+0x5e>
    1e46:	2b 81       	ldd	r18, Y+3	; 0x03
    1e48:	3c 81       	ldd	r19, Y+4	; 0x04
    1e4a:	22 30       	cpi	r18, 0x02	; 2
    1e4c:	31 05       	cpc	r19, r1
    1e4e:	2c f4       	brge	.+10     	; 0x1e5a <GPIO_writePort+0x3e>
    1e50:	8b 81       	ldd	r24, Y+3	; 0x03
    1e52:	9c 81       	ldd	r25, Y+4	; 0x04
    1e54:	00 97       	sbiw	r24, 0x00	; 0
    1e56:	61 f0       	breq	.+24     	; 0x1e70 <GPIO_writePort+0x54>
    1e58:	1e c0       	rjmp	.+60     	; 0x1e96 <GPIO_writePort+0x7a>
    1e5a:	2b 81       	ldd	r18, Y+3	; 0x03
    1e5c:	3c 81       	ldd	r19, Y+4	; 0x04
    1e5e:	22 30       	cpi	r18, 0x02	; 2
    1e60:	31 05       	cpc	r19, r1
    1e62:	81 f0       	breq	.+32     	; 0x1e84 <GPIO_writePort+0x68>
    1e64:	8b 81       	ldd	r24, Y+3	; 0x03
    1e66:	9c 81       	ldd	r25, Y+4	; 0x04
    1e68:	83 30       	cpi	r24, 0x03	; 3
    1e6a:	91 05       	cpc	r25, r1
    1e6c:	81 f0       	breq	.+32     	; 0x1e8e <GPIO_writePort+0x72>
    1e6e:	13 c0       	rjmp	.+38     	; 0x1e96 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1e70:	eb e3       	ldi	r30, 0x3B	; 59
    1e72:	f0 e0       	ldi	r31, 0x00	; 0
    1e74:	8a 81       	ldd	r24, Y+2	; 0x02
    1e76:	80 83       	st	Z, r24
    1e78:	0e c0       	rjmp	.+28     	; 0x1e96 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1e7a:	e8 e3       	ldi	r30, 0x38	; 56
    1e7c:	f0 e0       	ldi	r31, 0x00	; 0
    1e7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e80:	80 83       	st	Z, r24
    1e82:	09 c0       	rjmp	.+18     	; 0x1e96 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1e84:	e5 e3       	ldi	r30, 0x35	; 53
    1e86:	f0 e0       	ldi	r31, 0x00	; 0
    1e88:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8a:	80 83       	st	Z, r24
    1e8c:	04 c0       	rjmp	.+8      	; 0x1e96 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1e8e:	e2 e3       	ldi	r30, 0x32	; 50
    1e90:	f0 e0       	ldi	r31, 0x00	; 0
    1e92:	8a 81       	ldd	r24, Y+2	; 0x02
    1e94:	80 83       	st	Z, r24
			break;
		}
	}
}
    1e96:	0f 90       	pop	r0
    1e98:	0f 90       	pop	r0
    1e9a:	0f 90       	pop	r0
    1e9c:	0f 90       	pop	r0
    1e9e:	cf 91       	pop	r28
    1ea0:	df 91       	pop	r29
    1ea2:	08 95       	ret

00001ea4 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1ea4:	df 93       	push	r29
    1ea6:	cf 93       	push	r28
    1ea8:	00 d0       	rcall	.+0      	; 0x1eaa <GPIO_readPort+0x6>
    1eaa:	00 d0       	rcall	.+0      	; 0x1eac <GPIO_readPort+0x8>
    1eac:	cd b7       	in	r28, 0x3d	; 61
    1eae:	de b7       	in	r29, 0x3e	; 62
    1eb0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1eb2:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1eb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb6:	84 30       	cpi	r24, 0x04	; 4
    1eb8:	90 f5       	brcc	.+100    	; 0x1f1e <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1eba:	8a 81       	ldd	r24, Y+2	; 0x02
    1ebc:	28 2f       	mov	r18, r24
    1ebe:	30 e0       	ldi	r19, 0x00	; 0
    1ec0:	3c 83       	std	Y+4, r19	; 0x04
    1ec2:	2b 83       	std	Y+3, r18	; 0x03
    1ec4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ec8:	81 30       	cpi	r24, 0x01	; 1
    1eca:	91 05       	cpc	r25, r1
    1ecc:	d1 f0       	breq	.+52     	; 0x1f02 <GPIO_readPort+0x5e>
    1ece:	2b 81       	ldd	r18, Y+3	; 0x03
    1ed0:	3c 81       	ldd	r19, Y+4	; 0x04
    1ed2:	22 30       	cpi	r18, 0x02	; 2
    1ed4:	31 05       	cpc	r19, r1
    1ed6:	2c f4       	brge	.+10     	; 0x1ee2 <GPIO_readPort+0x3e>
    1ed8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eda:	9c 81       	ldd	r25, Y+4	; 0x04
    1edc:	00 97       	sbiw	r24, 0x00	; 0
    1ede:	61 f0       	breq	.+24     	; 0x1ef8 <GPIO_readPort+0x54>
    1ee0:	1e c0       	rjmp	.+60     	; 0x1f1e <GPIO_readPort+0x7a>
    1ee2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ee4:	3c 81       	ldd	r19, Y+4	; 0x04
    1ee6:	22 30       	cpi	r18, 0x02	; 2
    1ee8:	31 05       	cpc	r19, r1
    1eea:	81 f0       	breq	.+32     	; 0x1f0c <GPIO_readPort+0x68>
    1eec:	8b 81       	ldd	r24, Y+3	; 0x03
    1eee:	9c 81       	ldd	r25, Y+4	; 0x04
    1ef0:	83 30       	cpi	r24, 0x03	; 3
    1ef2:	91 05       	cpc	r25, r1
    1ef4:	81 f0       	breq	.+32     	; 0x1f16 <GPIO_readPort+0x72>
    1ef6:	13 c0       	rjmp	.+38     	; 0x1f1e <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1ef8:	e9 e3       	ldi	r30, 0x39	; 57
    1efa:	f0 e0       	ldi	r31, 0x00	; 0
    1efc:	80 81       	ld	r24, Z
    1efe:	89 83       	std	Y+1, r24	; 0x01
    1f00:	0e c0       	rjmp	.+28     	; 0x1f1e <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1f02:	e6 e3       	ldi	r30, 0x36	; 54
    1f04:	f0 e0       	ldi	r31, 0x00	; 0
    1f06:	80 81       	ld	r24, Z
    1f08:	89 83       	std	Y+1, r24	; 0x01
    1f0a:	09 c0       	rjmp	.+18     	; 0x1f1e <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1f0c:	e3 e3       	ldi	r30, 0x33	; 51
    1f0e:	f0 e0       	ldi	r31, 0x00	; 0
    1f10:	80 81       	ld	r24, Z
    1f12:	89 83       	std	Y+1, r24	; 0x01
    1f14:	04 c0       	rjmp	.+8      	; 0x1f1e <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1f16:	e0 e3       	ldi	r30, 0x30	; 48
    1f18:	f0 e0       	ldi	r31, 0x00	; 0
    1f1a:	80 81       	ld	r24, Z
    1f1c:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1f1e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f20:	0f 90       	pop	r0
    1f22:	0f 90       	pop	r0
    1f24:	0f 90       	pop	r0
    1f26:	0f 90       	pop	r0
    1f28:	cf 91       	pop	r28
    1f2a:	df 91       	pop	r29
    1f2c:	08 95       	ret

00001f2e <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    1f2e:	df 93       	push	r29
    1f30:	cf 93       	push	r28
    1f32:	00 d0       	rcall	.+0      	; 0x1f34 <KEYPAD_getPressedKey+0x6>
    1f34:	0f 92       	push	r0
    1f36:	cd b7       	in	r28, 0x3d	; 61
    1f38:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    1f3a:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1f3c:	1b 82       	std	Y+3, r1	; 0x03
    1f3e:	43 c0       	rjmp	.+134    	; 0x1fc6 <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    1f40:	82 e0       	ldi	r24, 0x02	; 2
    1f42:	60 e0       	ldi	r22, 0x00	; 0
    1f44:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    1f48:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4a:	98 2f       	mov	r25, r24
    1f4c:	9c 5f       	subi	r25, 0xFC	; 252
    1f4e:	82 e0       	ldi	r24, 0x02	; 2
    1f50:	69 2f       	mov	r22, r25
    1f52:	41 e0       	ldi	r20, 0x01	; 1
    1f54:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <GPIO_setupPinDirection>
			
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    1f58:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5a:	88 2f       	mov	r24, r24
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	9c 01       	movw	r18, r24
    1f60:	2c 5f       	subi	r18, 0xFC	; 252
    1f62:	3f 4f       	sbci	r19, 0xFF	; 255
    1f64:	81 e0       	ldi	r24, 0x01	; 1
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	02 c0       	rjmp	.+4      	; 0x1f6e <KEYPAD_getPressedKey+0x40>
    1f6a:	88 0f       	add	r24, r24
    1f6c:	99 1f       	adc	r25, r25
    1f6e:	2a 95       	dec	r18
    1f70:	e2 f7       	brpl	.-8      	; 0x1f6a <KEYPAD_getPressedKey+0x3c>
    1f72:	80 95       	com	r24
    1f74:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    1f76:	82 e0       	ldi	r24, 0x02	; 2
    1f78:	69 81       	ldd	r22, Y+1	; 0x01
    1f7a:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1f7e:	1a 82       	std	Y+2, r1	; 0x02
    1f80:	1c c0       	rjmp	.+56     	; 0x1fba <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    1f82:	82 e0       	ldi	r24, 0x02	; 2
    1f84:	6a 81       	ldd	r22, Y+2	; 0x02
    1f86:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <GPIO_readPin>
    1f8a:	88 23       	and	r24, r24
    1f8c:	99 f4       	brne	.+38     	; 0x1fb4 <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1f8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f90:	88 2f       	mov	r24, r24
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	88 0f       	add	r24, r24
    1f96:	99 1f       	adc	r25, r25
    1f98:	88 0f       	add	r24, r24
    1f9a:	99 1f       	adc	r25, r25
    1f9c:	98 2f       	mov	r25, r24
    1f9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa0:	89 0f       	add	r24, r25
    1fa2:	8f 5f       	subi	r24, 0xFF	; 255
    1fa4:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    1fa8:	0f 90       	pop	r0
    1faa:	0f 90       	pop	r0
    1fac:	0f 90       	pop	r0
    1fae:	cf 91       	pop	r28
    1fb0:	df 91       	pop	r29
    1fb2:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1fb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb6:	8f 5f       	subi	r24, 0xFF	; 255
    1fb8:	8a 83       	std	Y+2, r24	; 0x02
    1fba:	8a 81       	ldd	r24, Y+2	; 0x02
    1fbc:	84 30       	cpi	r24, 0x04	; 4
    1fbe:	08 f3       	brcs	.-62     	; 0x1f82 <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1fc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc2:	8f 5f       	subi	r24, 0xFF	; 255
    1fc4:	8b 83       	std	Y+3, r24	; 0x03
    1fc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc8:	84 30       	cpi	r24, 0x04	; 4
    1fca:	08 f4       	brcc	.+2      	; 0x1fce <KEYPAD_getPressedKey+0xa0>
    1fcc:	b9 cf       	rjmp	.-142    	; 0x1f40 <KEYPAD_getPressedKey+0x12>
    1fce:	b6 cf       	rjmp	.-148    	; 0x1f3c <KEYPAD_getPressedKey+0xe>

00001fd0 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1fd0:	df 93       	push	r29
    1fd2:	cf 93       	push	r28
    1fd4:	00 d0       	rcall	.+0      	; 0x1fd6 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1fd6:	00 d0       	rcall	.+0      	; 0x1fd8 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1fd8:	cd b7       	in	r28, 0x3d	; 61
    1fda:	de b7       	in	r29, 0x3e	; 62
    1fdc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1fde:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1fe0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe2:	28 2f       	mov	r18, r24
    1fe4:	30 e0       	ldi	r19, 0x00	; 0
    1fe6:	3c 83       	std	Y+4, r19	; 0x04
    1fe8:	2b 83       	std	Y+3, r18	; 0x03
    1fea:	8b 81       	ldd	r24, Y+3	; 0x03
    1fec:	9c 81       	ldd	r25, Y+4	; 0x04
    1fee:	88 30       	cpi	r24, 0x08	; 8
    1ff0:	91 05       	cpc	r25, r1
    1ff2:	09 f4       	brne	.+2      	; 0x1ff6 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1ff4:	70 c0       	rjmp	.+224    	; 0x20d6 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1ff6:	2b 81       	ldd	r18, Y+3	; 0x03
    1ff8:	3c 81       	ldd	r19, Y+4	; 0x04
    1ffa:	29 30       	cpi	r18, 0x09	; 9
    1ffc:	31 05       	cpc	r19, r1
    1ffe:	5c f5       	brge	.+86     	; 0x2056 <KEYPAD_4x4_adjustKeyNumber+0x86>
    2000:	8b 81       	ldd	r24, Y+3	; 0x03
    2002:	9c 81       	ldd	r25, Y+4	; 0x04
    2004:	84 30       	cpi	r24, 0x04	; 4
    2006:	91 05       	cpc	r25, r1
    2008:	09 f4       	brne	.+2      	; 0x200c <KEYPAD_4x4_adjustKeyNumber+0x3c>
    200a:	59 c0       	rjmp	.+178    	; 0x20be <KEYPAD_4x4_adjustKeyNumber+0xee>
    200c:	2b 81       	ldd	r18, Y+3	; 0x03
    200e:	3c 81       	ldd	r19, Y+4	; 0x04
    2010:	25 30       	cpi	r18, 0x05	; 5
    2012:	31 05       	cpc	r19, r1
    2014:	9c f4       	brge	.+38     	; 0x203c <KEYPAD_4x4_adjustKeyNumber+0x6c>
    2016:	8b 81       	ldd	r24, Y+3	; 0x03
    2018:	9c 81       	ldd	r25, Y+4	; 0x04
    201a:	82 30       	cpi	r24, 0x02	; 2
    201c:	91 05       	cpc	r25, r1
    201e:	09 f4       	brne	.+2      	; 0x2022 <KEYPAD_4x4_adjustKeyNumber+0x52>
    2020:	48 c0       	rjmp	.+144    	; 0x20b2 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    2022:	2b 81       	ldd	r18, Y+3	; 0x03
    2024:	3c 81       	ldd	r19, Y+4	; 0x04
    2026:	23 30       	cpi	r18, 0x03	; 3
    2028:	31 05       	cpc	r19, r1
    202a:	0c f0       	brlt	.+2      	; 0x202e <KEYPAD_4x4_adjustKeyNumber+0x5e>
    202c:	45 c0       	rjmp	.+138    	; 0x20b8 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    202e:	8b 81       	ldd	r24, Y+3	; 0x03
    2030:	9c 81       	ldd	r25, Y+4	; 0x04
    2032:	81 30       	cpi	r24, 0x01	; 1
    2034:	91 05       	cpc	r25, r1
    2036:	09 f4       	brne	.+2      	; 0x203a <KEYPAD_4x4_adjustKeyNumber+0x6a>
    2038:	39 c0       	rjmp	.+114    	; 0x20ac <KEYPAD_4x4_adjustKeyNumber+0xdc>
    203a:	67 c0       	rjmp	.+206    	; 0x210a <KEYPAD_4x4_adjustKeyNumber+0x13a>
    203c:	2b 81       	ldd	r18, Y+3	; 0x03
    203e:	3c 81       	ldd	r19, Y+4	; 0x04
    2040:	26 30       	cpi	r18, 0x06	; 6
    2042:	31 05       	cpc	r19, r1
    2044:	09 f4       	brne	.+2      	; 0x2048 <KEYPAD_4x4_adjustKeyNumber+0x78>
    2046:	41 c0       	rjmp	.+130    	; 0x20ca <KEYPAD_4x4_adjustKeyNumber+0xfa>
    2048:	8b 81       	ldd	r24, Y+3	; 0x03
    204a:	9c 81       	ldd	r25, Y+4	; 0x04
    204c:	87 30       	cpi	r24, 0x07	; 7
    204e:	91 05       	cpc	r25, r1
    2050:	0c f0       	brlt	.+2      	; 0x2054 <KEYPAD_4x4_adjustKeyNumber+0x84>
    2052:	3e c0       	rjmp	.+124    	; 0x20d0 <KEYPAD_4x4_adjustKeyNumber+0x100>
    2054:	37 c0       	rjmp	.+110    	; 0x20c4 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    2056:	2b 81       	ldd	r18, Y+3	; 0x03
    2058:	3c 81       	ldd	r19, Y+4	; 0x04
    205a:	2c 30       	cpi	r18, 0x0C	; 12
    205c:	31 05       	cpc	r19, r1
    205e:	09 f4       	brne	.+2      	; 0x2062 <KEYPAD_4x4_adjustKeyNumber+0x92>
    2060:	46 c0       	rjmp	.+140    	; 0x20ee <KEYPAD_4x4_adjustKeyNumber+0x11e>
    2062:	8b 81       	ldd	r24, Y+3	; 0x03
    2064:	9c 81       	ldd	r25, Y+4	; 0x04
    2066:	8d 30       	cpi	r24, 0x0D	; 13
    2068:	91 05       	cpc	r25, r1
    206a:	5c f4       	brge	.+22     	; 0x2082 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    206c:	2b 81       	ldd	r18, Y+3	; 0x03
    206e:	3c 81       	ldd	r19, Y+4	; 0x04
    2070:	2a 30       	cpi	r18, 0x0A	; 10
    2072:	31 05       	cpc	r19, r1
    2074:	b1 f1       	breq	.+108    	; 0x20e2 <KEYPAD_4x4_adjustKeyNumber+0x112>
    2076:	8b 81       	ldd	r24, Y+3	; 0x03
    2078:	9c 81       	ldd	r25, Y+4	; 0x04
    207a:	8b 30       	cpi	r24, 0x0B	; 11
    207c:	91 05       	cpc	r25, r1
    207e:	a4 f5       	brge	.+104    	; 0x20e8 <KEYPAD_4x4_adjustKeyNumber+0x118>
    2080:	2d c0       	rjmp	.+90     	; 0x20dc <KEYPAD_4x4_adjustKeyNumber+0x10c>
    2082:	2b 81       	ldd	r18, Y+3	; 0x03
    2084:	3c 81       	ldd	r19, Y+4	; 0x04
    2086:	2e 30       	cpi	r18, 0x0E	; 14
    2088:	31 05       	cpc	r19, r1
    208a:	b9 f1       	breq	.+110    	; 0x20fa <KEYPAD_4x4_adjustKeyNumber+0x12a>
    208c:	8b 81       	ldd	r24, Y+3	; 0x03
    208e:	9c 81       	ldd	r25, Y+4	; 0x04
    2090:	8e 30       	cpi	r24, 0x0E	; 14
    2092:	91 05       	cpc	r25, r1
    2094:	7c f1       	brlt	.+94     	; 0x20f4 <KEYPAD_4x4_adjustKeyNumber+0x124>
    2096:	2b 81       	ldd	r18, Y+3	; 0x03
    2098:	3c 81       	ldd	r19, Y+4	; 0x04
    209a:	2f 30       	cpi	r18, 0x0F	; 15
    209c:	31 05       	cpc	r19, r1
    209e:	79 f1       	breq	.+94     	; 0x20fe <KEYPAD_4x4_adjustKeyNumber+0x12e>
    20a0:	8b 81       	ldd	r24, Y+3	; 0x03
    20a2:	9c 81       	ldd	r25, Y+4	; 0x04
    20a4:	80 31       	cpi	r24, 0x10	; 16
    20a6:	91 05       	cpc	r25, r1
    20a8:	69 f1       	breq	.+90     	; 0x2104 <KEYPAD_4x4_adjustKeyNumber+0x134>
    20aa:	2f c0       	rjmp	.+94     	; 0x210a <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    20ac:	87 e0       	ldi	r24, 0x07	; 7
    20ae:	89 83       	std	Y+1, r24	; 0x01
    20b0:	2e c0       	rjmp	.+92     	; 0x210e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    20b2:	88 e0       	ldi	r24, 0x08	; 8
    20b4:	89 83       	std	Y+1, r24	; 0x01
    20b6:	2b c0       	rjmp	.+86     	; 0x210e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    20b8:	89 e0       	ldi	r24, 0x09	; 9
    20ba:	89 83       	std	Y+1, r24	; 0x01
    20bc:	28 c0       	rjmp	.+80     	; 0x210e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    20be:	85 e2       	ldi	r24, 0x25	; 37
    20c0:	89 83       	std	Y+1, r24	; 0x01
    20c2:	25 c0       	rjmp	.+74     	; 0x210e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    20c4:	84 e0       	ldi	r24, 0x04	; 4
    20c6:	89 83       	std	Y+1, r24	; 0x01
    20c8:	22 c0       	rjmp	.+68     	; 0x210e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    20ca:	85 e0       	ldi	r24, 0x05	; 5
    20cc:	89 83       	std	Y+1, r24	; 0x01
    20ce:	1f c0       	rjmp	.+62     	; 0x210e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    20d0:	86 e0       	ldi	r24, 0x06	; 6
    20d2:	89 83       	std	Y+1, r24	; 0x01
    20d4:	1c c0       	rjmp	.+56     	; 0x210e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    20d6:	8a e2       	ldi	r24, 0x2A	; 42
    20d8:	89 83       	std	Y+1, r24	; 0x01
    20da:	19 c0       	rjmp	.+50     	; 0x210e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    20dc:	81 e0       	ldi	r24, 0x01	; 1
    20de:	89 83       	std	Y+1, r24	; 0x01
    20e0:	16 c0       	rjmp	.+44     	; 0x210e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    20e2:	82 e0       	ldi	r24, 0x02	; 2
    20e4:	89 83       	std	Y+1, r24	; 0x01
    20e6:	13 c0       	rjmp	.+38     	; 0x210e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    20e8:	83 e0       	ldi	r24, 0x03	; 3
    20ea:	89 83       	std	Y+1, r24	; 0x01
    20ec:	10 c0       	rjmp	.+32     	; 0x210e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    20ee:	8d e2       	ldi	r24, 0x2D	; 45
    20f0:	89 83       	std	Y+1, r24	; 0x01
    20f2:	0d c0       	rjmp	.+26     	; 0x210e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    20f4:	8d e0       	ldi	r24, 0x0D	; 13
    20f6:	89 83       	std	Y+1, r24	; 0x01
    20f8:	0a c0       	rjmp	.+20     	; 0x210e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    20fa:	19 82       	std	Y+1, r1	; 0x01
    20fc:	08 c0       	rjmp	.+16     	; 0x210e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    20fe:	8d e3       	ldi	r24, 0x3D	; 61
    2100:	89 83       	std	Y+1, r24	; 0x01
    2102:	05 c0       	rjmp	.+10     	; 0x210e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    2104:	8b e2       	ldi	r24, 0x2B	; 43
    2106:	89 83       	std	Y+1, r24	; 0x01
    2108:	02 c0       	rjmp	.+4      	; 0x210e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    210a:	8a 81       	ldd	r24, Y+2	; 0x02
    210c:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    210e:	89 81       	ldd	r24, Y+1	; 0x01
} 
    2110:	0f 90       	pop	r0
    2112:	0f 90       	pop	r0
    2114:	0f 90       	pop	r0
    2116:	0f 90       	pop	r0
    2118:	cf 91       	pop	r28
    211a:	df 91       	pop	r29
    211c:	08 95       	ret

0000211e <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    211e:	df 93       	push	r29
    2120:	cf 93       	push	r28
    2122:	cd b7       	in	r28, 0x3d	; 61
    2124:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    2126:	81 e0       	ldi	r24, 0x01	; 1
    2128:	60 e0       	ldi	r22, 0x00	; 0
    212a:	41 e0       	ldi	r20, 0x01	; 1
    212c:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    2130:	81 e0       	ldi	r24, 0x01	; 1
    2132:	61 e0       	ldi	r22, 0x01	; 1
    2134:	41 e0       	ldi	r20, 0x01	; 1
    2136:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    213a:	81 e0       	ldi	r24, 0x01	; 1
    213c:	62 e0       	ldi	r22, 0x02	; 2
    213e:	41 e0       	ldi	r20, 0x01	; 1
    2140:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <GPIO_setupPinDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    2144:	80 e0       	ldi	r24, 0x00	; 0
    2146:	6f ef       	ldi	r22, 0xFF	; 255
    2148:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <GPIO_setupPortDirection>

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    214c:	88 e3       	ldi	r24, 0x38	; 56
    214e:	0e 94 b2 10 	call	0x2164	; 0x2164 <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    2152:	8c e0       	ldi	r24, 0x0C	; 12
    2154:	0e 94 b2 10 	call	0x2164	; 0x2164 <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    2158:	81 e0       	ldi	r24, 0x01	; 1
    215a:	0e 94 b2 10 	call	0x2164	; 0x2164 <LCD_sendCommand>
}
    215e:	cf 91       	pop	r28
    2160:	df 91       	pop	r29
    2162:	08 95       	ret

00002164 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    2164:	df 93       	push	r29
    2166:	cf 93       	push	r28
    2168:	cd b7       	in	r28, 0x3d	; 61
    216a:	de b7       	in	r29, 0x3e	; 62
    216c:	e9 97       	sbiw	r28, 0x39	; 57
    216e:	0f b6       	in	r0, 0x3f	; 63
    2170:	f8 94       	cli
    2172:	de bf       	out	0x3e, r29	; 62
    2174:	0f be       	out	0x3f, r0	; 63
    2176:	cd bf       	out	0x3d, r28	; 61
    2178:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    217a:	81 e0       	ldi	r24, 0x01	; 1
    217c:	60 e0       	ldi	r22, 0x00	; 0
    217e:	40 e0       	ldi	r20, 0x00	; 0
    2180:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    2184:	81 e0       	ldi	r24, 0x01	; 1
    2186:	61 e0       	ldi	r22, 0x01	; 1
    2188:	40 e0       	ldi	r20, 0x00	; 0
    218a:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <GPIO_writePin>
    218e:	80 e0       	ldi	r24, 0x00	; 0
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	a0 e8       	ldi	r26, 0x80	; 128
    2194:	bf e3       	ldi	r27, 0x3F	; 63
    2196:	8d ab       	std	Y+53, r24	; 0x35
    2198:	9e ab       	std	Y+54, r25	; 0x36
    219a:	af ab       	std	Y+55, r26	; 0x37
    219c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    219e:	6d a9       	ldd	r22, Y+53	; 0x35
    21a0:	7e a9       	ldd	r23, Y+54	; 0x36
    21a2:	8f a9       	ldd	r24, Y+55	; 0x37
    21a4:	98 ad       	ldd	r25, Y+56	; 0x38
    21a6:	20 e0       	ldi	r18, 0x00	; 0
    21a8:	30 e0       	ldi	r19, 0x00	; 0
    21aa:	4a ef       	ldi	r20, 0xFA	; 250
    21ac:	54 e4       	ldi	r21, 0x44	; 68
    21ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21b2:	dc 01       	movw	r26, r24
    21b4:	cb 01       	movw	r24, r22
    21b6:	89 ab       	std	Y+49, r24	; 0x31
    21b8:	9a ab       	std	Y+50, r25	; 0x32
    21ba:	ab ab       	std	Y+51, r26	; 0x33
    21bc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    21be:	69 a9       	ldd	r22, Y+49	; 0x31
    21c0:	7a a9       	ldd	r23, Y+50	; 0x32
    21c2:	8b a9       	ldd	r24, Y+51	; 0x33
    21c4:	9c a9       	ldd	r25, Y+52	; 0x34
    21c6:	20 e0       	ldi	r18, 0x00	; 0
    21c8:	30 e0       	ldi	r19, 0x00	; 0
    21ca:	40 e8       	ldi	r20, 0x80	; 128
    21cc:	5f e3       	ldi	r21, 0x3F	; 63
    21ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21d2:	88 23       	and	r24, r24
    21d4:	2c f4       	brge	.+10     	; 0x21e0 <LCD_sendCommand+0x7c>
		__ticks = 1;
    21d6:	81 e0       	ldi	r24, 0x01	; 1
    21d8:	90 e0       	ldi	r25, 0x00	; 0
    21da:	98 ab       	std	Y+48, r25	; 0x30
    21dc:	8f a7       	std	Y+47, r24	; 0x2f
    21de:	3f c0       	rjmp	.+126    	; 0x225e <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    21e0:	69 a9       	ldd	r22, Y+49	; 0x31
    21e2:	7a a9       	ldd	r23, Y+50	; 0x32
    21e4:	8b a9       	ldd	r24, Y+51	; 0x33
    21e6:	9c a9       	ldd	r25, Y+52	; 0x34
    21e8:	20 e0       	ldi	r18, 0x00	; 0
    21ea:	3f ef       	ldi	r19, 0xFF	; 255
    21ec:	4f e7       	ldi	r20, 0x7F	; 127
    21ee:	57 e4       	ldi	r21, 0x47	; 71
    21f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21f4:	18 16       	cp	r1, r24
    21f6:	4c f5       	brge	.+82     	; 0x224a <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21f8:	6d a9       	ldd	r22, Y+53	; 0x35
    21fa:	7e a9       	ldd	r23, Y+54	; 0x36
    21fc:	8f a9       	ldd	r24, Y+55	; 0x37
    21fe:	98 ad       	ldd	r25, Y+56	; 0x38
    2200:	20 e0       	ldi	r18, 0x00	; 0
    2202:	30 e0       	ldi	r19, 0x00	; 0
    2204:	40 e2       	ldi	r20, 0x20	; 32
    2206:	51 e4       	ldi	r21, 0x41	; 65
    2208:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    220c:	dc 01       	movw	r26, r24
    220e:	cb 01       	movw	r24, r22
    2210:	bc 01       	movw	r22, r24
    2212:	cd 01       	movw	r24, r26
    2214:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2218:	dc 01       	movw	r26, r24
    221a:	cb 01       	movw	r24, r22
    221c:	98 ab       	std	Y+48, r25	; 0x30
    221e:	8f a7       	std	Y+47, r24	; 0x2f
    2220:	0f c0       	rjmp	.+30     	; 0x2240 <LCD_sendCommand+0xdc>
    2222:	88 ec       	ldi	r24, 0xC8	; 200
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	9e a7       	std	Y+46, r25	; 0x2e
    2228:	8d a7       	std	Y+45, r24	; 0x2d
    222a:	8d a5       	ldd	r24, Y+45	; 0x2d
    222c:	9e a5       	ldd	r25, Y+46	; 0x2e
    222e:	01 97       	sbiw	r24, 0x01	; 1
    2230:	f1 f7       	brne	.-4      	; 0x222e <LCD_sendCommand+0xca>
    2232:	9e a7       	std	Y+46, r25	; 0x2e
    2234:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2236:	8f a5       	ldd	r24, Y+47	; 0x2f
    2238:	98 a9       	ldd	r25, Y+48	; 0x30
    223a:	01 97       	sbiw	r24, 0x01	; 1
    223c:	98 ab       	std	Y+48, r25	; 0x30
    223e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2240:	8f a5       	ldd	r24, Y+47	; 0x2f
    2242:	98 a9       	ldd	r25, Y+48	; 0x30
    2244:	00 97       	sbiw	r24, 0x00	; 0
    2246:	69 f7       	brne	.-38     	; 0x2222 <LCD_sendCommand+0xbe>
    2248:	14 c0       	rjmp	.+40     	; 0x2272 <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    224a:	69 a9       	ldd	r22, Y+49	; 0x31
    224c:	7a a9       	ldd	r23, Y+50	; 0x32
    224e:	8b a9       	ldd	r24, Y+51	; 0x33
    2250:	9c a9       	ldd	r25, Y+52	; 0x34
    2252:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2256:	dc 01       	movw	r26, r24
    2258:	cb 01       	movw	r24, r22
    225a:	98 ab       	std	Y+48, r25	; 0x30
    225c:	8f a7       	std	Y+47, r24	; 0x2f
    225e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2260:	98 a9       	ldd	r25, Y+48	; 0x30
    2262:	9c a7       	std	Y+44, r25	; 0x2c
    2264:	8b a7       	std	Y+43, r24	; 0x2b
    2266:	8b a5       	ldd	r24, Y+43	; 0x2b
    2268:	9c a5       	ldd	r25, Y+44	; 0x2c
    226a:	01 97       	sbiw	r24, 0x01	; 1
    226c:	f1 f7       	brne	.-4      	; 0x226a <LCD_sendCommand+0x106>
    226e:	9c a7       	std	Y+44, r25	; 0x2c
    2270:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2272:	81 e0       	ldi	r24, 0x01	; 1
    2274:	62 e0       	ldi	r22, 0x02	; 2
    2276:	41 e0       	ldi	r20, 0x01	; 1
    2278:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <GPIO_writePin>
    227c:	80 e0       	ldi	r24, 0x00	; 0
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	a0 e8       	ldi	r26, 0x80	; 128
    2282:	bf e3       	ldi	r27, 0x3F	; 63
    2284:	8f a3       	std	Y+39, r24	; 0x27
    2286:	98 a7       	std	Y+40, r25	; 0x28
    2288:	a9 a7       	std	Y+41, r26	; 0x29
    228a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    228c:	6f a1       	ldd	r22, Y+39	; 0x27
    228e:	78 a5       	ldd	r23, Y+40	; 0x28
    2290:	89 a5       	ldd	r24, Y+41	; 0x29
    2292:	9a a5       	ldd	r25, Y+42	; 0x2a
    2294:	20 e0       	ldi	r18, 0x00	; 0
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	4a ef       	ldi	r20, 0xFA	; 250
    229a:	54 e4       	ldi	r21, 0x44	; 68
    229c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22a0:	dc 01       	movw	r26, r24
    22a2:	cb 01       	movw	r24, r22
    22a4:	8b a3       	std	Y+35, r24	; 0x23
    22a6:	9c a3       	std	Y+36, r25	; 0x24
    22a8:	ad a3       	std	Y+37, r26	; 0x25
    22aa:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    22ac:	6b a1       	ldd	r22, Y+35	; 0x23
    22ae:	7c a1       	ldd	r23, Y+36	; 0x24
    22b0:	8d a1       	ldd	r24, Y+37	; 0x25
    22b2:	9e a1       	ldd	r25, Y+38	; 0x26
    22b4:	20 e0       	ldi	r18, 0x00	; 0
    22b6:	30 e0       	ldi	r19, 0x00	; 0
    22b8:	40 e8       	ldi	r20, 0x80	; 128
    22ba:	5f e3       	ldi	r21, 0x3F	; 63
    22bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22c0:	88 23       	and	r24, r24
    22c2:	2c f4       	brge	.+10     	; 0x22ce <LCD_sendCommand+0x16a>
		__ticks = 1;
    22c4:	81 e0       	ldi	r24, 0x01	; 1
    22c6:	90 e0       	ldi	r25, 0x00	; 0
    22c8:	9a a3       	std	Y+34, r25	; 0x22
    22ca:	89 a3       	std	Y+33, r24	; 0x21
    22cc:	3f c0       	rjmp	.+126    	; 0x234c <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    22ce:	6b a1       	ldd	r22, Y+35	; 0x23
    22d0:	7c a1       	ldd	r23, Y+36	; 0x24
    22d2:	8d a1       	ldd	r24, Y+37	; 0x25
    22d4:	9e a1       	ldd	r25, Y+38	; 0x26
    22d6:	20 e0       	ldi	r18, 0x00	; 0
    22d8:	3f ef       	ldi	r19, 0xFF	; 255
    22da:	4f e7       	ldi	r20, 0x7F	; 127
    22dc:	57 e4       	ldi	r21, 0x47	; 71
    22de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22e2:	18 16       	cp	r1, r24
    22e4:	4c f5       	brge	.+82     	; 0x2338 <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22e6:	6f a1       	ldd	r22, Y+39	; 0x27
    22e8:	78 a5       	ldd	r23, Y+40	; 0x28
    22ea:	89 a5       	ldd	r24, Y+41	; 0x29
    22ec:	9a a5       	ldd	r25, Y+42	; 0x2a
    22ee:	20 e0       	ldi	r18, 0x00	; 0
    22f0:	30 e0       	ldi	r19, 0x00	; 0
    22f2:	40 e2       	ldi	r20, 0x20	; 32
    22f4:	51 e4       	ldi	r21, 0x41	; 65
    22f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22fa:	dc 01       	movw	r26, r24
    22fc:	cb 01       	movw	r24, r22
    22fe:	bc 01       	movw	r22, r24
    2300:	cd 01       	movw	r24, r26
    2302:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2306:	dc 01       	movw	r26, r24
    2308:	cb 01       	movw	r24, r22
    230a:	9a a3       	std	Y+34, r25	; 0x22
    230c:	89 a3       	std	Y+33, r24	; 0x21
    230e:	0f c0       	rjmp	.+30     	; 0x232e <LCD_sendCommand+0x1ca>
    2310:	88 ec       	ldi	r24, 0xC8	; 200
    2312:	90 e0       	ldi	r25, 0x00	; 0
    2314:	98 a3       	std	Y+32, r25	; 0x20
    2316:	8f 8f       	std	Y+31, r24	; 0x1f
    2318:	8f 8d       	ldd	r24, Y+31	; 0x1f
    231a:	98 a1       	ldd	r25, Y+32	; 0x20
    231c:	01 97       	sbiw	r24, 0x01	; 1
    231e:	f1 f7       	brne	.-4      	; 0x231c <LCD_sendCommand+0x1b8>
    2320:	98 a3       	std	Y+32, r25	; 0x20
    2322:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2324:	89 a1       	ldd	r24, Y+33	; 0x21
    2326:	9a a1       	ldd	r25, Y+34	; 0x22
    2328:	01 97       	sbiw	r24, 0x01	; 1
    232a:	9a a3       	std	Y+34, r25	; 0x22
    232c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    232e:	89 a1       	ldd	r24, Y+33	; 0x21
    2330:	9a a1       	ldd	r25, Y+34	; 0x22
    2332:	00 97       	sbiw	r24, 0x00	; 0
    2334:	69 f7       	brne	.-38     	; 0x2310 <LCD_sendCommand+0x1ac>
    2336:	14 c0       	rjmp	.+40     	; 0x2360 <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2338:	6b a1       	ldd	r22, Y+35	; 0x23
    233a:	7c a1       	ldd	r23, Y+36	; 0x24
    233c:	8d a1       	ldd	r24, Y+37	; 0x25
    233e:	9e a1       	ldd	r25, Y+38	; 0x26
    2340:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2344:	dc 01       	movw	r26, r24
    2346:	cb 01       	movw	r24, r22
    2348:	9a a3       	std	Y+34, r25	; 0x22
    234a:	89 a3       	std	Y+33, r24	; 0x21
    234c:	89 a1       	ldd	r24, Y+33	; 0x21
    234e:	9a a1       	ldd	r25, Y+34	; 0x22
    2350:	9e 8f       	std	Y+30, r25	; 0x1e
    2352:	8d 8f       	std	Y+29, r24	; 0x1d
    2354:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2356:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2358:	01 97       	sbiw	r24, 0x01	; 1
    235a:	f1 f7       	brne	.-4      	; 0x2358 <LCD_sendCommand+0x1f4>
    235c:	9e 8f       	std	Y+30, r25	; 0x1e
    235e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    2360:	80 e0       	ldi	r24, 0x00	; 0
    2362:	69 ad       	ldd	r22, Y+57	; 0x39
    2364:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <GPIO_writePort>
    2368:	80 e0       	ldi	r24, 0x00	; 0
    236a:	90 e0       	ldi	r25, 0x00	; 0
    236c:	a0 e8       	ldi	r26, 0x80	; 128
    236e:	bf e3       	ldi	r27, 0x3F	; 63
    2370:	89 8f       	std	Y+25, r24	; 0x19
    2372:	9a 8f       	std	Y+26, r25	; 0x1a
    2374:	ab 8f       	std	Y+27, r26	; 0x1b
    2376:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2378:	69 8d       	ldd	r22, Y+25	; 0x19
    237a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    237c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    237e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2380:	20 e0       	ldi	r18, 0x00	; 0
    2382:	30 e0       	ldi	r19, 0x00	; 0
    2384:	4a ef       	ldi	r20, 0xFA	; 250
    2386:	54 e4       	ldi	r21, 0x44	; 68
    2388:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    238c:	dc 01       	movw	r26, r24
    238e:	cb 01       	movw	r24, r22
    2390:	8d 8b       	std	Y+21, r24	; 0x15
    2392:	9e 8b       	std	Y+22, r25	; 0x16
    2394:	af 8b       	std	Y+23, r26	; 0x17
    2396:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2398:	6d 89       	ldd	r22, Y+21	; 0x15
    239a:	7e 89       	ldd	r23, Y+22	; 0x16
    239c:	8f 89       	ldd	r24, Y+23	; 0x17
    239e:	98 8d       	ldd	r25, Y+24	; 0x18
    23a0:	20 e0       	ldi	r18, 0x00	; 0
    23a2:	30 e0       	ldi	r19, 0x00	; 0
    23a4:	40 e8       	ldi	r20, 0x80	; 128
    23a6:	5f e3       	ldi	r21, 0x3F	; 63
    23a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23ac:	88 23       	and	r24, r24
    23ae:	2c f4       	brge	.+10     	; 0x23ba <LCD_sendCommand+0x256>
		__ticks = 1;
    23b0:	81 e0       	ldi	r24, 0x01	; 1
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	9c 8b       	std	Y+20, r25	; 0x14
    23b6:	8b 8b       	std	Y+19, r24	; 0x13
    23b8:	3f c0       	rjmp	.+126    	; 0x2438 <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    23ba:	6d 89       	ldd	r22, Y+21	; 0x15
    23bc:	7e 89       	ldd	r23, Y+22	; 0x16
    23be:	8f 89       	ldd	r24, Y+23	; 0x17
    23c0:	98 8d       	ldd	r25, Y+24	; 0x18
    23c2:	20 e0       	ldi	r18, 0x00	; 0
    23c4:	3f ef       	ldi	r19, 0xFF	; 255
    23c6:	4f e7       	ldi	r20, 0x7F	; 127
    23c8:	57 e4       	ldi	r21, 0x47	; 71
    23ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23ce:	18 16       	cp	r1, r24
    23d0:	4c f5       	brge	.+82     	; 0x2424 <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23d2:	69 8d       	ldd	r22, Y+25	; 0x19
    23d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23da:	20 e0       	ldi	r18, 0x00	; 0
    23dc:	30 e0       	ldi	r19, 0x00	; 0
    23de:	40 e2       	ldi	r20, 0x20	; 32
    23e0:	51 e4       	ldi	r21, 0x41	; 65
    23e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23e6:	dc 01       	movw	r26, r24
    23e8:	cb 01       	movw	r24, r22
    23ea:	bc 01       	movw	r22, r24
    23ec:	cd 01       	movw	r24, r26
    23ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23f2:	dc 01       	movw	r26, r24
    23f4:	cb 01       	movw	r24, r22
    23f6:	9c 8b       	std	Y+20, r25	; 0x14
    23f8:	8b 8b       	std	Y+19, r24	; 0x13
    23fa:	0f c0       	rjmp	.+30     	; 0x241a <LCD_sendCommand+0x2b6>
    23fc:	88 ec       	ldi	r24, 0xC8	; 200
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	9a 8b       	std	Y+18, r25	; 0x12
    2402:	89 8b       	std	Y+17, r24	; 0x11
    2404:	89 89       	ldd	r24, Y+17	; 0x11
    2406:	9a 89       	ldd	r25, Y+18	; 0x12
    2408:	01 97       	sbiw	r24, 0x01	; 1
    240a:	f1 f7       	brne	.-4      	; 0x2408 <LCD_sendCommand+0x2a4>
    240c:	9a 8b       	std	Y+18, r25	; 0x12
    240e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2410:	8b 89       	ldd	r24, Y+19	; 0x13
    2412:	9c 89       	ldd	r25, Y+20	; 0x14
    2414:	01 97       	sbiw	r24, 0x01	; 1
    2416:	9c 8b       	std	Y+20, r25	; 0x14
    2418:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    241a:	8b 89       	ldd	r24, Y+19	; 0x13
    241c:	9c 89       	ldd	r25, Y+20	; 0x14
    241e:	00 97       	sbiw	r24, 0x00	; 0
    2420:	69 f7       	brne	.-38     	; 0x23fc <LCD_sendCommand+0x298>
    2422:	14 c0       	rjmp	.+40     	; 0x244c <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2424:	6d 89       	ldd	r22, Y+21	; 0x15
    2426:	7e 89       	ldd	r23, Y+22	; 0x16
    2428:	8f 89       	ldd	r24, Y+23	; 0x17
    242a:	98 8d       	ldd	r25, Y+24	; 0x18
    242c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2430:	dc 01       	movw	r26, r24
    2432:	cb 01       	movw	r24, r22
    2434:	9c 8b       	std	Y+20, r25	; 0x14
    2436:	8b 8b       	std	Y+19, r24	; 0x13
    2438:	8b 89       	ldd	r24, Y+19	; 0x13
    243a:	9c 89       	ldd	r25, Y+20	; 0x14
    243c:	98 8b       	std	Y+16, r25	; 0x10
    243e:	8f 87       	std	Y+15, r24	; 0x0f
    2440:	8f 85       	ldd	r24, Y+15	; 0x0f
    2442:	98 89       	ldd	r25, Y+16	; 0x10
    2444:	01 97       	sbiw	r24, 0x01	; 1
    2446:	f1 f7       	brne	.-4      	; 0x2444 <LCD_sendCommand+0x2e0>
    2448:	98 8b       	std	Y+16, r25	; 0x10
    244a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    244c:	81 e0       	ldi	r24, 0x01	; 1
    244e:	62 e0       	ldi	r22, 0x02	; 2
    2450:	40 e0       	ldi	r20, 0x00	; 0
    2452:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <GPIO_writePin>
    2456:	80 e0       	ldi	r24, 0x00	; 0
    2458:	90 e0       	ldi	r25, 0x00	; 0
    245a:	a0 e8       	ldi	r26, 0x80	; 128
    245c:	bf e3       	ldi	r27, 0x3F	; 63
    245e:	8b 87       	std	Y+11, r24	; 0x0b
    2460:	9c 87       	std	Y+12, r25	; 0x0c
    2462:	ad 87       	std	Y+13, r26	; 0x0d
    2464:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2466:	6b 85       	ldd	r22, Y+11	; 0x0b
    2468:	7c 85       	ldd	r23, Y+12	; 0x0c
    246a:	8d 85       	ldd	r24, Y+13	; 0x0d
    246c:	9e 85       	ldd	r25, Y+14	; 0x0e
    246e:	20 e0       	ldi	r18, 0x00	; 0
    2470:	30 e0       	ldi	r19, 0x00	; 0
    2472:	4a ef       	ldi	r20, 0xFA	; 250
    2474:	54 e4       	ldi	r21, 0x44	; 68
    2476:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    247a:	dc 01       	movw	r26, r24
    247c:	cb 01       	movw	r24, r22
    247e:	8f 83       	std	Y+7, r24	; 0x07
    2480:	98 87       	std	Y+8, r25	; 0x08
    2482:	a9 87       	std	Y+9, r26	; 0x09
    2484:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2486:	6f 81       	ldd	r22, Y+7	; 0x07
    2488:	78 85       	ldd	r23, Y+8	; 0x08
    248a:	89 85       	ldd	r24, Y+9	; 0x09
    248c:	9a 85       	ldd	r25, Y+10	; 0x0a
    248e:	20 e0       	ldi	r18, 0x00	; 0
    2490:	30 e0       	ldi	r19, 0x00	; 0
    2492:	40 e8       	ldi	r20, 0x80	; 128
    2494:	5f e3       	ldi	r21, 0x3F	; 63
    2496:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    249a:	88 23       	and	r24, r24
    249c:	2c f4       	brge	.+10     	; 0x24a8 <LCD_sendCommand+0x344>
		__ticks = 1;
    249e:	81 e0       	ldi	r24, 0x01	; 1
    24a0:	90 e0       	ldi	r25, 0x00	; 0
    24a2:	9e 83       	std	Y+6, r25	; 0x06
    24a4:	8d 83       	std	Y+5, r24	; 0x05
    24a6:	3f c0       	rjmp	.+126    	; 0x2526 <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    24a8:	6f 81       	ldd	r22, Y+7	; 0x07
    24aa:	78 85       	ldd	r23, Y+8	; 0x08
    24ac:	89 85       	ldd	r24, Y+9	; 0x09
    24ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    24b0:	20 e0       	ldi	r18, 0x00	; 0
    24b2:	3f ef       	ldi	r19, 0xFF	; 255
    24b4:	4f e7       	ldi	r20, 0x7F	; 127
    24b6:	57 e4       	ldi	r21, 0x47	; 71
    24b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24bc:	18 16       	cp	r1, r24
    24be:	4c f5       	brge	.+82     	; 0x2512 <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    24c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    24c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    24c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    24c8:	20 e0       	ldi	r18, 0x00	; 0
    24ca:	30 e0       	ldi	r19, 0x00	; 0
    24cc:	40 e2       	ldi	r20, 0x20	; 32
    24ce:	51 e4       	ldi	r21, 0x41	; 65
    24d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24d4:	dc 01       	movw	r26, r24
    24d6:	cb 01       	movw	r24, r22
    24d8:	bc 01       	movw	r22, r24
    24da:	cd 01       	movw	r24, r26
    24dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24e0:	dc 01       	movw	r26, r24
    24e2:	cb 01       	movw	r24, r22
    24e4:	9e 83       	std	Y+6, r25	; 0x06
    24e6:	8d 83       	std	Y+5, r24	; 0x05
    24e8:	0f c0       	rjmp	.+30     	; 0x2508 <LCD_sendCommand+0x3a4>
    24ea:	88 ec       	ldi	r24, 0xC8	; 200
    24ec:	90 e0       	ldi	r25, 0x00	; 0
    24ee:	9c 83       	std	Y+4, r25	; 0x04
    24f0:	8b 83       	std	Y+3, r24	; 0x03
    24f2:	8b 81       	ldd	r24, Y+3	; 0x03
    24f4:	9c 81       	ldd	r25, Y+4	; 0x04
    24f6:	01 97       	sbiw	r24, 0x01	; 1
    24f8:	f1 f7       	brne	.-4      	; 0x24f6 <LCD_sendCommand+0x392>
    24fa:	9c 83       	std	Y+4, r25	; 0x04
    24fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2500:	9e 81       	ldd	r25, Y+6	; 0x06
    2502:	01 97       	sbiw	r24, 0x01	; 1
    2504:	9e 83       	std	Y+6, r25	; 0x06
    2506:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2508:	8d 81       	ldd	r24, Y+5	; 0x05
    250a:	9e 81       	ldd	r25, Y+6	; 0x06
    250c:	00 97       	sbiw	r24, 0x00	; 0
    250e:	69 f7       	brne	.-38     	; 0x24ea <LCD_sendCommand+0x386>
    2510:	14 c0       	rjmp	.+40     	; 0x253a <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2512:	6f 81       	ldd	r22, Y+7	; 0x07
    2514:	78 85       	ldd	r23, Y+8	; 0x08
    2516:	89 85       	ldd	r24, Y+9	; 0x09
    2518:	9a 85       	ldd	r25, Y+10	; 0x0a
    251a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    251e:	dc 01       	movw	r26, r24
    2520:	cb 01       	movw	r24, r22
    2522:	9e 83       	std	Y+6, r25	; 0x06
    2524:	8d 83       	std	Y+5, r24	; 0x05
    2526:	8d 81       	ldd	r24, Y+5	; 0x05
    2528:	9e 81       	ldd	r25, Y+6	; 0x06
    252a:	9a 83       	std	Y+2, r25	; 0x02
    252c:	89 83       	std	Y+1, r24	; 0x01
    252e:	89 81       	ldd	r24, Y+1	; 0x01
    2530:	9a 81       	ldd	r25, Y+2	; 0x02
    2532:	01 97       	sbiw	r24, 0x01	; 1
    2534:	f1 f7       	brne	.-4      	; 0x2532 <LCD_sendCommand+0x3ce>
    2536:	9a 83       	std	Y+2, r25	; 0x02
    2538:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    253a:	e9 96       	adiw	r28, 0x39	; 57
    253c:	0f b6       	in	r0, 0x3f	; 63
    253e:	f8 94       	cli
    2540:	de bf       	out	0x3e, r29	; 62
    2542:	0f be       	out	0x3f, r0	; 63
    2544:	cd bf       	out	0x3d, r28	; 61
    2546:	cf 91       	pop	r28
    2548:	df 91       	pop	r29
    254a:	08 95       	ret

0000254c <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    254c:	df 93       	push	r29
    254e:	cf 93       	push	r28
    2550:	cd b7       	in	r28, 0x3d	; 61
    2552:	de b7       	in	r29, 0x3e	; 62
    2554:	e9 97       	sbiw	r28, 0x39	; 57
    2556:	0f b6       	in	r0, 0x3f	; 63
    2558:	f8 94       	cli
    255a:	de bf       	out	0x3e, r29	; 62
    255c:	0f be       	out	0x3f, r0	; 63
    255e:	cd bf       	out	0x3d, r28	; 61
    2560:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2562:	81 e0       	ldi	r24, 0x01	; 1
    2564:	60 e0       	ldi	r22, 0x00	; 0
    2566:	41 e0       	ldi	r20, 0x01	; 1
    2568:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    256c:	81 e0       	ldi	r24, 0x01	; 1
    256e:	61 e0       	ldi	r22, 0x01	; 1
    2570:	40 e0       	ldi	r20, 0x00	; 0
    2572:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <GPIO_writePin>
    2576:	80 e0       	ldi	r24, 0x00	; 0
    2578:	90 e0       	ldi	r25, 0x00	; 0
    257a:	a0 e8       	ldi	r26, 0x80	; 128
    257c:	bf e3       	ldi	r27, 0x3F	; 63
    257e:	8d ab       	std	Y+53, r24	; 0x35
    2580:	9e ab       	std	Y+54, r25	; 0x36
    2582:	af ab       	std	Y+55, r26	; 0x37
    2584:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2586:	6d a9       	ldd	r22, Y+53	; 0x35
    2588:	7e a9       	ldd	r23, Y+54	; 0x36
    258a:	8f a9       	ldd	r24, Y+55	; 0x37
    258c:	98 ad       	ldd	r25, Y+56	; 0x38
    258e:	20 e0       	ldi	r18, 0x00	; 0
    2590:	30 e0       	ldi	r19, 0x00	; 0
    2592:	4a ef       	ldi	r20, 0xFA	; 250
    2594:	54 e4       	ldi	r21, 0x44	; 68
    2596:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    259a:	dc 01       	movw	r26, r24
    259c:	cb 01       	movw	r24, r22
    259e:	89 ab       	std	Y+49, r24	; 0x31
    25a0:	9a ab       	std	Y+50, r25	; 0x32
    25a2:	ab ab       	std	Y+51, r26	; 0x33
    25a4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    25a6:	69 a9       	ldd	r22, Y+49	; 0x31
    25a8:	7a a9       	ldd	r23, Y+50	; 0x32
    25aa:	8b a9       	ldd	r24, Y+51	; 0x33
    25ac:	9c a9       	ldd	r25, Y+52	; 0x34
    25ae:	20 e0       	ldi	r18, 0x00	; 0
    25b0:	30 e0       	ldi	r19, 0x00	; 0
    25b2:	40 e8       	ldi	r20, 0x80	; 128
    25b4:	5f e3       	ldi	r21, 0x3F	; 63
    25b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25ba:	88 23       	and	r24, r24
    25bc:	2c f4       	brge	.+10     	; 0x25c8 <LCD_displayCharacter+0x7c>
		__ticks = 1;
    25be:	81 e0       	ldi	r24, 0x01	; 1
    25c0:	90 e0       	ldi	r25, 0x00	; 0
    25c2:	98 ab       	std	Y+48, r25	; 0x30
    25c4:	8f a7       	std	Y+47, r24	; 0x2f
    25c6:	3f c0       	rjmp	.+126    	; 0x2646 <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    25c8:	69 a9       	ldd	r22, Y+49	; 0x31
    25ca:	7a a9       	ldd	r23, Y+50	; 0x32
    25cc:	8b a9       	ldd	r24, Y+51	; 0x33
    25ce:	9c a9       	ldd	r25, Y+52	; 0x34
    25d0:	20 e0       	ldi	r18, 0x00	; 0
    25d2:	3f ef       	ldi	r19, 0xFF	; 255
    25d4:	4f e7       	ldi	r20, 0x7F	; 127
    25d6:	57 e4       	ldi	r21, 0x47	; 71
    25d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25dc:	18 16       	cp	r1, r24
    25de:	4c f5       	brge	.+82     	; 0x2632 <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25e0:	6d a9       	ldd	r22, Y+53	; 0x35
    25e2:	7e a9       	ldd	r23, Y+54	; 0x36
    25e4:	8f a9       	ldd	r24, Y+55	; 0x37
    25e6:	98 ad       	ldd	r25, Y+56	; 0x38
    25e8:	20 e0       	ldi	r18, 0x00	; 0
    25ea:	30 e0       	ldi	r19, 0x00	; 0
    25ec:	40 e2       	ldi	r20, 0x20	; 32
    25ee:	51 e4       	ldi	r21, 0x41	; 65
    25f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25f4:	dc 01       	movw	r26, r24
    25f6:	cb 01       	movw	r24, r22
    25f8:	bc 01       	movw	r22, r24
    25fa:	cd 01       	movw	r24, r26
    25fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2600:	dc 01       	movw	r26, r24
    2602:	cb 01       	movw	r24, r22
    2604:	98 ab       	std	Y+48, r25	; 0x30
    2606:	8f a7       	std	Y+47, r24	; 0x2f
    2608:	0f c0       	rjmp	.+30     	; 0x2628 <LCD_displayCharacter+0xdc>
    260a:	88 ec       	ldi	r24, 0xC8	; 200
    260c:	90 e0       	ldi	r25, 0x00	; 0
    260e:	9e a7       	std	Y+46, r25	; 0x2e
    2610:	8d a7       	std	Y+45, r24	; 0x2d
    2612:	8d a5       	ldd	r24, Y+45	; 0x2d
    2614:	9e a5       	ldd	r25, Y+46	; 0x2e
    2616:	01 97       	sbiw	r24, 0x01	; 1
    2618:	f1 f7       	brne	.-4      	; 0x2616 <LCD_displayCharacter+0xca>
    261a:	9e a7       	std	Y+46, r25	; 0x2e
    261c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    261e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2620:	98 a9       	ldd	r25, Y+48	; 0x30
    2622:	01 97       	sbiw	r24, 0x01	; 1
    2624:	98 ab       	std	Y+48, r25	; 0x30
    2626:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2628:	8f a5       	ldd	r24, Y+47	; 0x2f
    262a:	98 a9       	ldd	r25, Y+48	; 0x30
    262c:	00 97       	sbiw	r24, 0x00	; 0
    262e:	69 f7       	brne	.-38     	; 0x260a <LCD_displayCharacter+0xbe>
    2630:	14 c0       	rjmp	.+40     	; 0x265a <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2632:	69 a9       	ldd	r22, Y+49	; 0x31
    2634:	7a a9       	ldd	r23, Y+50	; 0x32
    2636:	8b a9       	ldd	r24, Y+51	; 0x33
    2638:	9c a9       	ldd	r25, Y+52	; 0x34
    263a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    263e:	dc 01       	movw	r26, r24
    2640:	cb 01       	movw	r24, r22
    2642:	98 ab       	std	Y+48, r25	; 0x30
    2644:	8f a7       	std	Y+47, r24	; 0x2f
    2646:	8f a5       	ldd	r24, Y+47	; 0x2f
    2648:	98 a9       	ldd	r25, Y+48	; 0x30
    264a:	9c a7       	std	Y+44, r25	; 0x2c
    264c:	8b a7       	std	Y+43, r24	; 0x2b
    264e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2650:	9c a5       	ldd	r25, Y+44	; 0x2c
    2652:	01 97       	sbiw	r24, 0x01	; 1
    2654:	f1 f7       	brne	.-4      	; 0x2652 <LCD_displayCharacter+0x106>
    2656:	9c a7       	std	Y+44, r25	; 0x2c
    2658:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    265a:	81 e0       	ldi	r24, 0x01	; 1
    265c:	62 e0       	ldi	r22, 0x02	; 2
    265e:	41 e0       	ldi	r20, 0x01	; 1
    2660:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <GPIO_writePin>
    2664:	80 e0       	ldi	r24, 0x00	; 0
    2666:	90 e0       	ldi	r25, 0x00	; 0
    2668:	a0 e8       	ldi	r26, 0x80	; 128
    266a:	bf e3       	ldi	r27, 0x3F	; 63
    266c:	8f a3       	std	Y+39, r24	; 0x27
    266e:	98 a7       	std	Y+40, r25	; 0x28
    2670:	a9 a7       	std	Y+41, r26	; 0x29
    2672:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2674:	6f a1       	ldd	r22, Y+39	; 0x27
    2676:	78 a5       	ldd	r23, Y+40	; 0x28
    2678:	89 a5       	ldd	r24, Y+41	; 0x29
    267a:	9a a5       	ldd	r25, Y+42	; 0x2a
    267c:	20 e0       	ldi	r18, 0x00	; 0
    267e:	30 e0       	ldi	r19, 0x00	; 0
    2680:	4a ef       	ldi	r20, 0xFA	; 250
    2682:	54 e4       	ldi	r21, 0x44	; 68
    2684:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2688:	dc 01       	movw	r26, r24
    268a:	cb 01       	movw	r24, r22
    268c:	8b a3       	std	Y+35, r24	; 0x23
    268e:	9c a3       	std	Y+36, r25	; 0x24
    2690:	ad a3       	std	Y+37, r26	; 0x25
    2692:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2694:	6b a1       	ldd	r22, Y+35	; 0x23
    2696:	7c a1       	ldd	r23, Y+36	; 0x24
    2698:	8d a1       	ldd	r24, Y+37	; 0x25
    269a:	9e a1       	ldd	r25, Y+38	; 0x26
    269c:	20 e0       	ldi	r18, 0x00	; 0
    269e:	30 e0       	ldi	r19, 0x00	; 0
    26a0:	40 e8       	ldi	r20, 0x80	; 128
    26a2:	5f e3       	ldi	r21, 0x3F	; 63
    26a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26a8:	88 23       	and	r24, r24
    26aa:	2c f4       	brge	.+10     	; 0x26b6 <LCD_displayCharacter+0x16a>
		__ticks = 1;
    26ac:	81 e0       	ldi	r24, 0x01	; 1
    26ae:	90 e0       	ldi	r25, 0x00	; 0
    26b0:	9a a3       	std	Y+34, r25	; 0x22
    26b2:	89 a3       	std	Y+33, r24	; 0x21
    26b4:	3f c0       	rjmp	.+126    	; 0x2734 <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    26b6:	6b a1       	ldd	r22, Y+35	; 0x23
    26b8:	7c a1       	ldd	r23, Y+36	; 0x24
    26ba:	8d a1       	ldd	r24, Y+37	; 0x25
    26bc:	9e a1       	ldd	r25, Y+38	; 0x26
    26be:	20 e0       	ldi	r18, 0x00	; 0
    26c0:	3f ef       	ldi	r19, 0xFF	; 255
    26c2:	4f e7       	ldi	r20, 0x7F	; 127
    26c4:	57 e4       	ldi	r21, 0x47	; 71
    26c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26ca:	18 16       	cp	r1, r24
    26cc:	4c f5       	brge	.+82     	; 0x2720 <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26ce:	6f a1       	ldd	r22, Y+39	; 0x27
    26d0:	78 a5       	ldd	r23, Y+40	; 0x28
    26d2:	89 a5       	ldd	r24, Y+41	; 0x29
    26d4:	9a a5       	ldd	r25, Y+42	; 0x2a
    26d6:	20 e0       	ldi	r18, 0x00	; 0
    26d8:	30 e0       	ldi	r19, 0x00	; 0
    26da:	40 e2       	ldi	r20, 0x20	; 32
    26dc:	51 e4       	ldi	r21, 0x41	; 65
    26de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26e2:	dc 01       	movw	r26, r24
    26e4:	cb 01       	movw	r24, r22
    26e6:	bc 01       	movw	r22, r24
    26e8:	cd 01       	movw	r24, r26
    26ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ee:	dc 01       	movw	r26, r24
    26f0:	cb 01       	movw	r24, r22
    26f2:	9a a3       	std	Y+34, r25	; 0x22
    26f4:	89 a3       	std	Y+33, r24	; 0x21
    26f6:	0f c0       	rjmp	.+30     	; 0x2716 <LCD_displayCharacter+0x1ca>
    26f8:	88 ec       	ldi	r24, 0xC8	; 200
    26fa:	90 e0       	ldi	r25, 0x00	; 0
    26fc:	98 a3       	std	Y+32, r25	; 0x20
    26fe:	8f 8f       	std	Y+31, r24	; 0x1f
    2700:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2702:	98 a1       	ldd	r25, Y+32	; 0x20
    2704:	01 97       	sbiw	r24, 0x01	; 1
    2706:	f1 f7       	brne	.-4      	; 0x2704 <LCD_displayCharacter+0x1b8>
    2708:	98 a3       	std	Y+32, r25	; 0x20
    270a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    270c:	89 a1       	ldd	r24, Y+33	; 0x21
    270e:	9a a1       	ldd	r25, Y+34	; 0x22
    2710:	01 97       	sbiw	r24, 0x01	; 1
    2712:	9a a3       	std	Y+34, r25	; 0x22
    2714:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2716:	89 a1       	ldd	r24, Y+33	; 0x21
    2718:	9a a1       	ldd	r25, Y+34	; 0x22
    271a:	00 97       	sbiw	r24, 0x00	; 0
    271c:	69 f7       	brne	.-38     	; 0x26f8 <LCD_displayCharacter+0x1ac>
    271e:	14 c0       	rjmp	.+40     	; 0x2748 <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2720:	6b a1       	ldd	r22, Y+35	; 0x23
    2722:	7c a1       	ldd	r23, Y+36	; 0x24
    2724:	8d a1       	ldd	r24, Y+37	; 0x25
    2726:	9e a1       	ldd	r25, Y+38	; 0x26
    2728:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    272c:	dc 01       	movw	r26, r24
    272e:	cb 01       	movw	r24, r22
    2730:	9a a3       	std	Y+34, r25	; 0x22
    2732:	89 a3       	std	Y+33, r24	; 0x21
    2734:	89 a1       	ldd	r24, Y+33	; 0x21
    2736:	9a a1       	ldd	r25, Y+34	; 0x22
    2738:	9e 8f       	std	Y+30, r25	; 0x1e
    273a:	8d 8f       	std	Y+29, r24	; 0x1d
    273c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    273e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2740:	01 97       	sbiw	r24, 0x01	; 1
    2742:	f1 f7       	brne	.-4      	; 0x2740 <LCD_displayCharacter+0x1f4>
    2744:	9e 8f       	std	Y+30, r25	; 0x1e
    2746:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    2748:	80 e0       	ldi	r24, 0x00	; 0
    274a:	69 ad       	ldd	r22, Y+57	; 0x39
    274c:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <GPIO_writePort>
    2750:	80 e0       	ldi	r24, 0x00	; 0
    2752:	90 e0       	ldi	r25, 0x00	; 0
    2754:	a0 e8       	ldi	r26, 0x80	; 128
    2756:	bf e3       	ldi	r27, 0x3F	; 63
    2758:	89 8f       	std	Y+25, r24	; 0x19
    275a:	9a 8f       	std	Y+26, r25	; 0x1a
    275c:	ab 8f       	std	Y+27, r26	; 0x1b
    275e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2760:	69 8d       	ldd	r22, Y+25	; 0x19
    2762:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2764:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2766:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2768:	20 e0       	ldi	r18, 0x00	; 0
    276a:	30 e0       	ldi	r19, 0x00	; 0
    276c:	4a ef       	ldi	r20, 0xFA	; 250
    276e:	54 e4       	ldi	r21, 0x44	; 68
    2770:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2774:	dc 01       	movw	r26, r24
    2776:	cb 01       	movw	r24, r22
    2778:	8d 8b       	std	Y+21, r24	; 0x15
    277a:	9e 8b       	std	Y+22, r25	; 0x16
    277c:	af 8b       	std	Y+23, r26	; 0x17
    277e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2780:	6d 89       	ldd	r22, Y+21	; 0x15
    2782:	7e 89       	ldd	r23, Y+22	; 0x16
    2784:	8f 89       	ldd	r24, Y+23	; 0x17
    2786:	98 8d       	ldd	r25, Y+24	; 0x18
    2788:	20 e0       	ldi	r18, 0x00	; 0
    278a:	30 e0       	ldi	r19, 0x00	; 0
    278c:	40 e8       	ldi	r20, 0x80	; 128
    278e:	5f e3       	ldi	r21, 0x3F	; 63
    2790:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2794:	88 23       	and	r24, r24
    2796:	2c f4       	brge	.+10     	; 0x27a2 <LCD_displayCharacter+0x256>
		__ticks = 1;
    2798:	81 e0       	ldi	r24, 0x01	; 1
    279a:	90 e0       	ldi	r25, 0x00	; 0
    279c:	9c 8b       	std	Y+20, r25	; 0x14
    279e:	8b 8b       	std	Y+19, r24	; 0x13
    27a0:	3f c0       	rjmp	.+126    	; 0x2820 <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    27a2:	6d 89       	ldd	r22, Y+21	; 0x15
    27a4:	7e 89       	ldd	r23, Y+22	; 0x16
    27a6:	8f 89       	ldd	r24, Y+23	; 0x17
    27a8:	98 8d       	ldd	r25, Y+24	; 0x18
    27aa:	20 e0       	ldi	r18, 0x00	; 0
    27ac:	3f ef       	ldi	r19, 0xFF	; 255
    27ae:	4f e7       	ldi	r20, 0x7F	; 127
    27b0:	57 e4       	ldi	r21, 0x47	; 71
    27b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27b6:	18 16       	cp	r1, r24
    27b8:	4c f5       	brge	.+82     	; 0x280c <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27ba:	69 8d       	ldd	r22, Y+25	; 0x19
    27bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27c2:	20 e0       	ldi	r18, 0x00	; 0
    27c4:	30 e0       	ldi	r19, 0x00	; 0
    27c6:	40 e2       	ldi	r20, 0x20	; 32
    27c8:	51 e4       	ldi	r21, 0x41	; 65
    27ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ce:	dc 01       	movw	r26, r24
    27d0:	cb 01       	movw	r24, r22
    27d2:	bc 01       	movw	r22, r24
    27d4:	cd 01       	movw	r24, r26
    27d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27da:	dc 01       	movw	r26, r24
    27dc:	cb 01       	movw	r24, r22
    27de:	9c 8b       	std	Y+20, r25	; 0x14
    27e0:	8b 8b       	std	Y+19, r24	; 0x13
    27e2:	0f c0       	rjmp	.+30     	; 0x2802 <LCD_displayCharacter+0x2b6>
    27e4:	88 ec       	ldi	r24, 0xC8	; 200
    27e6:	90 e0       	ldi	r25, 0x00	; 0
    27e8:	9a 8b       	std	Y+18, r25	; 0x12
    27ea:	89 8b       	std	Y+17, r24	; 0x11
    27ec:	89 89       	ldd	r24, Y+17	; 0x11
    27ee:	9a 89       	ldd	r25, Y+18	; 0x12
    27f0:	01 97       	sbiw	r24, 0x01	; 1
    27f2:	f1 f7       	brne	.-4      	; 0x27f0 <LCD_displayCharacter+0x2a4>
    27f4:	9a 8b       	std	Y+18, r25	; 0x12
    27f6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27f8:	8b 89       	ldd	r24, Y+19	; 0x13
    27fa:	9c 89       	ldd	r25, Y+20	; 0x14
    27fc:	01 97       	sbiw	r24, 0x01	; 1
    27fe:	9c 8b       	std	Y+20, r25	; 0x14
    2800:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2802:	8b 89       	ldd	r24, Y+19	; 0x13
    2804:	9c 89       	ldd	r25, Y+20	; 0x14
    2806:	00 97       	sbiw	r24, 0x00	; 0
    2808:	69 f7       	brne	.-38     	; 0x27e4 <LCD_displayCharacter+0x298>
    280a:	14 c0       	rjmp	.+40     	; 0x2834 <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    280c:	6d 89       	ldd	r22, Y+21	; 0x15
    280e:	7e 89       	ldd	r23, Y+22	; 0x16
    2810:	8f 89       	ldd	r24, Y+23	; 0x17
    2812:	98 8d       	ldd	r25, Y+24	; 0x18
    2814:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2818:	dc 01       	movw	r26, r24
    281a:	cb 01       	movw	r24, r22
    281c:	9c 8b       	std	Y+20, r25	; 0x14
    281e:	8b 8b       	std	Y+19, r24	; 0x13
    2820:	8b 89       	ldd	r24, Y+19	; 0x13
    2822:	9c 89       	ldd	r25, Y+20	; 0x14
    2824:	98 8b       	std	Y+16, r25	; 0x10
    2826:	8f 87       	std	Y+15, r24	; 0x0f
    2828:	8f 85       	ldd	r24, Y+15	; 0x0f
    282a:	98 89       	ldd	r25, Y+16	; 0x10
    282c:	01 97       	sbiw	r24, 0x01	; 1
    282e:	f1 f7       	brne	.-4      	; 0x282c <LCD_displayCharacter+0x2e0>
    2830:	98 8b       	std	Y+16, r25	; 0x10
    2832:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2834:	81 e0       	ldi	r24, 0x01	; 1
    2836:	62 e0       	ldi	r22, 0x02	; 2
    2838:	40 e0       	ldi	r20, 0x00	; 0
    283a:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <GPIO_writePin>
    283e:	80 e0       	ldi	r24, 0x00	; 0
    2840:	90 e0       	ldi	r25, 0x00	; 0
    2842:	a0 e8       	ldi	r26, 0x80	; 128
    2844:	bf e3       	ldi	r27, 0x3F	; 63
    2846:	8b 87       	std	Y+11, r24	; 0x0b
    2848:	9c 87       	std	Y+12, r25	; 0x0c
    284a:	ad 87       	std	Y+13, r26	; 0x0d
    284c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    284e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2850:	7c 85       	ldd	r23, Y+12	; 0x0c
    2852:	8d 85       	ldd	r24, Y+13	; 0x0d
    2854:	9e 85       	ldd	r25, Y+14	; 0x0e
    2856:	20 e0       	ldi	r18, 0x00	; 0
    2858:	30 e0       	ldi	r19, 0x00	; 0
    285a:	4a ef       	ldi	r20, 0xFA	; 250
    285c:	54 e4       	ldi	r21, 0x44	; 68
    285e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2862:	dc 01       	movw	r26, r24
    2864:	cb 01       	movw	r24, r22
    2866:	8f 83       	std	Y+7, r24	; 0x07
    2868:	98 87       	std	Y+8, r25	; 0x08
    286a:	a9 87       	std	Y+9, r26	; 0x09
    286c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    286e:	6f 81       	ldd	r22, Y+7	; 0x07
    2870:	78 85       	ldd	r23, Y+8	; 0x08
    2872:	89 85       	ldd	r24, Y+9	; 0x09
    2874:	9a 85       	ldd	r25, Y+10	; 0x0a
    2876:	20 e0       	ldi	r18, 0x00	; 0
    2878:	30 e0       	ldi	r19, 0x00	; 0
    287a:	40 e8       	ldi	r20, 0x80	; 128
    287c:	5f e3       	ldi	r21, 0x3F	; 63
    287e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2882:	88 23       	and	r24, r24
    2884:	2c f4       	brge	.+10     	; 0x2890 <LCD_displayCharacter+0x344>
		__ticks = 1;
    2886:	81 e0       	ldi	r24, 0x01	; 1
    2888:	90 e0       	ldi	r25, 0x00	; 0
    288a:	9e 83       	std	Y+6, r25	; 0x06
    288c:	8d 83       	std	Y+5, r24	; 0x05
    288e:	3f c0       	rjmp	.+126    	; 0x290e <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    2890:	6f 81       	ldd	r22, Y+7	; 0x07
    2892:	78 85       	ldd	r23, Y+8	; 0x08
    2894:	89 85       	ldd	r24, Y+9	; 0x09
    2896:	9a 85       	ldd	r25, Y+10	; 0x0a
    2898:	20 e0       	ldi	r18, 0x00	; 0
    289a:	3f ef       	ldi	r19, 0xFF	; 255
    289c:	4f e7       	ldi	r20, 0x7F	; 127
    289e:	57 e4       	ldi	r21, 0x47	; 71
    28a0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28a4:	18 16       	cp	r1, r24
    28a6:	4c f5       	brge	.+82     	; 0x28fa <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    28aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    28ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    28ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    28b0:	20 e0       	ldi	r18, 0x00	; 0
    28b2:	30 e0       	ldi	r19, 0x00	; 0
    28b4:	40 e2       	ldi	r20, 0x20	; 32
    28b6:	51 e4       	ldi	r21, 0x41	; 65
    28b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28bc:	dc 01       	movw	r26, r24
    28be:	cb 01       	movw	r24, r22
    28c0:	bc 01       	movw	r22, r24
    28c2:	cd 01       	movw	r24, r26
    28c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28c8:	dc 01       	movw	r26, r24
    28ca:	cb 01       	movw	r24, r22
    28cc:	9e 83       	std	Y+6, r25	; 0x06
    28ce:	8d 83       	std	Y+5, r24	; 0x05
    28d0:	0f c0       	rjmp	.+30     	; 0x28f0 <LCD_displayCharacter+0x3a4>
    28d2:	88 ec       	ldi	r24, 0xC8	; 200
    28d4:	90 e0       	ldi	r25, 0x00	; 0
    28d6:	9c 83       	std	Y+4, r25	; 0x04
    28d8:	8b 83       	std	Y+3, r24	; 0x03
    28da:	8b 81       	ldd	r24, Y+3	; 0x03
    28dc:	9c 81       	ldd	r25, Y+4	; 0x04
    28de:	01 97       	sbiw	r24, 0x01	; 1
    28e0:	f1 f7       	brne	.-4      	; 0x28de <LCD_displayCharacter+0x392>
    28e2:	9c 83       	std	Y+4, r25	; 0x04
    28e4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28e6:	8d 81       	ldd	r24, Y+5	; 0x05
    28e8:	9e 81       	ldd	r25, Y+6	; 0x06
    28ea:	01 97       	sbiw	r24, 0x01	; 1
    28ec:	9e 83       	std	Y+6, r25	; 0x06
    28ee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28f0:	8d 81       	ldd	r24, Y+5	; 0x05
    28f2:	9e 81       	ldd	r25, Y+6	; 0x06
    28f4:	00 97       	sbiw	r24, 0x00	; 0
    28f6:	69 f7       	brne	.-38     	; 0x28d2 <LCD_displayCharacter+0x386>
    28f8:	14 c0       	rjmp	.+40     	; 0x2922 <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28fa:	6f 81       	ldd	r22, Y+7	; 0x07
    28fc:	78 85       	ldd	r23, Y+8	; 0x08
    28fe:	89 85       	ldd	r24, Y+9	; 0x09
    2900:	9a 85       	ldd	r25, Y+10	; 0x0a
    2902:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2906:	dc 01       	movw	r26, r24
    2908:	cb 01       	movw	r24, r22
    290a:	9e 83       	std	Y+6, r25	; 0x06
    290c:	8d 83       	std	Y+5, r24	; 0x05
    290e:	8d 81       	ldd	r24, Y+5	; 0x05
    2910:	9e 81       	ldd	r25, Y+6	; 0x06
    2912:	9a 83       	std	Y+2, r25	; 0x02
    2914:	89 83       	std	Y+1, r24	; 0x01
    2916:	89 81       	ldd	r24, Y+1	; 0x01
    2918:	9a 81       	ldd	r25, Y+2	; 0x02
    291a:	01 97       	sbiw	r24, 0x01	; 1
    291c:	f1 f7       	brne	.-4      	; 0x291a <LCD_displayCharacter+0x3ce>
    291e:	9a 83       	std	Y+2, r25	; 0x02
    2920:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    2922:	e9 96       	adiw	r28, 0x39	; 57
    2924:	0f b6       	in	r0, 0x3f	; 63
    2926:	f8 94       	cli
    2928:	de bf       	out	0x3e, r29	; 62
    292a:	0f be       	out	0x3f, r0	; 63
    292c:	cd bf       	out	0x3d, r28	; 61
    292e:	cf 91       	pop	r28
    2930:	df 91       	pop	r29
    2932:	08 95       	ret

00002934 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2934:	df 93       	push	r29
    2936:	cf 93       	push	r28
    2938:	00 d0       	rcall	.+0      	; 0x293a <LCD_displayString+0x6>
    293a:	0f 92       	push	r0
    293c:	cd b7       	in	r28, 0x3d	; 61
    293e:	de b7       	in	r29, 0x3e	; 62
    2940:	9b 83       	std	Y+3, r25	; 0x03
    2942:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2944:	19 82       	std	Y+1, r1	; 0x01
    2946:	0e c0       	rjmp	.+28     	; 0x2964 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2948:	89 81       	ldd	r24, Y+1	; 0x01
    294a:	28 2f       	mov	r18, r24
    294c:	30 e0       	ldi	r19, 0x00	; 0
    294e:	8a 81       	ldd	r24, Y+2	; 0x02
    2950:	9b 81       	ldd	r25, Y+3	; 0x03
    2952:	fc 01       	movw	r30, r24
    2954:	e2 0f       	add	r30, r18
    2956:	f3 1f       	adc	r31, r19
    2958:	80 81       	ld	r24, Z
    295a:	0e 94 a6 12 	call	0x254c	; 0x254c <LCD_displayCharacter>
		i++;
    295e:	89 81       	ldd	r24, Y+1	; 0x01
    2960:	8f 5f       	subi	r24, 0xFF	; 255
    2962:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2964:	89 81       	ldd	r24, Y+1	; 0x01
    2966:	28 2f       	mov	r18, r24
    2968:	30 e0       	ldi	r19, 0x00	; 0
    296a:	8a 81       	ldd	r24, Y+2	; 0x02
    296c:	9b 81       	ldd	r25, Y+3	; 0x03
    296e:	fc 01       	movw	r30, r24
    2970:	e2 0f       	add	r30, r18
    2972:	f3 1f       	adc	r31, r19
    2974:	80 81       	ld	r24, Z
    2976:	88 23       	and	r24, r24
    2978:	39 f7       	brne	.-50     	; 0x2948 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    297a:	0f 90       	pop	r0
    297c:	0f 90       	pop	r0
    297e:	0f 90       	pop	r0
    2980:	cf 91       	pop	r28
    2982:	df 91       	pop	r29
    2984:	08 95       	ret

00002986 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2986:	df 93       	push	r29
    2988:	cf 93       	push	r28
    298a:	00 d0       	rcall	.+0      	; 0x298c <LCD_moveCursor+0x6>
    298c:	00 d0       	rcall	.+0      	; 0x298e <LCD_moveCursor+0x8>
    298e:	0f 92       	push	r0
    2990:	cd b7       	in	r28, 0x3d	; 61
    2992:	de b7       	in	r29, 0x3e	; 62
    2994:	8a 83       	std	Y+2, r24	; 0x02
    2996:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2998:	8a 81       	ldd	r24, Y+2	; 0x02
    299a:	28 2f       	mov	r18, r24
    299c:	30 e0       	ldi	r19, 0x00	; 0
    299e:	3d 83       	std	Y+5, r19	; 0x05
    29a0:	2c 83       	std	Y+4, r18	; 0x04
    29a2:	8c 81       	ldd	r24, Y+4	; 0x04
    29a4:	9d 81       	ldd	r25, Y+5	; 0x05
    29a6:	81 30       	cpi	r24, 0x01	; 1
    29a8:	91 05       	cpc	r25, r1
    29aa:	c1 f0       	breq	.+48     	; 0x29dc <LCD_moveCursor+0x56>
    29ac:	2c 81       	ldd	r18, Y+4	; 0x04
    29ae:	3d 81       	ldd	r19, Y+5	; 0x05
    29b0:	22 30       	cpi	r18, 0x02	; 2
    29b2:	31 05       	cpc	r19, r1
    29b4:	2c f4       	brge	.+10     	; 0x29c0 <LCD_moveCursor+0x3a>
    29b6:	8c 81       	ldd	r24, Y+4	; 0x04
    29b8:	9d 81       	ldd	r25, Y+5	; 0x05
    29ba:	00 97       	sbiw	r24, 0x00	; 0
    29bc:	61 f0       	breq	.+24     	; 0x29d6 <LCD_moveCursor+0x50>
    29be:	19 c0       	rjmp	.+50     	; 0x29f2 <LCD_moveCursor+0x6c>
    29c0:	2c 81       	ldd	r18, Y+4	; 0x04
    29c2:	3d 81       	ldd	r19, Y+5	; 0x05
    29c4:	22 30       	cpi	r18, 0x02	; 2
    29c6:	31 05       	cpc	r19, r1
    29c8:	69 f0       	breq	.+26     	; 0x29e4 <LCD_moveCursor+0x5e>
    29ca:	8c 81       	ldd	r24, Y+4	; 0x04
    29cc:	9d 81       	ldd	r25, Y+5	; 0x05
    29ce:	83 30       	cpi	r24, 0x03	; 3
    29d0:	91 05       	cpc	r25, r1
    29d2:	61 f0       	breq	.+24     	; 0x29ec <LCD_moveCursor+0x66>
    29d4:	0e c0       	rjmp	.+28     	; 0x29f2 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    29d6:	8b 81       	ldd	r24, Y+3	; 0x03
    29d8:	89 83       	std	Y+1, r24	; 0x01
    29da:	0b c0       	rjmp	.+22     	; 0x29f2 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    29dc:	8b 81       	ldd	r24, Y+3	; 0x03
    29de:	80 5c       	subi	r24, 0xC0	; 192
    29e0:	89 83       	std	Y+1, r24	; 0x01
    29e2:	07 c0       	rjmp	.+14     	; 0x29f2 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    29e4:	8b 81       	ldd	r24, Y+3	; 0x03
    29e6:	80 5f       	subi	r24, 0xF0	; 240
    29e8:	89 83       	std	Y+1, r24	; 0x01
    29ea:	03 c0       	rjmp	.+6      	; 0x29f2 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    29ec:	8b 81       	ldd	r24, Y+3	; 0x03
    29ee:	80 5b       	subi	r24, 0xB0	; 176
    29f0:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    29f2:	89 81       	ldd	r24, Y+1	; 0x01
    29f4:	80 68       	ori	r24, 0x80	; 128
    29f6:	0e 94 b2 10 	call	0x2164	; 0x2164 <LCD_sendCommand>
}
    29fa:	0f 90       	pop	r0
    29fc:	0f 90       	pop	r0
    29fe:	0f 90       	pop	r0
    2a00:	0f 90       	pop	r0
    2a02:	0f 90       	pop	r0
    2a04:	cf 91       	pop	r28
    2a06:	df 91       	pop	r29
    2a08:	08 95       	ret

00002a0a <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2a0a:	df 93       	push	r29
    2a0c:	cf 93       	push	r28
    2a0e:	00 d0       	rcall	.+0      	; 0x2a10 <LCD_displayStringRowColumn+0x6>
    2a10:	00 d0       	rcall	.+0      	; 0x2a12 <LCD_displayStringRowColumn+0x8>
    2a12:	cd b7       	in	r28, 0x3d	; 61
    2a14:	de b7       	in	r29, 0x3e	; 62
    2a16:	89 83       	std	Y+1, r24	; 0x01
    2a18:	6a 83       	std	Y+2, r22	; 0x02
    2a1a:	5c 83       	std	Y+4, r21	; 0x04
    2a1c:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2a1e:	89 81       	ldd	r24, Y+1	; 0x01
    2a20:	6a 81       	ldd	r22, Y+2	; 0x02
    2a22:	0e 94 c3 14 	call	0x2986	; 0x2986 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2a26:	8b 81       	ldd	r24, Y+3	; 0x03
    2a28:	9c 81       	ldd	r25, Y+4	; 0x04
    2a2a:	0e 94 9a 14 	call	0x2934	; 0x2934 <LCD_displayString>
}
    2a2e:	0f 90       	pop	r0
    2a30:	0f 90       	pop	r0
    2a32:	0f 90       	pop	r0
    2a34:	0f 90       	pop	r0
    2a36:	cf 91       	pop	r28
    2a38:	df 91       	pop	r29
    2a3a:	08 95       	ret

00002a3c <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2a3c:	df 93       	push	r29
    2a3e:	cf 93       	push	r28
    2a40:	cd b7       	in	r28, 0x3d	; 61
    2a42:	de b7       	in	r29, 0x3e	; 62
    2a44:	62 97       	sbiw	r28, 0x12	; 18
    2a46:	0f b6       	in	r0, 0x3f	; 63
    2a48:	f8 94       	cli
    2a4a:	de bf       	out	0x3e, r29	; 62
    2a4c:	0f be       	out	0x3f, r0	; 63
    2a4e:	cd bf       	out	0x3d, r28	; 61
    2a50:	9a 8b       	std	Y+18, r25	; 0x12
    2a52:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2a54:	89 89       	ldd	r24, Y+17	; 0x11
    2a56:	9a 89       	ldd	r25, Y+18	; 0x12
    2a58:	9e 01       	movw	r18, r28
    2a5a:	2f 5f       	subi	r18, 0xFF	; 255
    2a5c:	3f 4f       	sbci	r19, 0xFF	; 255
    2a5e:	b9 01       	movw	r22, r18
    2a60:	4a e0       	ldi	r20, 0x0A	; 10
    2a62:	50 e0       	ldi	r21, 0x00	; 0
    2a64:	0e 94 79 19 	call	0x32f2	; 0x32f2 <itoa>
   LCD_displayString(buff); /* Display the string */
    2a68:	ce 01       	movw	r24, r28
    2a6a:	01 96       	adiw	r24, 0x01	; 1
    2a6c:	0e 94 9a 14 	call	0x2934	; 0x2934 <LCD_displayString>
}
    2a70:	62 96       	adiw	r28, 0x12	; 18
    2a72:	0f b6       	in	r0, 0x3f	; 63
    2a74:	f8 94       	cli
    2a76:	de bf       	out	0x3e, r29	; 62
    2a78:	0f be       	out	0x3f, r0	; 63
    2a7a:	cd bf       	out	0x3d, r28	; 61
    2a7c:	cf 91       	pop	r28
    2a7e:	df 91       	pop	r29
    2a80:	08 95       	ret

00002a82 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2a82:	df 93       	push	r29
    2a84:	cf 93       	push	r28
    2a86:	cd b7       	in	r28, 0x3d	; 61
    2a88:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2a8a:	81 e0       	ldi	r24, 0x01	; 1
    2a8c:	0e 94 b2 10 	call	0x2164	; 0x2164 <LCD_sendCommand>
}
    2a90:	cf 91       	pop	r28
    2a92:	df 91       	pop	r29
    2a94:	08 95       	ret

00002a96 <__vector_19>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

/******************************************* Timer0 ISR ***************************************/
ISR(TIMER0_COMP_vect) {
    2a96:	1f 92       	push	r1
    2a98:	0f 92       	push	r0
    2a9a:	0f b6       	in	r0, 0x3f	; 63
    2a9c:	0f 92       	push	r0
    2a9e:	11 24       	eor	r1, r1
    2aa0:	2f 93       	push	r18
    2aa2:	3f 93       	push	r19
    2aa4:	4f 93       	push	r20
    2aa6:	5f 93       	push	r21
    2aa8:	6f 93       	push	r22
    2aaa:	7f 93       	push	r23
    2aac:	8f 93       	push	r24
    2aae:	9f 93       	push	r25
    2ab0:	af 93       	push	r26
    2ab2:	bf 93       	push	r27
    2ab4:	ef 93       	push	r30
    2ab6:	ff 93       	push	r31
    2ab8:	df 93       	push	r29
    2aba:	cf 93       	push	r28
    2abc:	cd b7       	in	r28, 0x3d	; 61
    2abe:	de b7       	in	r29, 0x3e	; 62
	if (g_timer0_callBackPtr != NULL_PTR) {
    2ac0:	80 91 06 01 	lds	r24, 0x0106
    2ac4:	90 91 07 01 	lds	r25, 0x0107
    2ac8:	00 97       	sbiw	r24, 0x00	; 0
    2aca:	29 f0       	breq	.+10     	; 0x2ad6 <__vector_19+0x40>
		/* Call the Call Back function in the application after the edge is detected */
		(*g_timer0_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2acc:	e0 91 06 01 	lds	r30, 0x0106
    2ad0:	f0 91 07 01 	lds	r31, 0x0107
    2ad4:	09 95       	icall
	}
}
    2ad6:	cf 91       	pop	r28
    2ad8:	df 91       	pop	r29
    2ada:	ff 91       	pop	r31
    2adc:	ef 91       	pop	r30
    2ade:	bf 91       	pop	r27
    2ae0:	af 91       	pop	r26
    2ae2:	9f 91       	pop	r25
    2ae4:	8f 91       	pop	r24
    2ae6:	7f 91       	pop	r23
    2ae8:	6f 91       	pop	r22
    2aea:	5f 91       	pop	r21
    2aec:	4f 91       	pop	r20
    2aee:	3f 91       	pop	r19
    2af0:	2f 91       	pop	r18
    2af2:	0f 90       	pop	r0
    2af4:	0f be       	out	0x3f, r0	; 63
    2af6:	0f 90       	pop	r0
    2af8:	1f 90       	pop	r1
    2afa:	18 95       	reti

00002afc <__vector_9>:
ISR(TIMER0_OVF_vect) {
    2afc:	1f 92       	push	r1
    2afe:	0f 92       	push	r0
    2b00:	0f b6       	in	r0, 0x3f	; 63
    2b02:	0f 92       	push	r0
    2b04:	11 24       	eor	r1, r1
    2b06:	2f 93       	push	r18
    2b08:	3f 93       	push	r19
    2b0a:	4f 93       	push	r20
    2b0c:	5f 93       	push	r21
    2b0e:	6f 93       	push	r22
    2b10:	7f 93       	push	r23
    2b12:	8f 93       	push	r24
    2b14:	9f 93       	push	r25
    2b16:	af 93       	push	r26
    2b18:	bf 93       	push	r27
    2b1a:	ef 93       	push	r30
    2b1c:	ff 93       	push	r31
    2b1e:	df 93       	push	r29
    2b20:	cf 93       	push	r28
    2b22:	cd b7       	in	r28, 0x3d	; 61
    2b24:	de b7       	in	r29, 0x3e	; 62
	if (g_timer0_callBackPtr != NULL_PTR) {
    2b26:	80 91 06 01 	lds	r24, 0x0106
    2b2a:	90 91 07 01 	lds	r25, 0x0107
    2b2e:	00 97       	sbiw	r24, 0x00	; 0
    2b30:	29 f0       	breq	.+10     	; 0x2b3c <__vector_9+0x40>
		/* Call the Call Back function in the application after the edge is detected */
		(*g_timer0_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2b32:	e0 91 06 01 	lds	r30, 0x0106
    2b36:	f0 91 07 01 	lds	r31, 0x0107
    2b3a:	09 95       	icall
	}
}
    2b3c:	cf 91       	pop	r28
    2b3e:	df 91       	pop	r29
    2b40:	ff 91       	pop	r31
    2b42:	ef 91       	pop	r30
    2b44:	bf 91       	pop	r27
    2b46:	af 91       	pop	r26
    2b48:	9f 91       	pop	r25
    2b4a:	8f 91       	pop	r24
    2b4c:	7f 91       	pop	r23
    2b4e:	6f 91       	pop	r22
    2b50:	5f 91       	pop	r21
    2b52:	4f 91       	pop	r20
    2b54:	3f 91       	pop	r19
    2b56:	2f 91       	pop	r18
    2b58:	0f 90       	pop	r0
    2b5a:	0f be       	out	0x3f, r0	; 63
    2b5c:	0f 90       	pop	r0
    2b5e:	1f 90       	pop	r1
    2b60:	18 95       	reti

00002b62 <__vector_6>:

/******************************************* Timer1 ISR ***************************************/

ISR(TIMER1_COMPA_vect) {
    2b62:	1f 92       	push	r1
    2b64:	0f 92       	push	r0
    2b66:	0f b6       	in	r0, 0x3f	; 63
    2b68:	0f 92       	push	r0
    2b6a:	11 24       	eor	r1, r1
    2b6c:	2f 93       	push	r18
    2b6e:	3f 93       	push	r19
    2b70:	4f 93       	push	r20
    2b72:	5f 93       	push	r21
    2b74:	6f 93       	push	r22
    2b76:	7f 93       	push	r23
    2b78:	8f 93       	push	r24
    2b7a:	9f 93       	push	r25
    2b7c:	af 93       	push	r26
    2b7e:	bf 93       	push	r27
    2b80:	ef 93       	push	r30
    2b82:	ff 93       	push	r31
    2b84:	df 93       	push	r29
    2b86:	cf 93       	push	r28
    2b88:	cd b7       	in	r28, 0x3d	; 61
    2b8a:	de b7       	in	r29, 0x3e	; 62
	if (g_timer1_callBackPtr != NULL_PTR) {
    2b8c:	80 91 08 01 	lds	r24, 0x0108
    2b90:	90 91 09 01 	lds	r25, 0x0109
    2b94:	00 97       	sbiw	r24, 0x00	; 0
    2b96:	29 f0       	breq	.+10     	; 0x2ba2 <__vector_6+0x40>
		/* Call the Call Back function in the application after the edge is detected */
		(*g_timer1_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2b98:	e0 91 08 01 	lds	r30, 0x0108
    2b9c:	f0 91 09 01 	lds	r31, 0x0109
    2ba0:	09 95       	icall
	}
}
    2ba2:	cf 91       	pop	r28
    2ba4:	df 91       	pop	r29
    2ba6:	ff 91       	pop	r31
    2ba8:	ef 91       	pop	r30
    2baa:	bf 91       	pop	r27
    2bac:	af 91       	pop	r26
    2bae:	9f 91       	pop	r25
    2bb0:	8f 91       	pop	r24
    2bb2:	7f 91       	pop	r23
    2bb4:	6f 91       	pop	r22
    2bb6:	5f 91       	pop	r21
    2bb8:	4f 91       	pop	r20
    2bba:	3f 91       	pop	r19
    2bbc:	2f 91       	pop	r18
    2bbe:	0f 90       	pop	r0
    2bc0:	0f be       	out	0x3f, r0	; 63
    2bc2:	0f 90       	pop	r0
    2bc4:	1f 90       	pop	r1
    2bc6:	18 95       	reti

00002bc8 <__vector_8>:
ISR(TIMER1_OVF_vect) {
    2bc8:	1f 92       	push	r1
    2bca:	0f 92       	push	r0
    2bcc:	0f b6       	in	r0, 0x3f	; 63
    2bce:	0f 92       	push	r0
    2bd0:	11 24       	eor	r1, r1
    2bd2:	2f 93       	push	r18
    2bd4:	3f 93       	push	r19
    2bd6:	4f 93       	push	r20
    2bd8:	5f 93       	push	r21
    2bda:	6f 93       	push	r22
    2bdc:	7f 93       	push	r23
    2bde:	8f 93       	push	r24
    2be0:	9f 93       	push	r25
    2be2:	af 93       	push	r26
    2be4:	bf 93       	push	r27
    2be6:	ef 93       	push	r30
    2be8:	ff 93       	push	r31
    2bea:	df 93       	push	r29
    2bec:	cf 93       	push	r28
    2bee:	cd b7       	in	r28, 0x3d	; 61
    2bf0:	de b7       	in	r29, 0x3e	; 62
	if (g_timer1_callBackPtr != NULL_PTR) {
    2bf2:	80 91 08 01 	lds	r24, 0x0108
    2bf6:	90 91 09 01 	lds	r25, 0x0109
    2bfa:	00 97       	sbiw	r24, 0x00	; 0
    2bfc:	29 f0       	breq	.+10     	; 0x2c08 <__vector_8+0x40>
		/* Call the Call Back function in the application after the edge is detected */
		(*g_timer1_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2bfe:	e0 91 08 01 	lds	r30, 0x0108
    2c02:	f0 91 09 01 	lds	r31, 0x0109
    2c06:	09 95       	icall
	}
}
    2c08:	cf 91       	pop	r28
    2c0a:	df 91       	pop	r29
    2c0c:	ff 91       	pop	r31
    2c0e:	ef 91       	pop	r30
    2c10:	bf 91       	pop	r27
    2c12:	af 91       	pop	r26
    2c14:	9f 91       	pop	r25
    2c16:	8f 91       	pop	r24
    2c18:	7f 91       	pop	r23
    2c1a:	6f 91       	pop	r22
    2c1c:	5f 91       	pop	r21
    2c1e:	4f 91       	pop	r20
    2c20:	3f 91       	pop	r19
    2c22:	2f 91       	pop	r18
    2c24:	0f 90       	pop	r0
    2c26:	0f be       	out	0x3f, r0	; 63
    2c28:	0f 90       	pop	r0
    2c2a:	1f 90       	pop	r1
    2c2c:	18 95       	reti

00002c2e <__vector_3>:

/******************************************* Timer2 ISR ***************************************/

ISR(TIMER2_COMP_vect) {
    2c2e:	1f 92       	push	r1
    2c30:	0f 92       	push	r0
    2c32:	0f b6       	in	r0, 0x3f	; 63
    2c34:	0f 92       	push	r0
    2c36:	11 24       	eor	r1, r1
    2c38:	2f 93       	push	r18
    2c3a:	3f 93       	push	r19
    2c3c:	4f 93       	push	r20
    2c3e:	5f 93       	push	r21
    2c40:	6f 93       	push	r22
    2c42:	7f 93       	push	r23
    2c44:	8f 93       	push	r24
    2c46:	9f 93       	push	r25
    2c48:	af 93       	push	r26
    2c4a:	bf 93       	push	r27
    2c4c:	ef 93       	push	r30
    2c4e:	ff 93       	push	r31
    2c50:	df 93       	push	r29
    2c52:	cf 93       	push	r28
    2c54:	cd b7       	in	r28, 0x3d	; 61
    2c56:	de b7       	in	r29, 0x3e	; 62
	if (g_timer2_callBackPtr != NULL_PTR) {
    2c58:	80 91 0a 01 	lds	r24, 0x010A
    2c5c:	90 91 0b 01 	lds	r25, 0x010B
    2c60:	00 97       	sbiw	r24, 0x00	; 0
    2c62:	29 f0       	breq	.+10     	; 0x2c6e <__vector_3+0x40>
		/* Call the Call Back function in the application after the edge is detected */
		(*g_timer2_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2c64:	e0 91 0a 01 	lds	r30, 0x010A
    2c68:	f0 91 0b 01 	lds	r31, 0x010B
    2c6c:	09 95       	icall
	}
}
    2c6e:	cf 91       	pop	r28
    2c70:	df 91       	pop	r29
    2c72:	ff 91       	pop	r31
    2c74:	ef 91       	pop	r30
    2c76:	bf 91       	pop	r27
    2c78:	af 91       	pop	r26
    2c7a:	9f 91       	pop	r25
    2c7c:	8f 91       	pop	r24
    2c7e:	7f 91       	pop	r23
    2c80:	6f 91       	pop	r22
    2c82:	5f 91       	pop	r21
    2c84:	4f 91       	pop	r20
    2c86:	3f 91       	pop	r19
    2c88:	2f 91       	pop	r18
    2c8a:	0f 90       	pop	r0
    2c8c:	0f be       	out	0x3f, r0	; 63
    2c8e:	0f 90       	pop	r0
    2c90:	1f 90       	pop	r1
    2c92:	18 95       	reti

00002c94 <__vector_4>:
ISR(TIMER2_OVF_vect) {
    2c94:	1f 92       	push	r1
    2c96:	0f 92       	push	r0
    2c98:	0f b6       	in	r0, 0x3f	; 63
    2c9a:	0f 92       	push	r0
    2c9c:	11 24       	eor	r1, r1
    2c9e:	2f 93       	push	r18
    2ca0:	3f 93       	push	r19
    2ca2:	4f 93       	push	r20
    2ca4:	5f 93       	push	r21
    2ca6:	6f 93       	push	r22
    2ca8:	7f 93       	push	r23
    2caa:	8f 93       	push	r24
    2cac:	9f 93       	push	r25
    2cae:	af 93       	push	r26
    2cb0:	bf 93       	push	r27
    2cb2:	ef 93       	push	r30
    2cb4:	ff 93       	push	r31
    2cb6:	df 93       	push	r29
    2cb8:	cf 93       	push	r28
    2cba:	cd b7       	in	r28, 0x3d	; 61
    2cbc:	de b7       	in	r29, 0x3e	; 62
	if (g_timer2_callBackPtr != NULL_PTR) {
    2cbe:	80 91 0a 01 	lds	r24, 0x010A
    2cc2:	90 91 0b 01 	lds	r25, 0x010B
    2cc6:	00 97       	sbiw	r24, 0x00	; 0
    2cc8:	29 f0       	breq	.+10     	; 0x2cd4 <__vector_4+0x40>
		/* Call the Call Back function in the application after the edge is detected */
		(*g_timer2_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2cca:	e0 91 0a 01 	lds	r30, 0x010A
    2cce:	f0 91 0b 01 	lds	r31, 0x010B
    2cd2:	09 95       	icall
	}
}
    2cd4:	cf 91       	pop	r28
    2cd6:	df 91       	pop	r29
    2cd8:	ff 91       	pop	r31
    2cda:	ef 91       	pop	r30
    2cdc:	bf 91       	pop	r27
    2cde:	af 91       	pop	r26
    2ce0:	9f 91       	pop	r25
    2ce2:	8f 91       	pop	r24
    2ce4:	7f 91       	pop	r23
    2ce6:	6f 91       	pop	r22
    2ce8:	5f 91       	pop	r21
    2cea:	4f 91       	pop	r20
    2cec:	3f 91       	pop	r19
    2cee:	2f 91       	pop	r18
    2cf0:	0f 90       	pop	r0
    2cf2:	0f be       	out	0x3f, r0	; 63
    2cf4:	0f 90       	pop	r0
    2cf6:	1f 90       	pop	r1
    2cf8:	18 95       	reti

00002cfa <Timer_init>:
 * 	3. Set the required presca le.
 * 	4. Enable the Interrupt.
 * 	5. Set the intial value for timer
 */

void Timer_init(const Timer_ConfigType *Config_Ptr) {
    2cfa:	df 93       	push	r29
    2cfc:	cf 93       	push	r28
    2cfe:	00 d0       	rcall	.+0      	; 0x2d00 <Timer_init+0x6>
    2d00:	00 d0       	rcall	.+0      	; 0x2d02 <Timer_init+0x8>
    2d02:	cd b7       	in	r28, 0x3d	; 61
    2d04:	de b7       	in	r29, 0x3e	; 62
    2d06:	9a 83       	std	Y+2, r25	; 0x02
    2d08:	89 83       	std	Y+1, r24	; 0x01
	switch (Config_Ptr->timer_number) {
    2d0a:	e9 81       	ldd	r30, Y+1	; 0x01
    2d0c:	fa 81       	ldd	r31, Y+2	; 0x02
    2d0e:	80 81       	ld	r24, Z
    2d10:	28 2f       	mov	r18, r24
    2d12:	30 e0       	ldi	r19, 0x00	; 0
    2d14:	3c 83       	std	Y+4, r19	; 0x04
    2d16:	2b 83       	std	Y+3, r18	; 0x03
    2d18:	8b 81       	ldd	r24, Y+3	; 0x03
    2d1a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d1c:	81 30       	cpi	r24, 0x01	; 1
    2d1e:	91 05       	cpc	r25, r1
    2d20:	09 f4       	brne	.+2      	; 0x2d24 <Timer_init+0x2a>
    2d22:	4b c0       	rjmp	.+150    	; 0x2dba <Timer_init+0xc0>
    2d24:	2b 81       	ldd	r18, Y+3	; 0x03
    2d26:	3c 81       	ldd	r19, Y+4	; 0x04
    2d28:	22 30       	cpi	r18, 0x02	; 2
    2d2a:	31 05       	cpc	r19, r1
    2d2c:	09 f4       	brne	.+2      	; 0x2d30 <Timer_init+0x36>
    2d2e:	86 c0       	rjmp	.+268    	; 0x2e3c <Timer_init+0x142>
    2d30:	8b 81       	ldd	r24, Y+3	; 0x03
    2d32:	9c 81       	ldd	r25, Y+4	; 0x04
    2d34:	00 97       	sbiw	r24, 0x00	; 0
    2d36:	09 f0       	breq	.+2      	; 0x2d3a <Timer_init+0x40>
    2d38:	d4 c0       	rjmp	.+424    	; 0x2ee2 <Timer_init+0x1e8>
	case TIMER_0:
		/*FOC0=1 for non-PWM mode */
		TCCR0 = (1 << FOC0);
    2d3a:	e3 e5       	ldi	r30, 0x53	; 83
    2d3c:	f0 e0       	ldi	r31, 0x00	; 0
    2d3e:	80 e8       	ldi	r24, 0x80	; 128
    2d40:	80 83       	st	Z, r24
		/*set the required mode for timer*/
		/*for normal mode WGM00=0,WGM01=0;
		 *for compare match mode WGM00=0,WGM01=1
		 * */
		if (Config_Ptr->mode == COMPARE_MATCH_MODE) {
    2d42:	e9 81       	ldd	r30, Y+1	; 0x01
    2d44:	fa 81       	ldd	r31, Y+2	; 0x02
    2d46:	81 81       	ldd	r24, Z+1	; 0x01
    2d48:	81 30       	cpi	r24, 0x01	; 1
    2d4a:	b1 f4       	brne	.+44     	; 0x2d78 <Timer_init+0x7e>
			SET_BIT(TCCR0, WGM01);
    2d4c:	a3 e5       	ldi	r26, 0x53	; 83
    2d4e:	b0 e0       	ldi	r27, 0x00	; 0
    2d50:	e3 e5       	ldi	r30, 0x53	; 83
    2d52:	f0 e0       	ldi	r31, 0x00	; 0
    2d54:	80 81       	ld	r24, Z
    2d56:	88 60       	ori	r24, 0x08	; 8
    2d58:	8c 93       	st	X, r24
			/*
			 * insert the required compare match value in OCR0 Register
			 */
			OCR0 = Config_Ptr->compare_value;
    2d5a:	ac e5       	ldi	r26, 0x5C	; 92
    2d5c:	b0 e0       	ldi	r27, 0x00	; 0
    2d5e:	e9 81       	ldd	r30, Y+1	; 0x01
    2d60:	fa 81       	ldd	r31, Y+2	; 0x02
    2d62:	84 81       	ldd	r24, Z+4	; 0x04
    2d64:	95 81       	ldd	r25, Z+5	; 0x05
    2d66:	8c 93       	st	X, r24
			/* Enable the compare match interrupt to generate an interrupt when compare match occurs*/
			SET_BIT(TIMSK, OCIE0);
    2d68:	a9 e5       	ldi	r26, 0x59	; 89
    2d6a:	b0 e0       	ldi	r27, 0x00	; 0
    2d6c:	e9 e5       	ldi	r30, 0x59	; 89
    2d6e:	f0 e0       	ldi	r31, 0x00	; 0
    2d70:	80 81       	ld	r24, Z
    2d72:	82 60       	ori	r24, 0x02	; 2
    2d74:	8c 93       	st	X, r24
    2d76:	0c c0       	rjmp	.+24     	; 0x2d90 <Timer_init+0x96>
		} else if (Config_Ptr->mode == NORMAL_MODE) {
    2d78:	e9 81       	ldd	r30, Y+1	; 0x01
    2d7a:	fa 81       	ldd	r31, Y+2	; 0x02
    2d7c:	81 81       	ldd	r24, Z+1	; 0x01
    2d7e:	88 23       	and	r24, r24
    2d80:	39 f4       	brne	.+14     	; 0x2d90 <Timer_init+0x96>
			/* Enable the overflow interrupt to generate an interrupt when overflow occurs*/
			SET_BIT(TIMSK, TOIE0);
    2d82:	a9 e5       	ldi	r26, 0x59	; 89
    2d84:	b0 e0       	ldi	r27, 0x00	; 0
    2d86:	e9 e5       	ldi	r30, 0x59	; 89
    2d88:	f0 e0       	ldi	r31, 0x00	; 0
    2d8a:	80 81       	ld	r24, Z
    2d8c:	81 60       	ori	r24, 0x01	; 1
    2d8e:	8c 93       	st	X, r24
		}
		/*
		 * insert the required clock value in the first three bits (CS00, CS01 and CS02)
		 * of TCCR0 Register
		 */
		TCCR0 = (TCCR0 & 0XF8) | (Config_Ptr->prescale & 0x07);
    2d90:	a3 e5       	ldi	r26, 0x53	; 83
    2d92:	b0 e0       	ldi	r27, 0x00	; 0
    2d94:	e3 e5       	ldi	r30, 0x53	; 83
    2d96:	f0 e0       	ldi	r31, 0x00	; 0
    2d98:	80 81       	ld	r24, Z
    2d9a:	98 2f       	mov	r25, r24
    2d9c:	98 7f       	andi	r25, 0xF8	; 248
    2d9e:	e9 81       	ldd	r30, Y+1	; 0x01
    2da0:	fa 81       	ldd	r31, Y+2	; 0x02
    2da2:	86 81       	ldd	r24, Z+6	; 0x06
    2da4:	87 70       	andi	r24, 0x07	; 7
    2da6:	89 2b       	or	r24, r25
    2da8:	8c 93       	st	X, r24
		/*
		 * insert the required intial value in TCNT0 Register
		 */
		TCNT0 = Config_Ptr->intial_value;
    2daa:	a2 e5       	ldi	r26, 0x52	; 82
    2dac:	b0 e0       	ldi	r27, 0x00	; 0
    2dae:	e9 81       	ldd	r30, Y+1	; 0x01
    2db0:	fa 81       	ldd	r31, Y+2	; 0x02
    2db2:	82 81       	ldd	r24, Z+2	; 0x02
    2db4:	93 81       	ldd	r25, Z+3	; 0x03
    2db6:	8c 93       	st	X, r24
    2db8:	94 c0       	rjmp	.+296    	; 0x2ee2 <Timer_init+0x1e8>
		break;
	case TIMER_1:
		/*FOC1A=1 ,FOC1B=1 for non-PWM mode */
		TCCR1A = (1 << FOC1A) | (1 << FOC1B);
    2dba:	ef e4       	ldi	r30, 0x4F	; 79
    2dbc:	f0 e0       	ldi	r31, 0x00	; 0
    2dbe:	8c e0       	ldi	r24, 0x0C	; 12
    2dc0:	80 83       	st	Z, r24
		/*set the required mode for timer*/
		/*for normal mode WGM10=0,WGM11=0,WGM12=0,WGM13=0;
		 *for compare match mode WGM10=0,WGM11=0,WGM12=1,WGM13=0
		 * */
		if (Config_Ptr->mode == COMPARE_MATCH_MODE) {
    2dc2:	e9 81       	ldd	r30, Y+1	; 0x01
    2dc4:	fa 81       	ldd	r31, Y+2	; 0x02
    2dc6:	81 81       	ldd	r24, Z+1	; 0x01
    2dc8:	81 30       	cpi	r24, 0x01	; 1
    2dca:	a9 f4       	brne	.+42     	; 0x2df6 <Timer_init+0xfc>
			TCCR1B = (1 << WGM12);
    2dcc:	ee e4       	ldi	r30, 0x4E	; 78
    2dce:	f0 e0       	ldi	r31, 0x00	; 0
    2dd0:	88 e0       	ldi	r24, 0x08	; 8
    2dd2:	80 83       	st	Z, r24
			/*
			 * insert the required compare match value in OCR1A Register
			 */
			OCR1A = Config_Ptr->compare_value;
    2dd4:	aa e4       	ldi	r26, 0x4A	; 74
    2dd6:	b0 e0       	ldi	r27, 0x00	; 0
    2dd8:	e9 81       	ldd	r30, Y+1	; 0x01
    2dda:	fa 81       	ldd	r31, Y+2	; 0x02
    2ddc:	84 81       	ldd	r24, Z+4	; 0x04
    2dde:	95 81       	ldd	r25, Z+5	; 0x05
    2de0:	11 96       	adiw	r26, 0x01	; 1
    2de2:	9c 93       	st	X, r25
    2de4:	8e 93       	st	-X, r24
			/* Enable the compare match interrupt to generate an interrupt when compare match occurs*/
			SET_BIT(TIMSK, OCIE1A);
    2de6:	a9 e5       	ldi	r26, 0x59	; 89
    2de8:	b0 e0       	ldi	r27, 0x00	; 0
    2dea:	e9 e5       	ldi	r30, 0x59	; 89
    2dec:	f0 e0       	ldi	r31, 0x00	; 0
    2dee:	80 81       	ld	r24, Z
    2df0:	80 61       	ori	r24, 0x10	; 16
    2df2:	8c 93       	st	X, r24
    2df4:	0c c0       	rjmp	.+24     	; 0x2e0e <Timer_init+0x114>
		} else if (Config_Ptr->mode == NORMAL_MODE) {
    2df6:	e9 81       	ldd	r30, Y+1	; 0x01
    2df8:	fa 81       	ldd	r31, Y+2	; 0x02
    2dfa:	81 81       	ldd	r24, Z+1	; 0x01
    2dfc:	88 23       	and	r24, r24
    2dfe:	39 f4       	brne	.+14     	; 0x2e0e <Timer_init+0x114>
			/* Enable the overflow interrupt to generate an interrupt when overflow occurs*/
			SET_BIT(TIMSK, TOIE1);
    2e00:	a9 e5       	ldi	r26, 0x59	; 89
    2e02:	b0 e0       	ldi	r27, 0x00	; 0
    2e04:	e9 e5       	ldi	r30, 0x59	; 89
    2e06:	f0 e0       	ldi	r31, 0x00	; 0
    2e08:	80 81       	ld	r24, Z
    2e0a:	84 60       	ori	r24, 0x04	; 4
    2e0c:	8c 93       	st	X, r24
		}
		/*
		 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
		 * of TCCR1B Register
		 */
		TCCR1B = (TCCR1B & 0XF8) | (Config_Ptr->prescale & 0x07);
    2e0e:	ae e4       	ldi	r26, 0x4E	; 78
    2e10:	b0 e0       	ldi	r27, 0x00	; 0
    2e12:	ee e4       	ldi	r30, 0x4E	; 78
    2e14:	f0 e0       	ldi	r31, 0x00	; 0
    2e16:	80 81       	ld	r24, Z
    2e18:	98 2f       	mov	r25, r24
    2e1a:	98 7f       	andi	r25, 0xF8	; 248
    2e1c:	e9 81       	ldd	r30, Y+1	; 0x01
    2e1e:	fa 81       	ldd	r31, Y+2	; 0x02
    2e20:	86 81       	ldd	r24, Z+6	; 0x06
    2e22:	87 70       	andi	r24, 0x07	; 7
    2e24:	89 2b       	or	r24, r25
    2e26:	8c 93       	st	X, r24
		/*
		 * insert the required intial value in TCNT1 Register
		 */
		TCNT1 = Config_Ptr->intial_value;
    2e28:	ac e4       	ldi	r26, 0x4C	; 76
    2e2a:	b0 e0       	ldi	r27, 0x00	; 0
    2e2c:	e9 81       	ldd	r30, Y+1	; 0x01
    2e2e:	fa 81       	ldd	r31, Y+2	; 0x02
    2e30:	82 81       	ldd	r24, Z+2	; 0x02
    2e32:	93 81       	ldd	r25, Z+3	; 0x03
    2e34:	11 96       	adiw	r26, 0x01	; 1
    2e36:	9c 93       	st	X, r25
    2e38:	8e 93       	st	-X, r24
    2e3a:	53 c0       	rjmp	.+166    	; 0x2ee2 <Timer_init+0x1e8>
		break;
	case TIMER_2:
		/*FOC2=1 for non-PWM mode */
		TCCR2 = (1 << FOC2);
    2e3c:	e5 e4       	ldi	r30, 0x45	; 69
    2e3e:	f0 e0       	ldi	r31, 0x00	; 0
    2e40:	80 e8       	ldi	r24, 0x80	; 128
    2e42:	80 83       	st	Z, r24
		/*set the required mode for timer*/
		/*for normal mode WGM20=0,WGM21=0;
		 *for compare match mode WGM20=0,WGM21=1
		 * */
		if (Config_Ptr->mode == COMPARE_MATCH_MODE) {
    2e44:	e9 81       	ldd	r30, Y+1	; 0x01
    2e46:	fa 81       	ldd	r31, Y+2	; 0x02
    2e48:	81 81       	ldd	r24, Z+1	; 0x01
    2e4a:	81 30       	cpi	r24, 0x01	; 1
    2e4c:	b1 f4       	brne	.+44     	; 0x2e7a <Timer_init+0x180>
			SET_BIT(TCCR2, WGM21);
    2e4e:	a5 e4       	ldi	r26, 0x45	; 69
    2e50:	b0 e0       	ldi	r27, 0x00	; 0
    2e52:	e5 e4       	ldi	r30, 0x45	; 69
    2e54:	f0 e0       	ldi	r31, 0x00	; 0
    2e56:	80 81       	ld	r24, Z
    2e58:	88 60       	ori	r24, 0x08	; 8
    2e5a:	8c 93       	st	X, r24
			/*
			 * insert the required compare match value in OCR2 Register
			 */
			OCR2 = Config_Ptr->compare_value;
    2e5c:	a3 e4       	ldi	r26, 0x43	; 67
    2e5e:	b0 e0       	ldi	r27, 0x00	; 0
    2e60:	e9 81       	ldd	r30, Y+1	; 0x01
    2e62:	fa 81       	ldd	r31, Y+2	; 0x02
    2e64:	84 81       	ldd	r24, Z+4	; 0x04
    2e66:	95 81       	ldd	r25, Z+5	; 0x05
    2e68:	8c 93       	st	X, r24
			/* Enable the compare match interrupt to generate an interrupt when compare match occurs*/
			SET_BIT(TIMSK, OCIE2);
    2e6a:	a9 e5       	ldi	r26, 0x59	; 89
    2e6c:	b0 e0       	ldi	r27, 0x00	; 0
    2e6e:	e9 e5       	ldi	r30, 0x59	; 89
    2e70:	f0 e0       	ldi	r31, 0x00	; 0
    2e72:	80 81       	ld	r24, Z
    2e74:	80 68       	ori	r24, 0x80	; 128
    2e76:	8c 93       	st	X, r24
    2e78:	0c c0       	rjmp	.+24     	; 0x2e92 <Timer_init+0x198>
		} else if (Config_Ptr->mode == NORMAL_MODE) {
    2e7a:	e9 81       	ldd	r30, Y+1	; 0x01
    2e7c:	fa 81       	ldd	r31, Y+2	; 0x02
    2e7e:	81 81       	ldd	r24, Z+1	; 0x01
    2e80:	88 23       	and	r24, r24
    2e82:	39 f4       	brne	.+14     	; 0x2e92 <Timer_init+0x198>
			/* Enable the overflow interrupt to generate an interrupt when overflow occurs*/
			SET_BIT(TIMSK, TOIE2);
    2e84:	a9 e5       	ldi	r26, 0x59	; 89
    2e86:	b0 e0       	ldi	r27, 0x00	; 0
    2e88:	e9 e5       	ldi	r30, 0x59	; 89
    2e8a:	f0 e0       	ldi	r31, 0x00	; 0
    2e8c:	80 81       	ld	r24, Z
    2e8e:	80 64       	ori	r24, 0x40	; 64
    2e90:	8c 93       	st	X, r24
		}
		/*
		 * insert the required clock value in the first three bits (CS20, CS21 and CS22)
		 * of TCCR2 Register
		 */
		if (Config_Ptr->prescale > F_CPU_8) {
    2e92:	e9 81       	ldd	r30, Y+1	; 0x01
    2e94:	fa 81       	ldd	r31, Y+2	; 0x02
    2e96:	86 81       	ldd	r24, Z+6	; 0x06
    2e98:	83 30       	cpi	r24, 0x03	; 3
    2e9a:	78 f0       	brcs	.+30     	; 0x2eba <Timer_init+0x1c0>
			/*Because there is a difference in the order of prescale between timer2 and timer0&timer1 */
			TCCR2 = (TCCR2 & 0XF8) | ((Config_Ptr->prescale + 2) & 0x07);
    2e9c:	a5 e4       	ldi	r26, 0x45	; 69
    2e9e:	b0 e0       	ldi	r27, 0x00	; 0
    2ea0:	e5 e4       	ldi	r30, 0x45	; 69
    2ea2:	f0 e0       	ldi	r31, 0x00	; 0
    2ea4:	80 81       	ld	r24, Z
    2ea6:	98 2f       	mov	r25, r24
    2ea8:	98 7f       	andi	r25, 0xF8	; 248
    2eaa:	e9 81       	ldd	r30, Y+1	; 0x01
    2eac:	fa 81       	ldd	r31, Y+2	; 0x02
    2eae:	86 81       	ldd	r24, Z+6	; 0x06
    2eb0:	8e 5f       	subi	r24, 0xFE	; 254
    2eb2:	87 70       	andi	r24, 0x07	; 7
    2eb4:	89 2b       	or	r24, r25
    2eb6:	8c 93       	st	X, r24
    2eb8:	0d c0       	rjmp	.+26     	; 0x2ed4 <Timer_init+0x1da>
		} else {
			TCCR2 = (TCCR2 & 0XF8) | ((Config_Ptr->prescale) & 0x07);
    2eba:	a5 e4       	ldi	r26, 0x45	; 69
    2ebc:	b0 e0       	ldi	r27, 0x00	; 0
    2ebe:	e5 e4       	ldi	r30, 0x45	; 69
    2ec0:	f0 e0       	ldi	r31, 0x00	; 0
    2ec2:	80 81       	ld	r24, Z
    2ec4:	98 2f       	mov	r25, r24
    2ec6:	98 7f       	andi	r25, 0xF8	; 248
    2ec8:	e9 81       	ldd	r30, Y+1	; 0x01
    2eca:	fa 81       	ldd	r31, Y+2	; 0x02
    2ecc:	86 81       	ldd	r24, Z+6	; 0x06
    2ece:	87 70       	andi	r24, 0x07	; 7
    2ed0:	89 2b       	or	r24, r25
    2ed2:	8c 93       	st	X, r24
		}
		/*
		 * insert the required intial value in TCNT2 Register
		 */
		TCNT2 = Config_Ptr->intial_value;
    2ed4:	a4 e4       	ldi	r26, 0x44	; 68
    2ed6:	b0 e0       	ldi	r27, 0x00	; 0
    2ed8:	e9 81       	ldd	r30, Y+1	; 0x01
    2eda:	fa 81       	ldd	r31, Y+2	; 0x02
    2edc:	82 81       	ldd	r24, Z+2	; 0x02
    2ede:	93 81       	ldd	r25, Z+3	; 0x03
    2ee0:	8c 93       	st	X, r24
		break;
	}
}
    2ee2:	0f 90       	pop	r0
    2ee4:	0f 90       	pop	r0
    2ee6:	0f 90       	pop	r0
    2ee8:	0f 90       	pop	r0
    2eea:	cf 91       	pop	r28
    2eec:	df 91       	pop	r29
    2eee:	08 95       	ret

00002ef0 <Timer0_setCallBack>:
 * Description: Function to set the Call Back function address.
 */

/******************************************* Timer0 Call back function ***********************************/

void Timer0_setCallBack(void (*a_cb0_ptr)(void)) {
    2ef0:	df 93       	push	r29
    2ef2:	cf 93       	push	r28
    2ef4:	00 d0       	rcall	.+0      	; 0x2ef6 <Timer0_setCallBack+0x6>
    2ef6:	cd b7       	in	r28, 0x3d	; 61
    2ef8:	de b7       	in	r29, 0x3e	; 62
    2efa:	9a 83       	std	Y+2, r25	; 0x02
    2efc:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_timer0_callBackPtr = a_cb0_ptr;
    2efe:	89 81       	ldd	r24, Y+1	; 0x01
    2f00:	9a 81       	ldd	r25, Y+2	; 0x02
    2f02:	90 93 07 01 	sts	0x0107, r25
    2f06:	80 93 06 01 	sts	0x0106, r24
}
    2f0a:	0f 90       	pop	r0
    2f0c:	0f 90       	pop	r0
    2f0e:	cf 91       	pop	r28
    2f10:	df 91       	pop	r29
    2f12:	08 95       	ret

00002f14 <Timer1_setCallBack>:

/******************************************* Timer1Call back function ***********************************/

void Timer1_setCallBack(void (*a_cb1_ptr)(void)) {
    2f14:	df 93       	push	r29
    2f16:	cf 93       	push	r28
    2f18:	00 d0       	rcall	.+0      	; 0x2f1a <Timer1_setCallBack+0x6>
    2f1a:	cd b7       	in	r28, 0x3d	; 61
    2f1c:	de b7       	in	r29, 0x3e	; 62
    2f1e:	9a 83       	std	Y+2, r25	; 0x02
    2f20:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_timer1_callBackPtr = a_cb1_ptr;
    2f22:	89 81       	ldd	r24, Y+1	; 0x01
    2f24:	9a 81       	ldd	r25, Y+2	; 0x02
    2f26:	90 93 09 01 	sts	0x0109, r25
    2f2a:	80 93 08 01 	sts	0x0108, r24
}
    2f2e:	0f 90       	pop	r0
    2f30:	0f 90       	pop	r0
    2f32:	cf 91       	pop	r28
    2f34:	df 91       	pop	r29
    2f36:	08 95       	ret

00002f38 <Timer2_setCallBack>:

/******************************************* Timer2Call back function ***********************************/
void Timer2_setCallBack(void (*a_cb2_ptr)(void)) {
    2f38:	df 93       	push	r29
    2f3a:	cf 93       	push	r28
    2f3c:	00 d0       	rcall	.+0      	; 0x2f3e <Timer2_setCallBack+0x6>
    2f3e:	cd b7       	in	r28, 0x3d	; 61
    2f40:	de b7       	in	r29, 0x3e	; 62
    2f42:	9a 83       	std	Y+2, r25	; 0x02
    2f44:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_timer2_callBackPtr = a_cb2_ptr;
    2f46:	89 81       	ldd	r24, Y+1	; 0x01
    2f48:	9a 81       	ldd	r25, Y+2	; 0x02
    2f4a:	90 93 0b 01 	sts	0x010B, r25
    2f4e:	80 93 0a 01 	sts	0x010A, r24
}
    2f52:	0f 90       	pop	r0
    2f54:	0f 90       	pop	r0
    2f56:	cf 91       	pop	r28
    2f58:	df 91       	pop	r29
    2f5a:	08 95       	ret

00002f5c <Timer_deInit>:

/*
 * Description: Function to disable the Requried Timer (Timer0-Timer1-Timer2)
 */
void Timer_deInit(Timer_TimerNumber timer_number) {
    2f5c:	df 93       	push	r29
    2f5e:	cf 93       	push	r28
    2f60:	00 d0       	rcall	.+0      	; 0x2f62 <Timer_deInit+0x6>
    2f62:	0f 92       	push	r0
    2f64:	cd b7       	in	r28, 0x3d	; 61
    2f66:	de b7       	in	r29, 0x3e	; 62
    2f68:	89 83       	std	Y+1, r24	; 0x01
	switch (timer_number) {
    2f6a:	89 81       	ldd	r24, Y+1	; 0x01
    2f6c:	28 2f       	mov	r18, r24
    2f6e:	30 e0       	ldi	r19, 0x00	; 0
    2f70:	3b 83       	std	Y+3, r19	; 0x03
    2f72:	2a 83       	std	Y+2, r18	; 0x02
    2f74:	8a 81       	ldd	r24, Y+2	; 0x02
    2f76:	9b 81       	ldd	r25, Y+3	; 0x03
    2f78:	81 30       	cpi	r24, 0x01	; 1
    2f7a:	91 05       	cpc	r25, r1
    2f7c:	d1 f0       	breq	.+52     	; 0x2fb2 <Timer_deInit+0x56>
    2f7e:	2a 81       	ldd	r18, Y+2	; 0x02
    2f80:	3b 81       	ldd	r19, Y+3	; 0x03
    2f82:	22 30       	cpi	r18, 0x02	; 2
    2f84:	31 05       	cpc	r19, r1
    2f86:	59 f1       	breq	.+86     	; 0x2fde <Timer_deInit+0x82>
    2f88:	8a 81       	ldd	r24, Y+2	; 0x02
    2f8a:	9b 81       	ldd	r25, Y+3	; 0x03
    2f8c:	00 97       	sbiw	r24, 0x00	; 0
    2f8e:	b9 f5       	brne	.+110    	; 0x2ffe <Timer_deInit+0xa2>
	case TIMER_0:
		/* Clear All Timer0 Registers */
		TCCR0 = 0;
    2f90:	e3 e5       	ldi	r30, 0x53	; 83
    2f92:	f0 e0       	ldi	r31, 0x00	; 0
    2f94:	10 82       	st	Z, r1
		TCNT0 = 0;
    2f96:	e2 e5       	ldi	r30, 0x52	; 82
    2f98:	f0 e0       	ldi	r31, 0x00	; 0
    2f9a:	10 82       	st	Z, r1
		OCR0 = 0;
    2f9c:	ec e5       	ldi	r30, 0x5C	; 92
    2f9e:	f0 e0       	ldi	r31, 0x00	; 0
    2fa0:	10 82       	st	Z, r1
		/* Disable the interrupt */
		TIMSK &= ~(1 << TOIE0) & ~(1 << OCIE0);
    2fa2:	a9 e5       	ldi	r26, 0x59	; 89
    2fa4:	b0 e0       	ldi	r27, 0x00	; 0
    2fa6:	e9 e5       	ldi	r30, 0x59	; 89
    2fa8:	f0 e0       	ldi	r31, 0x00	; 0
    2faa:	80 81       	ld	r24, Z
    2fac:	8c 7f       	andi	r24, 0xFC	; 252
    2fae:	8c 93       	st	X, r24
    2fb0:	26 c0       	rjmp	.+76     	; 0x2ffe <Timer_deInit+0xa2>
		break;
	case TIMER_1:
		/* Clear All Timer1 Registers */
		TCCR1A = 0;
    2fb2:	ef e4       	ldi	r30, 0x4F	; 79
    2fb4:	f0 e0       	ldi	r31, 0x00	; 0
    2fb6:	10 82       	st	Z, r1
		TCCR1B = 0;
    2fb8:	ee e4       	ldi	r30, 0x4E	; 78
    2fba:	f0 e0       	ldi	r31, 0x00	; 0
    2fbc:	10 82       	st	Z, r1
		TCNT1 = 0;
    2fbe:	ec e4       	ldi	r30, 0x4C	; 76
    2fc0:	f0 e0       	ldi	r31, 0x00	; 0
    2fc2:	11 82       	std	Z+1, r1	; 0x01
    2fc4:	10 82       	st	Z, r1
		OCR1A = 0;
    2fc6:	ea e4       	ldi	r30, 0x4A	; 74
    2fc8:	f0 e0       	ldi	r31, 0x00	; 0
    2fca:	11 82       	std	Z+1, r1	; 0x01
    2fcc:	10 82       	st	Z, r1
		/* Disable the interrupt */
		TIMSK &= ~(1 << TOIE1) & ~(1 << OCIE1A);
    2fce:	a9 e5       	ldi	r26, 0x59	; 89
    2fd0:	b0 e0       	ldi	r27, 0x00	; 0
    2fd2:	e9 e5       	ldi	r30, 0x59	; 89
    2fd4:	f0 e0       	ldi	r31, 0x00	; 0
    2fd6:	80 81       	ld	r24, Z
    2fd8:	8b 7e       	andi	r24, 0xEB	; 235
    2fda:	8c 93       	st	X, r24
    2fdc:	10 c0       	rjmp	.+32     	; 0x2ffe <Timer_deInit+0xa2>
		break;
	case TIMER_2:
		/* Clear All Timer2 Registers */
		TCCR2 = 0;
    2fde:	e5 e4       	ldi	r30, 0x45	; 69
    2fe0:	f0 e0       	ldi	r31, 0x00	; 0
    2fe2:	10 82       	st	Z, r1
		TCNT2 = 0;
    2fe4:	e4 e4       	ldi	r30, 0x44	; 68
    2fe6:	f0 e0       	ldi	r31, 0x00	; 0
    2fe8:	10 82       	st	Z, r1
		OCR2 = 0;
    2fea:	e3 e4       	ldi	r30, 0x43	; 67
    2fec:	f0 e0       	ldi	r31, 0x00	; 0
    2fee:	10 82       	st	Z, r1
		/* Disable the interrupt */
		TIMSK &= ~(1 << TOIE2) & ~(1 << OCIE2);
    2ff0:	a9 e5       	ldi	r26, 0x59	; 89
    2ff2:	b0 e0       	ldi	r27, 0x00	; 0
    2ff4:	e9 e5       	ldi	r30, 0x59	; 89
    2ff6:	f0 e0       	ldi	r31, 0x00	; 0
    2ff8:	80 81       	ld	r24, Z
    2ffa:	8f 73       	andi	r24, 0x3F	; 63
    2ffc:	8c 93       	st	X, r24
		break;
	}
}
    2ffe:	0f 90       	pop	r0
    3000:	0f 90       	pop	r0
    3002:	0f 90       	pop	r0
    3004:	cf 91       	pop	r28
    3006:	df 91       	pop	r29
    3008:	08 95       	ret

0000300a <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    300a:	df 93       	push	r29
    300c:	cf 93       	push	r28
    300e:	00 d0       	rcall	.+0      	; 0x3010 <UART_init+0x6>
    3010:	00 d0       	rcall	.+0      	; 0x3012 <UART_init+0x8>
    3012:	cd b7       	in	r28, 0x3d	; 61
    3014:	de b7       	in	r29, 0x3e	; 62
    3016:	9c 83       	std	Y+4, r25	; 0x04
    3018:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    301a:	1a 82       	std	Y+2, r1	; 0x02
    301c:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    301e:	eb e2       	ldi	r30, 0x2B	; 43
    3020:	f0 e0       	ldi	r31, 0x00	; 0
    3022:	82 e0       	ldi	r24, 0x02	; 2
    3024:	80 83       	st	Z, r24
	 * TXCIE = 0 Disable USART Tx Complete Interrupt Enable
	 * UDRIE = 0 Disable USART Data Register Empty Interrupt Enable
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    3026:	ea e2       	ldi	r30, 0x2A	; 42
    3028:	f0 e0       	ldi	r31, 0x00	; 0
    302a:	88 e1       	ldi	r24, 0x18	; 24
    302c:	80 83       	st	Z, r24
	/************************** UCSRC Description **************************
	 * URSEL   = 1 The URSEL must be one when writing the UCSRC
	 * UMSEL   = 0 Asynchronous Operation
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL);
    302e:	e0 e4       	ldi	r30, 0x40	; 64
    3030:	f0 e0       	ldi	r31, 0x00	; 0
    3032:	80 e8       	ldi	r24, 0x80	; 128
    3034:	80 83       	st	Z, r24
	/*
     * insert the required bit data in UCSRC Register
	 */
	UCSRC=(UCSRC&0XF9)|((Config_Ptr->bit_data&0X03)<<1);
    3036:	a0 e4       	ldi	r26, 0x40	; 64
    3038:	b0 e0       	ldi	r27, 0x00	; 0
    303a:	e0 e4       	ldi	r30, 0x40	; 64
    303c:	f0 e0       	ldi	r31, 0x00	; 0
    303e:	80 81       	ld	r24, Z
    3040:	28 2f       	mov	r18, r24
    3042:	29 7f       	andi	r18, 0xF9	; 249
    3044:	eb 81       	ldd	r30, Y+3	; 0x03
    3046:	fc 81       	ldd	r31, Y+4	; 0x04
    3048:	80 81       	ld	r24, Z
    304a:	88 2f       	mov	r24, r24
    304c:	90 e0       	ldi	r25, 0x00	; 0
    304e:	83 70       	andi	r24, 0x03	; 3
    3050:	90 70       	andi	r25, 0x00	; 0
    3052:	88 0f       	add	r24, r24
    3054:	99 1f       	adc	r25, r25
    3056:	82 2b       	or	r24, r18
    3058:	8c 93       	st	X, r24
	if(Config_Ptr->bit_data==DATA_BIT_9){
    305a:	eb 81       	ldd	r30, Y+3	; 0x03
    305c:	fc 81       	ldd	r31, Y+4	; 0x04
    305e:	80 81       	ld	r24, Z
    3060:	87 30       	cpi	r24, 0x07	; 7
    3062:	39 f4       	brne	.+14     	; 0x3072 <UART_init+0x68>
		 * For 9-bit data mode
		 * UCSZ2 = 1
		 * RXB8 & TXB8=1
		 *
		 */
		UCSRB|=0X03;
    3064:	aa e2       	ldi	r26, 0x2A	; 42
    3066:	b0 e0       	ldi	r27, 0x00	; 0
    3068:	ea e2       	ldi	r30, 0x2A	; 42
    306a:	f0 e0       	ldi	r31, 0x00	; 0
    306c:	80 81       	ld	r24, Z
    306e:	83 60       	ori	r24, 0x03	; 3
    3070:	8c 93       	st	X, r24
	}
	/*
     * insert the required stop bit in USBS in UCSRC Register
	 */
	if(Config_Ptr->stop_bit==STOP_BIT_2){
    3072:	eb 81       	ldd	r30, Y+3	; 0x03
    3074:	fc 81       	ldd	r31, Y+4	; 0x04
    3076:	82 81       	ldd	r24, Z+2	; 0x02
    3078:	81 30       	cpi	r24, 0x01	; 1
    307a:	39 f4       	brne	.+14     	; 0x308a <UART_init+0x80>
		SET_BIT(UCSRC,USBS);
    307c:	a0 e4       	ldi	r26, 0x40	; 64
    307e:	b0 e0       	ldi	r27, 0x00	; 0
    3080:	e0 e4       	ldi	r30, 0x40	; 64
    3082:	f0 e0       	ldi	r31, 0x00	; 0
    3084:	80 81       	ld	r24, Z
    3086:	88 60       	ori	r24, 0x08	; 8
    3088:	8c 93       	st	X, r24
	}
	/*
     * insert the required parity mode in UCSRC Register
	 */
	UCSRC=(UCSRC&0XCF)|((Config_Ptr->parity&0X03)<<4);
    308a:	a0 e4       	ldi	r26, 0x40	; 64
    308c:	b0 e0       	ldi	r27, 0x00	; 0
    308e:	e0 e4       	ldi	r30, 0x40	; 64
    3090:	f0 e0       	ldi	r31, 0x00	; 0
    3092:	80 81       	ld	r24, Z
    3094:	28 2f       	mov	r18, r24
    3096:	2f 7c       	andi	r18, 0xCF	; 207
    3098:	eb 81       	ldd	r30, Y+3	; 0x03
    309a:	fc 81       	ldd	r31, Y+4	; 0x04
    309c:	81 81       	ldd	r24, Z+1	; 0x01
    309e:	88 2f       	mov	r24, r24
    30a0:	90 e0       	ldi	r25, 0x00	; 0
    30a2:	83 70       	andi	r24, 0x03	; 3
    30a4:	90 70       	andi	r25, 0x00	; 0
    30a6:	82 95       	swap	r24
    30a8:	92 95       	swap	r25
    30aa:	90 7f       	andi	r25, 0xF0	; 240
    30ac:	98 27       	eor	r25, r24
    30ae:	80 7f       	andi	r24, 0xF0	; 240
    30b0:	98 27       	eor	r25, r24
    30b2:	82 2b       	or	r24, r18
    30b4:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->boud_rate * 8UL))) - 1);
    30b6:	eb 81       	ldd	r30, Y+3	; 0x03
    30b8:	fc 81       	ldd	r31, Y+4	; 0x04
    30ba:	83 81       	ldd	r24, Z+3	; 0x03
    30bc:	94 81       	ldd	r25, Z+4	; 0x04
    30be:	a5 81       	ldd	r26, Z+5	; 0x05
    30c0:	b6 81       	ldd	r27, Z+6	; 0x06
    30c2:	88 0f       	add	r24, r24
    30c4:	99 1f       	adc	r25, r25
    30c6:	aa 1f       	adc	r26, r26
    30c8:	bb 1f       	adc	r27, r27
    30ca:	88 0f       	add	r24, r24
    30cc:	99 1f       	adc	r25, r25
    30ce:	aa 1f       	adc	r26, r26
    30d0:	bb 1f       	adc	r27, r27
    30d2:	88 0f       	add	r24, r24
    30d4:	99 1f       	adc	r25, r25
    30d6:	aa 1f       	adc	r26, r26
    30d8:	bb 1f       	adc	r27, r27
    30da:	9c 01       	movw	r18, r24
    30dc:	ad 01       	movw	r20, r26
    30de:	80 e4       	ldi	r24, 0x40	; 64
    30e0:	92 e4       	ldi	r25, 0x42	; 66
    30e2:	af e0       	ldi	r26, 0x0F	; 15
    30e4:	b0 e0       	ldi	r27, 0x00	; 0
    30e6:	bc 01       	movw	r22, r24
    30e8:	cd 01       	movw	r24, r26
    30ea:	0e 94 20 19 	call	0x3240	; 0x3240 <__udivmodsi4>
    30ee:	da 01       	movw	r26, r20
    30f0:	c9 01       	movw	r24, r18
    30f2:	01 97       	sbiw	r24, 0x01	; 1
    30f4:	9a 83       	std	Y+2, r25	; 0x02
    30f6:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    30f8:	e0 e4       	ldi	r30, 0x40	; 64
    30fa:	f0 e0       	ldi	r31, 0x00	; 0
    30fc:	89 81       	ldd	r24, Y+1	; 0x01
    30fe:	9a 81       	ldd	r25, Y+2	; 0x02
    3100:	89 2f       	mov	r24, r25
    3102:	99 27       	eor	r25, r25
    3104:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    3106:	e9 e2       	ldi	r30, 0x29	; 41
    3108:	f0 e0       	ldi	r31, 0x00	; 0
    310a:	89 81       	ldd	r24, Y+1	; 0x01
    310c:	80 83       	st	Z, r24
}
    310e:	0f 90       	pop	r0
    3110:	0f 90       	pop	r0
    3112:	0f 90       	pop	r0
    3114:	0f 90       	pop	r0
    3116:	cf 91       	pop	r28
    3118:	df 91       	pop	r29
    311a:	08 95       	ret

0000311c <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    311c:	df 93       	push	r29
    311e:	cf 93       	push	r28
    3120:	0f 92       	push	r0
    3122:	cd b7       	in	r28, 0x3d	; 61
    3124:	de b7       	in	r29, 0x3e	; 62
    3126:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    3128:	eb e2       	ldi	r30, 0x2B	; 43
    312a:	f0 e0       	ldi	r31, 0x00	; 0
    312c:	80 81       	ld	r24, Z
    312e:	88 2f       	mov	r24, r24
    3130:	90 e0       	ldi	r25, 0x00	; 0
    3132:	80 72       	andi	r24, 0x20	; 32
    3134:	90 70       	andi	r25, 0x00	; 0
    3136:	00 97       	sbiw	r24, 0x00	; 0
    3138:	b9 f3       	breq	.-18     	; 0x3128 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    313a:	ec e2       	ldi	r30, 0x2C	; 44
    313c:	f0 e0       	ldi	r31, 0x00	; 0
    313e:	89 81       	ldd	r24, Y+1	; 0x01
    3140:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    3142:	0f 90       	pop	r0
    3144:	cf 91       	pop	r28
    3146:	df 91       	pop	r29
    3148:	08 95       	ret

0000314a <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    314a:	df 93       	push	r29
    314c:	cf 93       	push	r28
    314e:	cd b7       	in	r28, 0x3d	; 61
    3150:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    3152:	eb e2       	ldi	r30, 0x2B	; 43
    3154:	f0 e0       	ldi	r31, 0x00	; 0
    3156:	80 81       	ld	r24, Z
    3158:	88 23       	and	r24, r24
    315a:	dc f7       	brge	.-10     	; 0x3152 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    315c:	ec e2       	ldi	r30, 0x2C	; 44
    315e:	f0 e0       	ldi	r31, 0x00	; 0
    3160:	80 81       	ld	r24, Z
}
    3162:	cf 91       	pop	r28
    3164:	df 91       	pop	r29
    3166:	08 95       	ret

00003168 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    3168:	df 93       	push	r29
    316a:	cf 93       	push	r28
    316c:	00 d0       	rcall	.+0      	; 0x316e <UART_sendString+0x6>
    316e:	0f 92       	push	r0
    3170:	cd b7       	in	r28, 0x3d	; 61
    3172:	de b7       	in	r29, 0x3e	; 62
    3174:	9b 83       	std	Y+3, r25	; 0x03
    3176:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3178:	19 82       	std	Y+1, r1	; 0x01
    317a:	0e c0       	rjmp	.+28     	; 0x3198 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    317c:	89 81       	ldd	r24, Y+1	; 0x01
    317e:	28 2f       	mov	r18, r24
    3180:	30 e0       	ldi	r19, 0x00	; 0
    3182:	8a 81       	ldd	r24, Y+2	; 0x02
    3184:	9b 81       	ldd	r25, Y+3	; 0x03
    3186:	fc 01       	movw	r30, r24
    3188:	e2 0f       	add	r30, r18
    318a:	f3 1f       	adc	r31, r19
    318c:	80 81       	ld	r24, Z
    318e:	0e 94 8e 18 	call	0x311c	; 0x311c <UART_sendByte>
		i++;
    3192:	89 81       	ldd	r24, Y+1	; 0x01
    3194:	8f 5f       	subi	r24, 0xFF	; 255
    3196:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    3198:	89 81       	ldd	r24, Y+1	; 0x01
    319a:	28 2f       	mov	r18, r24
    319c:	30 e0       	ldi	r19, 0x00	; 0
    319e:	8a 81       	ldd	r24, Y+2	; 0x02
    31a0:	9b 81       	ldd	r25, Y+3	; 0x03
    31a2:	fc 01       	movw	r30, r24
    31a4:	e2 0f       	add	r30, r18
    31a6:	f3 1f       	adc	r31, r19
    31a8:	80 81       	ld	r24, Z
    31aa:	88 23       	and	r24, r24
    31ac:	39 f7       	brne	.-50     	; 0x317c <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    31ae:	0f 90       	pop	r0
    31b0:	0f 90       	pop	r0
    31b2:	0f 90       	pop	r0
    31b4:	cf 91       	pop	r28
    31b6:	df 91       	pop	r29
    31b8:	08 95       	ret

000031ba <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    31ba:	0f 93       	push	r16
    31bc:	1f 93       	push	r17
    31be:	df 93       	push	r29
    31c0:	cf 93       	push	r28
    31c2:	00 d0       	rcall	.+0      	; 0x31c4 <UART_receiveString+0xa>
    31c4:	0f 92       	push	r0
    31c6:	cd b7       	in	r28, 0x3d	; 61
    31c8:	de b7       	in	r29, 0x3e	; 62
    31ca:	9b 83       	std	Y+3, r25	; 0x03
    31cc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    31ce:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    31d0:	89 81       	ldd	r24, Y+1	; 0x01
    31d2:	28 2f       	mov	r18, r24
    31d4:	30 e0       	ldi	r19, 0x00	; 0
    31d6:	8a 81       	ldd	r24, Y+2	; 0x02
    31d8:	9b 81       	ldd	r25, Y+3	; 0x03
    31da:	8c 01       	movw	r16, r24
    31dc:	02 0f       	add	r16, r18
    31de:	13 1f       	adc	r17, r19
    31e0:	0e 94 a5 18 	call	0x314a	; 0x314a <UART_recieveByte>
    31e4:	f8 01       	movw	r30, r16
    31e6:	80 83       	st	Z, r24
    31e8:	0f c0       	rjmp	.+30     	; 0x3208 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    31ea:	89 81       	ldd	r24, Y+1	; 0x01
    31ec:	8f 5f       	subi	r24, 0xFF	; 255
    31ee:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    31f0:	89 81       	ldd	r24, Y+1	; 0x01
    31f2:	28 2f       	mov	r18, r24
    31f4:	30 e0       	ldi	r19, 0x00	; 0
    31f6:	8a 81       	ldd	r24, Y+2	; 0x02
    31f8:	9b 81       	ldd	r25, Y+3	; 0x03
    31fa:	8c 01       	movw	r16, r24
    31fc:	02 0f       	add	r16, r18
    31fe:	13 1f       	adc	r17, r19
    3200:	0e 94 a5 18 	call	0x314a	; 0x314a <UART_recieveByte>
    3204:	f8 01       	movw	r30, r16
    3206:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    3208:	89 81       	ldd	r24, Y+1	; 0x01
    320a:	28 2f       	mov	r18, r24
    320c:	30 e0       	ldi	r19, 0x00	; 0
    320e:	8a 81       	ldd	r24, Y+2	; 0x02
    3210:	9b 81       	ldd	r25, Y+3	; 0x03
    3212:	fc 01       	movw	r30, r24
    3214:	e2 0f       	add	r30, r18
    3216:	f3 1f       	adc	r31, r19
    3218:	80 81       	ld	r24, Z
    321a:	83 32       	cpi	r24, 0x23	; 35
    321c:	31 f7       	brne	.-52     	; 0x31ea <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    321e:	89 81       	ldd	r24, Y+1	; 0x01
    3220:	28 2f       	mov	r18, r24
    3222:	30 e0       	ldi	r19, 0x00	; 0
    3224:	8a 81       	ldd	r24, Y+2	; 0x02
    3226:	9b 81       	ldd	r25, Y+3	; 0x03
    3228:	fc 01       	movw	r30, r24
    322a:	e2 0f       	add	r30, r18
    322c:	f3 1f       	adc	r31, r19
    322e:	10 82       	st	Z, r1
}
    3230:	0f 90       	pop	r0
    3232:	0f 90       	pop	r0
    3234:	0f 90       	pop	r0
    3236:	cf 91       	pop	r28
    3238:	df 91       	pop	r29
    323a:	1f 91       	pop	r17
    323c:	0f 91       	pop	r16
    323e:	08 95       	ret

00003240 <__udivmodsi4>:
    3240:	a1 e2       	ldi	r26, 0x21	; 33
    3242:	1a 2e       	mov	r1, r26
    3244:	aa 1b       	sub	r26, r26
    3246:	bb 1b       	sub	r27, r27
    3248:	fd 01       	movw	r30, r26
    324a:	0d c0       	rjmp	.+26     	; 0x3266 <__udivmodsi4_ep>

0000324c <__udivmodsi4_loop>:
    324c:	aa 1f       	adc	r26, r26
    324e:	bb 1f       	adc	r27, r27
    3250:	ee 1f       	adc	r30, r30
    3252:	ff 1f       	adc	r31, r31
    3254:	a2 17       	cp	r26, r18
    3256:	b3 07       	cpc	r27, r19
    3258:	e4 07       	cpc	r30, r20
    325a:	f5 07       	cpc	r31, r21
    325c:	20 f0       	brcs	.+8      	; 0x3266 <__udivmodsi4_ep>
    325e:	a2 1b       	sub	r26, r18
    3260:	b3 0b       	sbc	r27, r19
    3262:	e4 0b       	sbc	r30, r20
    3264:	f5 0b       	sbc	r31, r21

00003266 <__udivmodsi4_ep>:
    3266:	66 1f       	adc	r22, r22
    3268:	77 1f       	adc	r23, r23
    326a:	88 1f       	adc	r24, r24
    326c:	99 1f       	adc	r25, r25
    326e:	1a 94       	dec	r1
    3270:	69 f7       	brne	.-38     	; 0x324c <__udivmodsi4_loop>
    3272:	60 95       	com	r22
    3274:	70 95       	com	r23
    3276:	80 95       	com	r24
    3278:	90 95       	com	r25
    327a:	9b 01       	movw	r18, r22
    327c:	ac 01       	movw	r20, r24
    327e:	bd 01       	movw	r22, r26
    3280:	cf 01       	movw	r24, r30
    3282:	08 95       	ret

00003284 <__prologue_saves__>:
    3284:	2f 92       	push	r2
    3286:	3f 92       	push	r3
    3288:	4f 92       	push	r4
    328a:	5f 92       	push	r5
    328c:	6f 92       	push	r6
    328e:	7f 92       	push	r7
    3290:	8f 92       	push	r8
    3292:	9f 92       	push	r9
    3294:	af 92       	push	r10
    3296:	bf 92       	push	r11
    3298:	cf 92       	push	r12
    329a:	df 92       	push	r13
    329c:	ef 92       	push	r14
    329e:	ff 92       	push	r15
    32a0:	0f 93       	push	r16
    32a2:	1f 93       	push	r17
    32a4:	cf 93       	push	r28
    32a6:	df 93       	push	r29
    32a8:	cd b7       	in	r28, 0x3d	; 61
    32aa:	de b7       	in	r29, 0x3e	; 62
    32ac:	ca 1b       	sub	r28, r26
    32ae:	db 0b       	sbc	r29, r27
    32b0:	0f b6       	in	r0, 0x3f	; 63
    32b2:	f8 94       	cli
    32b4:	de bf       	out	0x3e, r29	; 62
    32b6:	0f be       	out	0x3f, r0	; 63
    32b8:	cd bf       	out	0x3d, r28	; 61
    32ba:	09 94       	ijmp

000032bc <__epilogue_restores__>:
    32bc:	2a 88       	ldd	r2, Y+18	; 0x12
    32be:	39 88       	ldd	r3, Y+17	; 0x11
    32c0:	48 88       	ldd	r4, Y+16	; 0x10
    32c2:	5f 84       	ldd	r5, Y+15	; 0x0f
    32c4:	6e 84       	ldd	r6, Y+14	; 0x0e
    32c6:	7d 84       	ldd	r7, Y+13	; 0x0d
    32c8:	8c 84       	ldd	r8, Y+12	; 0x0c
    32ca:	9b 84       	ldd	r9, Y+11	; 0x0b
    32cc:	aa 84       	ldd	r10, Y+10	; 0x0a
    32ce:	b9 84       	ldd	r11, Y+9	; 0x09
    32d0:	c8 84       	ldd	r12, Y+8	; 0x08
    32d2:	df 80       	ldd	r13, Y+7	; 0x07
    32d4:	ee 80       	ldd	r14, Y+6	; 0x06
    32d6:	fd 80       	ldd	r15, Y+5	; 0x05
    32d8:	0c 81       	ldd	r16, Y+4	; 0x04
    32da:	1b 81       	ldd	r17, Y+3	; 0x03
    32dc:	aa 81       	ldd	r26, Y+2	; 0x02
    32de:	b9 81       	ldd	r27, Y+1	; 0x01
    32e0:	ce 0f       	add	r28, r30
    32e2:	d1 1d       	adc	r29, r1
    32e4:	0f b6       	in	r0, 0x3f	; 63
    32e6:	f8 94       	cli
    32e8:	de bf       	out	0x3e, r29	; 62
    32ea:	0f be       	out	0x3f, r0	; 63
    32ec:	cd bf       	out	0x3d, r28	; 61
    32ee:	ed 01       	movw	r28, r26
    32f0:	08 95       	ret

000032f2 <itoa>:
    32f2:	fb 01       	movw	r30, r22
    32f4:	9f 01       	movw	r18, r30
    32f6:	e8 94       	clt
    32f8:	42 30       	cpi	r20, 0x02	; 2
    32fa:	c4 f0       	brlt	.+48     	; 0x332c <itoa+0x3a>
    32fc:	45 32       	cpi	r20, 0x25	; 37
    32fe:	b4 f4       	brge	.+44     	; 0x332c <itoa+0x3a>
    3300:	4a 30       	cpi	r20, 0x0A	; 10
    3302:	29 f4       	brne	.+10     	; 0x330e <itoa+0x1c>
    3304:	97 fb       	bst	r25, 7
    3306:	1e f4       	brtc	.+6      	; 0x330e <itoa+0x1c>
    3308:	90 95       	com	r25
    330a:	81 95       	neg	r24
    330c:	9f 4f       	sbci	r25, 0xFF	; 255
    330e:	64 2f       	mov	r22, r20
    3310:	77 27       	eor	r23, r23
    3312:	0e 94 aa 19 	call	0x3354	; 0x3354 <__udivmodhi4>
    3316:	80 5d       	subi	r24, 0xD0	; 208
    3318:	8a 33       	cpi	r24, 0x3A	; 58
    331a:	0c f0       	brlt	.+2      	; 0x331e <itoa+0x2c>
    331c:	89 5d       	subi	r24, 0xD9	; 217
    331e:	81 93       	st	Z+, r24
    3320:	cb 01       	movw	r24, r22
    3322:	00 97       	sbiw	r24, 0x00	; 0
    3324:	a1 f7       	brne	.-24     	; 0x330e <itoa+0x1c>
    3326:	16 f4       	brtc	.+4      	; 0x332c <itoa+0x3a>
    3328:	5d e2       	ldi	r21, 0x2D	; 45
    332a:	51 93       	st	Z+, r21
    332c:	10 82       	st	Z, r1
    332e:	c9 01       	movw	r24, r18
    3330:	0c 94 9a 19 	jmp	0x3334	; 0x3334 <strrev>

00003334 <strrev>:
    3334:	dc 01       	movw	r26, r24
    3336:	fc 01       	movw	r30, r24
    3338:	67 2f       	mov	r22, r23
    333a:	71 91       	ld	r23, Z+
    333c:	77 23       	and	r23, r23
    333e:	e1 f7       	brne	.-8      	; 0x3338 <strrev+0x4>
    3340:	32 97       	sbiw	r30, 0x02	; 2
    3342:	04 c0       	rjmp	.+8      	; 0x334c <strrev+0x18>
    3344:	7c 91       	ld	r23, X
    3346:	6d 93       	st	X+, r22
    3348:	70 83       	st	Z, r23
    334a:	62 91       	ld	r22, -Z
    334c:	ae 17       	cp	r26, r30
    334e:	bf 07       	cpc	r27, r31
    3350:	c8 f3       	brcs	.-14     	; 0x3344 <strrev+0x10>
    3352:	08 95       	ret

00003354 <__udivmodhi4>:
    3354:	aa 1b       	sub	r26, r26
    3356:	bb 1b       	sub	r27, r27
    3358:	51 e1       	ldi	r21, 0x11	; 17
    335a:	07 c0       	rjmp	.+14     	; 0x336a <__udivmodhi4_ep>

0000335c <__udivmodhi4_loop>:
    335c:	aa 1f       	adc	r26, r26
    335e:	bb 1f       	adc	r27, r27
    3360:	a6 17       	cp	r26, r22
    3362:	b7 07       	cpc	r27, r23
    3364:	10 f0       	brcs	.+4      	; 0x336a <__udivmodhi4_ep>
    3366:	a6 1b       	sub	r26, r22
    3368:	b7 0b       	sbc	r27, r23

0000336a <__udivmodhi4_ep>:
    336a:	88 1f       	adc	r24, r24
    336c:	99 1f       	adc	r25, r25
    336e:	5a 95       	dec	r21
    3370:	a9 f7       	brne	.-22     	; 0x335c <__udivmodhi4_loop>
    3372:	80 95       	com	r24
    3374:	90 95       	com	r25
    3376:	bc 01       	movw	r22, r24
    3378:	cd 01       	movw	r24, r26
    337a:	08 95       	ret

0000337c <_exit>:
    337c:	f8 94       	cli

0000337e <__stop_program>:
    337e:	ff cf       	rjmp	.-2      	; 0x337e <__stop_program>
